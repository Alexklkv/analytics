<?php

/**
 * Analytics
 * Аналитика для компьютерных игр
 *
 * @link https://bigstat.net
 * @copyright © 2013-2015 ROCKSTONE (ООО "ИТ Решения")
 */

/**
 * Реализует отчёты Трагедии Белок English
 *
 * @uses DatabaseInterface
 * @uses ObjectLog
 *
 * @version 1.0.1
 */
class ObjectSquirrelse extends Object implements DatabaseInterface
{
	/**
	 * Идентификатор проекта в системе аналитики
	 */
	private static $service_id;

	/**
	 * Прямые платежи через социальные сети, покупка игровой валюты
	 */
	const OfferNone = 0;

	const OfferBox_60 = 6;
	const OfferBox_100_1 = 7;
	const OfferBox_100_2 = 8;
	const OfferBox_100_3 = 10;
	const OfferBox_300_1 = 11;
	const OfferBox_300_2 = 12;
	const OfferBox_300_3 = 14;
	const OfferBox_200_1 = 17;

	const OfferPie = 15;
	const OfferLaysMax = 16;
	const OfferCheetos = 18;
	const OfferCheetosPromo = 19;

	const ReferrersFB	= "30001, 30002, 30003, 30004, 30005, 30006, 30007, 30008, 30009, 30010, 30011, 30012, 30013, 30014, 30015, 30016, 30017, 30018, 30019, 30020, 30021, 30022, 30023, 30024, 30025, 30026, 30027, 30028, 30029, 30030, 30031, 30032, 30033, 30034, 30035, 30036, 30037, 30038, 30039, 30040, 30041, 30042, 30043, 30044, 30045, 30046, 30047, 30048, 30049";
	const ReferrersMax	= "110001";

	/**
	 * @var array Массив социальных сетей, на площадках которых работает проект,
	 * для обозначения кривых на графиках. Ключи массива соответствуют
	 * полю type в таблицах payments и players в базе данных игрового сервера.
	 */
	private $networks = array(5 => "Facebook", 33 => "Kongregate");
	private $ages = array(3 => "19-24", 4 => "25-35", 5 => "36+", 0 => "1-10", 1 => "11-14", 2 => "15-18", 99 => "Не задан");
	private $sex = array(2 => "Мужской", 1 => "Женский", 0 => "Не задан");
	private $payments = array(1 => "1-49", 5 => "5", 10 => "10", 15 => "15", 35 => "35", 50 => "50", 60 => "60", 125 => "125", 150 => "150", 250 => "250", 500 => "500", 51 => "51-70", 71 => "71-100", 101 => "101-149", 151 => "151-249", 251 => "251-500", 501 => "501-999", 1000 => "1000+", 0 => "Другие", -1 => "Сундук", -2 => "Офферы");
	private $periods = array(0 => "0-1d", 2 => "2-7d", 8 => "8-14d", 15 => "15-30d", 31 => "31d+");
	private $locations = array(0 => "Летающие острова", 1 => "Снежные хребты", 2 => "Топи", 3 => "Пустыня", 4 => "Аномальная зона", 5 => "Дикие земли", 7 => "Обучение", 9 => "Испытания", 10 => "Битва", 13 => "Шторм", 14 => "Снежная долина", 15 => "Стадион", 18 => "Песочница");
	private $location_mods = array(0 => "Классический", 1 => "Испытания", 2 => "Все дракоши", 3 => "Ночь", 4 => "Безумный шаман", 5 => "2 Шамана", 6 => "Связанные", 7 => "Летающий орех", 8 => "Змейка", 9 => "Колодец", 10 => "Интерактивный", 11 => "Снеговик", 12 => "Механизмы", 13 => "Логический", 14 => "Ловушки");
	private $sandbox_maps = array(2041607 => "Карта ID 2041607", 2041608 => "Карта ID 2041608", 2041609 => "Карта ID 2041609", 2041610 => "Карта ID 2041610", 2041611 => "Карта ID 2041611", 2041613 => "Карта ID 2041613", 2041614 => "Карта ID 2041614", 2041615 => "Карта ID 2041615", 2041616 => "Карта ID 2041616", 2044061 => "Карта ID 2044061");
	private $quests = array(0 => "Напарник", 1 => "Срочная доставка", 2 => "Без жалости", 3 => "Сокрытые сокровища", 4 => "Дикие орехи", 5 => "Руками не трогать!", 6 => "Золотая лихорадка", 7 => "Терпение", 8 => "Аномальный дождь", 9 => "Кладоискатель", 10 => "Совершенно секретно", 11 => "Наперегонки", 12 => "Внутренний страх", 13 => "Экстракт бессмертия", 100 => "Напарник (сложный)", 101 => "Срочная доставка (сложный)", 102 => "Без жалости (сложный)", 103 => "Сокрытые сокровища (сложный)", 104 => "Дикие орехи (сложный)", 105 => "Руками не трогать! (сложный)", 106 => "Золотая лихорадка (сложный)", 107 => "Терпение (сложный)", 108 => "Аномальный дождь (сложный)", 109 => "Кладоискатель (сложный)", 110 => "Совершенно секретно (сложный)", 111 => "Наперегонки (сложный)", 112 => "Внутренний страх (сложный)", 113 => "Экстракт бессмертия (сложный)");
	private $user_tags = array(0 => "Не установлен", 1 => "Старая кнопка банка", 2 => "Новая кнопка банка", 3 => "Статичный фон (Острова)", 4 => "Динамичный фон (Острова)");

	private $reasons = array(
		-1 => "Отложенный античит", 1 => "Предупреждение", 2 => "Нарушение в чате", 3 => "Ненорматив в имени", 4 => "Грубое нарушение на карте",
		5 => "Использование стороннего ПО", 6 => "Античит", 7 => "Быстрый сбор предметов", 8 => "Быстрое окончание раунда",
		9 => "", 10 => "Автовыкидывание за изменение пакетов"
	);
	private $death_reasons = array(0 => "Падение/выход за экран", 1 => "Ядра из битвы", 2 => "Кислота", 3 => "Шипы, кости", 4 => "Зыбучий песок", 5 => "Жажда", 6 => "Суицид", 7 => "Кик по голосованию");
	private $life_time_periods = array(0 => "0d", 1 => "1d", 2 => "2d", 3 => "3d", 4 => "4-7d", 5 => "8-10d", 6 => "11-14d", 7 => "15-21d", 8 => "22-30d", 9 => "31-60d", 10 => "61-90d", 11 => "91d+");
	private $offers = array(1 => "SponsorPay", 2 => "ФотоСтрана", 3 => "ВКонтакте", 5 => "TapJoy", 6 => "Сундук 03.04.13", 7 => "Сундук 26.12.13", 8 => "Сундук 25.04.14", 9 => "Чупа-Чупс", 10 => "Сундук 19.06.14", 11 => "Сундук 07.07.14", 12 => "Сундук 29.07.14", 13 => "Qiwi", 14 => "Сундук 27.10.14", 15 => "Пирог", 16 => "Lay's Max", 17 => "Сундук 19.12.14", 18 => "Регистрация Читос", 19 => "Промо-код Читос", 20 => "Золото Лепрекона", 21 => "Платеж за регистрацию Читос", 22 => "Сундук 13.08.2015", 23 => "Сундук 10.09.2015", 24 => "Сундук 05.10.2015");
	private $campaigns = array(
		0 => "1 Элементы костюмов", 1 => "2 Элемент одежды", 2 => "3 Коллекции", 3 => "4 Двойная мана", 4 => "5 Комплект автовоскрешений", 5 => "6 Маленькая подписка",
		6 => "7 Смайлы", 7 => "8 Комплект предметов шамана", 8 => "9 Смена ника и создание клана", 9 => "10 Доступ к локациям", 10 => "11 Удвоенные монеты (маленькая)", 11 => "12 Бесплатная энергия",
		12 => "13 Примерка", 13 => "14 Бесплатные предметы шамана", 14 => "15 Любой костюм", 15 => "16 Большая подписка", 16 => "17 Мана за подписку", 17 => "18 Удвоенные монеты (большая)",
		18 => "19 Мана белки", 19 => "20 Автовоскрешение", 20 => "21 Любой элемент одежды", 21 => "22 Элементы коллекций", 22 => "23 Удвоенные монеты", 23 => "24 Зелье маны",
		24 => "25 Энергия", 25 => "26 Мана", 26 => "27 Костюм на сутки", 27 => "28 Предметы шамана", 28 => "29 Доступ ко всем локациям", 29 => "30 Пак предметов шамана",
		30 => "31 VIP на день (10 монет+)", 31 => "32 VIP на день (за одежду)", 32 => "33 VIP на день (скидка)", 33 => "34 Смена ника", 34 => "35 Зелье превосходства (месяц)", 35 => "36 Зелье превосходства (80 маны)",
		36 => "37 Любой костюм", 37 => "38 Костюм за покупку монет", 38 => "39 VIP на неделю (скидка)", 39 => "40 VIP на неделю (за костюм)", 40 => "41 Смайлы", 41 => "42 Включаемый VIP на месяц",
		42 => "43 Включаемый VIP на месяц", 43 => "44 Профессии шамана", 44 => "45 Навыки шамана", 45 => "46 Декор", 46 => "47 VIP на месяц", 47 => "48 Костюмы шаманов"
	);

	private $goods = array(
		-1 => "Карты на модерацию", 1 => "Одежда", 2 => "Энергия мал. (Друзья)", 3 => "Энергия бол.",
		4 => "Мана мал. (Друзья)", 5 => "Мана бол.", 6 => "Шаман на раунде", 7 => "Орехи",
		8 => "Локация", 10 => "Заяц на раунде", 11 => "Монетки", 14 => "Предметы шамана",
		15 => "Набор предметов шамана", 16 => "Подписка", 17 => "Кланы: комнаты", 18 => "Дракон на раунде",
		19 => "Предметы шамана на раунде", 21 => "Подарки на раунде", 22 => "Воскрешение", 23 => "Эвент: Дрожжи",
		24 => "Эвент: Бустеры", 25 => "Квесты: Отмена", 26 => "Комплекты одежды", 27 => "Кланы: Места в клане",
		28 => "Кланы: Бустеры", 29 => "Кланы: Тотемы", 30 => "Элементы коллекций", 31 => "Коробка с подарками",
		32 => "Поздравления", 33 => "Ускорение обмена коллекций", 34 => "Олимпийские билеты за монеты", 35 => "Олимпийские билеты за орехи",
		36 => "Валентинка", 37 => "Олимпийское воскрешение", 38 => "Смена ника", 39 => "Травма",
		40 => "Смайлы", 41 => "Эвент: Яйца", 42 => "Эвент: Руна", 43 => "Эвент: Кулич",
		44 => "Эвент: Пак предметов", 45 => "VIP-Статус", 46 => "Пакет предметов шамана", 47 => "Декорации",
		48 => "Навыки шамана", 49 => "Сброс очков шамана", 50 => "Профессии шамана", 51 => "На картах квестов",
		52 => "Сундук с костюмом (квест)", 53 => "1 сентября: Элементы", 54 => "Хеллоуин 2014: Конфеты", 55 => "Новый год 2015: Снежки",
		57 => "Аренда костюма на день", 58 => "Аренда костюма на неделю", 59 => "Аренда костюма на месяц"
	);

	private $referrers_fb = array(30001 => "Переходы с Open Graph [aggregation][30001]", 30002 => "Центр приложений [appcenter][30002]", 30003 => "Центр приложений по инвайту [appcenter_request][30003]", 30004 => "Закладки в профиле, блок приложений [bookmark_apps][30004]", 30005 => "Избранное в профиле [bookmark_favorites][30005]", 30006 => "\"Показать еще\" в закладках [bookmark_seeall][30006]", 30007 => "Закладки в приложениях [canvasbookmarks][30007]", 30008 => "\"Показать еще\" приложениях [canvasbookmark_more][30008]", 30009 => "Рекомендованные в приложениях ['canvasbookmark_recommended][30009]", 30010 => "Старая лента закладки [dashboard_bookmark][30010]", 30011 => "Старая лента топ приложений [dashboard_toplist][30011]", 30012 => "[dialog_permission][30012]", 30013 => "Предложенные приложения [ego][30013]", 30014 => "Лента [feed][30014]", 30015 => "Новостная лента [nf][30015]", 30016 => "Лента Достижение [feed_achievement][30016]", 30017 => "Лента Лучших результатов [feed_highscore][30017]", 30018 => "Лента Пост с музыкой [feed_music][30018]", 30019 => "Лента Остальное [feed_opengraph][30019]", 30020 => "Лента Победа над другим игроком [feed_passing][30020]", 30021 => "Лента Играют сейчас [feed_playing][30021]", 30022 => "Лента Видео пост [feed_video][30022]", 30023 => "Мои недавние игры [games_my_recent][30023]", 30024 => "Игры друзей [games_friends_apps][30024]", 30025 => "Диалог при наведении на приложение [hovercard][30025]", 30026 => "Из сообщения [message][30026]", 30027 => "Мини-лента [mf][30027]", 30028 => "Из уведомлений [notification][30028]", 30029 => "Лента Пользователь играет в ... [other_multiline][30029]", 30030 => "Люди, которых вы можете знать [pymk][30030]", 30031 => "Последняя активность [recent_activity][30031]", 30032 => "Напоминания о частых приложениях [reminders][30032]", 30033 => "[request][30033]", 30034 => "Поиск [search][30034]", 30035 => "[ticker][30035]", 30036 => "История пользователя в приложении [timeline_og][30036]", 30037 => "История последних действий [timeline_news][30037]", 30038 => "История победа над игроком [timeline_passing][30038]", 30039 => "История недавние достижения [timeline_recent][30039]", 30040 => "Закладка в боковой панели [sidebar_bookmark][30040]", 30041 => "Рекомендованные в боковой панели [sidebar_recommended][30041]", 30042 => "Закладки [bookmarks][30042]", 30043 => "Рекомендуемые игры [games_featured][30043]", 30044 => "Рекомендуемая игра [featured_game][30044]", 30045 => "Уведомления [notif][30045]", 30046 => "Поиск [ts][30046]", 30047 => "История недавние достижения [rua][30047]", 30048 => "Лента Пост с музыкой [feed_music][30048]", 30049 => "[timeline][30049]");

	private $level_groups = array(0 => "0-1", 1 => "2", 2 => "3", 3 => "4-14", 4 => "15-23", 5 => "24-29", 6 => "30-33", 7 => "34-39", 8 => "40-47", 9 => "48-55", 10 => "56-70", 11 => "71-90", 12 => "91-110", 13 => "111-155");
	private $achieves_all = array(
		'common' => array(
			0 => "Ответственный", 1 => "Игроман", 2 => "Предприимчивый", 3 => "Неудержимый", 4 => "Неистовый", 5 => "Зазывала", 6 => "Знающий", 7 => "Скромняга",
			8 => "Общительный", 9 => "Звезда", 10 => "Модник", 11 => "Пижон", 12 => "Выпендрёжник", 13 => "Активный", 14 => "Гиперактивный", 15 => "Манчкин",
			16 => "Бизнесмен", 17 => "Предприниматель", 18 => "Неистребимый", 19 => "Фотограф-новичок", 20 => "Фотограф-любитель", 21 => "Фотограф-профессионал",
			22 => "Оратор", 23 => "Даритель", 24 => "Кофе в постель", 25 => "Угощаю всех!", 26 => "Хамелеон", 27 => "Как Сэм Фишер", 28 => "Кто съел мои орехи?!",
			29 => "Молния", 30 => "Искры по шёрстке", 31 => "Батарейки в комплекте", 32 => "Скалолаз", 33 => "Я иду по потолку", 34 => "Гравитация не для меня",
			35 => "Малыш", 36 => "Букашка", 37 => "Прилип к подошве", 38 => "Варвар", 39 => "Кочевник", 40 => "Король севера", 41 => "Высокая планка",
			42 => "Печенье на верхней полке", 43 => "Дыра в потолке", 44 => "Пилот", 45 => "Космонавт", 46 => "В бесконечность и далее!", 47 => "Два раза сразу",
			48 => "Как кузнечик", 49 => "Прогулки по воздуху", 50 => "Всегда вовремя", 51 => "Одна нога здесь...", 52 => "Сезон хэдкрабов", 53 => "Переселение душ",
			54 => "Зомби", 55 => "Отрицающий смерть", 56 => "Ученик чародея", 57 => "Волшебник", 58 => "Молодой Скрэт", 59 => "Опытный Скрэт", 60 => "Бывалый Скрэт",
			61 => "Воин", 62 => "Ветеран", 63 => "Длань смерти", 64 => "Медик", 65 => "Ценитель жизни", 66 => "А если порежу пальчик?", 67 => "Полный арсенал",
			68 => "Вооружён до зубов", 69 => "Терминатор", 70 => "Мститель", 71 => "Убийца", 72 => "Ассасин", 73 => "Снайпер", 74 => "Огонь по своим",
			75 => "Большая зелёная белка", 76 => "Поиграть? Не судьба", 77 => "Добытчик", 78 => "Молодчик", 79 => "Хвастунишка", 80 => "Хорошая компания",
			81 => "Перспективный проектировщик"
		),

		'consumer' => array(
			82 => "Шустрый", 83 => "Проворный", 84 => "Сверхзвуковой", 85 => "Оруженосец", 86 => "Рыцарь", 87 => "Джедай", 88 => "А здесь прохладно!",
			89 => "Бабушкины варежки", 90 => "Отмороженный", 91 => "Мачете!", 92 => "Мачете два!", 93 => "Мачете три!", 94 => "Третий глаз", 95 => "Шестилапый",
			96 => "Мутант", 97 => "Осадки в виде орехов", 98 => "Гуляю под дождём", 99 => "Повелитель бури", 100 => "Испытанный", 101 => "Настоящая белка",
			102 => "Знак качества", 103 => "Победитель", 104 => "Полководец", 105 => "Опытный Собиратель", 106 => "Усердный Собиратель", 107 => "Великий Собиратель",
			108 => "Одетый", 109 => "Шапка невидимка", 110 => "Сапоги скороходы", 111 => "Турист", 112 => "Добрый Зайка", 113 => "Поджигатель", 114 => "Сентиментальный",
			115 => "Романтик", 116 => "Обожатель", 117 => "Фаворит", 118 => "Любимчик", 119 => "Избранный", 120 => "Проказник", 121 => "Зажиточный", 122 => "Богач",
			123 => "Миллионер", 124 => "Первая сотня", 125 => "Щедрый", 126 => "Филантроп", 127 => "Живунчик"
		),

		'shaman' => array(
			128 => "Шаман с дипломом", 129 => "Молодой шаман", 130 => "Гуру", 131 => "Магистр", 132 => "Ведущий", 133 => "Спаситель", 134 => "Незаменимый",
			135 => "Трубка мира", 136 => "Снежный волк", 137 => "Волшебная плесень", 138 => "Болт на верёвочке", 139 => "Бурерождённый",
			140 => "Мастер боевых искусств", 141 => "Оракул", 142 => "Пророк", 143 => "Мессия", 144 => "Любимый шаман", 145 => "Учуял по запаху",
			146 => "Слепой монах", 147 => "Ниндзя", 148 => "Злобный", 149 => "Безумец", 150 => "Помощник", 151 => "С блэкджеком и белочками",
			152 => "Просто шаман объелся грибов", 153 => "Инженер", 154 => "Конструктор", 155 => "Творец", 156 => "Муки совести", 157 => "Один раз отмерь",
			158 => "Я художник", 159 => "Уничтожитель", 160 => "Вандал", 161 => "Антиматерия в коробочке"
		),

		'epic' => array(
			162 => "Превосходный", 163 => "Блистательный", 164 => "Энерджайзер", 165 => "Лучше всех", 166 => "Сундук", 167 => "Осторожный",
			168 => "Изворотливый", 169 => "Фанат игры", 170 => "Братюня", 171 => "Неугомонный", 172 => "Со скоростью света", 173 => "Диктатор",
			174 => "Старейшина", 175 => "Псих", 176 => "Хомяк", 177 => "Транжира", 178 => "Архимаг", 179 => "Упорный", 180 => "Совершенный",
			181 => "Перфекционист", 182 => "Скрэт", 183 => "Скрэтти", 184 => "Железный Скрэт", 185 => "Железная Скрэтти", 186 => "Скрэт-Гаргул",
			187 => "Скрэтти-Гаргулья", 188 => "Скрэт-Фокусник", 189 => "Скрэтти-Фокусница", 190 => "Поклонник Скрэта", 191 => "Поклонник Скрэтти",
			192 => "Оборотень"
		)
	);

	/**
	 * @var array Комплекты одежды - массив подписей к отчётам Покупки: Одежда, Одежда на день,
	 * Одежда на неделю, Одежда на месяц. Ключи массива
	 * соответствуют полям buyings.data и temporary_packages.package_id в базе данных.
	 * При внесении измений нужно добавить/удалить данные в $packages_menu обязательно,
	 * и, если есть элементы комплекта, добавить их в $packages_elements,
	 * также, если у костюмов есть перки, нужно их добавить в $perks
	 */
	private $packages = array(
		0 => "Комплект Кошки", 1 => "Комплект Железного Человека", 2 => "Комплект Викинга", 3 => "Комплект Скелета",
		4 => "Комплект Ниндзя", 5 => "Комплект Самурая", 6 => "Комплект Деда Мороза (новый)", 7 => "Комплект Снегурочки",
		8 => "Комплект Ангела", 9 => "Комплект Архангела", 10 => "Комплект Зайца НеСудьбы", 11 => "Мужской комплект Полицейского",
		12 => "Женщины комплект Полицейского", 13 => "Комплект Стиляги", 14 => "Комплект Росомахи", 15 => "Комплект Легионера",
		16 => "Комплект Человека Паука", 17 => "Комплект Дарта Вейдера", 18 => "Комплект Тора", 19 => "Свадебный комплект",
		20 => "Советский комплект", 21 => "Гламурный комплект", 22 => "Комплект джентельмена", 23 => "Комплект Истинной леди",
		24 => "Комплект Гопника", 25 => "Комплект Наполеона", 26 => "Эльфийские одеяния", 27 => "Костюм Локи",
		28 => "Костюм для тусовок", 29 => "Комплект медсестры", 30 => "Комплект доктора", 31 => "Костюм из лепестков (женский)",
		32 => "Костюм из лепестков (мужской)", 33 => "Костюм волшебницы", 34 => "Костюм волшебника", 35 => "Женский костюм Патриота",
		36 => "Мужской костюм Патриота", 37 => "Костюм Хипстера Женский", 38 => "Костюм Хипстера Мужской", 39 => "Костюм Пирата",
		40 => "Костюм белки из стали", 41 => "Костюм белочки из стали", 42 => "Костюм Рэмбо", 43 => "Фокусник мужчина",
		44 => "Фокусник женщина", 45 => "Костюм спартанца мужской", 46 => "Костюм спартанца женский", 47 => "Шляпник",
		48 => "Лепрекон", 49 => "Вампир", 50 => "Странник пустыни", 51 => "Странница пустыни",
		52 => "Костюм школьницы", 53 => "Костюм школьника", 54 => "Костюм бетмена", 55 => "Костюм женщины кошки",
		56 => "Костюм Волка", 57 => "Новогодний Костюм", 58 => "Сказочный костюм", 59 => "Голубчик",
		60 => "Жемчужинка", 61 => "Мужской олимпийский костюм", 62 => "Женский олимпийский костюм", 63 => "Костюм сноубордиста",
		64 => "Костюм Мику", 65 => "Костюм Лена", 66 => "Костюм Хранителя времени", 67 => "Костюм Хранительницы времени",
		68 => "Костюм Ктулху младшего", 69 => "Костюм Ктулху младшей", 70 => "Костюм Сейлор Мун", 71 => "Костюм Такседо Маска",
		72 => "Костюм Соника", 73 => "Костюм Эми Роуз", 74 => "Летучий голландец", 75 => "Костюм Бамблби",
		76 => "Костюм Арси", 77 => "Костюм Белхотепа", 78 => "Костюм Клеобеллы", 79 => "Импульс",
		80 => "Кинетика", 81 => "Мужской костюм зелёного шамана", 82 => "Женский костюм зелёного шамана", 83 => "Мужской костюм синего шамана",
		84 => "Женский костюм синего шамана", 85 => "Мужской костюм фиолетового шамана", 86 => "Женский костюм фиолетового шамана", 87 => "Хиппи Ммужской",
		88 => "Хиппи Женский", 89 => "Капитан Америка 2014", 90 => "Модница", 91 => "Комлект Таити",
		92 => "Костюм Джокера", 93 => "Костюм Харли Квинн", 94 => "Вендиго", 95 => "Костюм Жреца 95",
		96 => "Ловец снов", 97 => "Повелительница грёз", 98 => "Зелёный шаман стихий", 99 => "Чеширский кот",
		100 => "Костюм Рудольфа", 101 => "Костюм Дедушки Мороза", 102 => "Костюм Снежной Феи", 103 => "Костюм Снегурочки",
		104 => "Синий Шаман Стихий", 105 => "Красный Шаман Стихий", 106 => "Фиолетовый Шаман Стихий", 107 => "Женский костюм Хани Лемон",
		108 => "Костюм Беззубика", 109 => "Костюм Пикачу", 136 => "Костюм Снежного барса", 137 => "Костюм ассасина",
		139 => "Костюм Сладкоежки", 140 => "Броненосец", 142 => "Костюм Flash"
	);

	/**
	 * @var array Элементы комплектов одежды - массив подписей к отчётам
	 * Покупки: Одежда, Одежда на день, Одежда на неделю, Одежда на месяц.
	 * Ключи массива соответствуют полям buyings.data, clothes.clothes_id и temporary_clothes.clothes_id.
	 * При внесении измений нужно добавить/удалить данные в $packages_menu обязательно
	 */
	private $packages_elements = array(
		-1 => "Гавайская рубашка", -2 => "Зеленые бомбошки", -3 => "Жестяные банки", -4 => "Солнечные очки", -5 => "Шляпа Стиляги", -6 => "Рубашка Стиляги",
		-7 => "Ирокез", -8 => "Ангелочек", -9 => "Кроличьи ушки", -10 => "Ушанка", -11 => "Шлем Дарта Вейдера", -12 => "Розовые локоны",
		-13 => "Больной на голову", -14 => "Цилиндр с моноклем", -15 => "Бабочка", -16 => "Фата", -17 => "Венок Таити", -18 => "Юбка Таити",
		-19 => "Анонимус", -20 => "Семейные трусы", -21 => "Полосатый шарфик", -22 => "Шуба Красного Деда Мороза", -23 => "Шуба Голубой Снегурочки", -24 => "Шапка Красного Деда Мороза",
		-25 => "Шапка Голубой Снегурочки", -27 => "Кепарик гопника", -28 => "Спортивные штаники", -29 => "Тумба-Юмба", -30 => "Венок", -31 => "Подгузники",
		-32 => "Супермен", -33 => "Платье", -34 => "Юбка", -35 => "Тельняшка", -36 => "Красная футболка", -37 => "Норвежский свитер",
		-38 => "Красный бант", -39 => "Бальное платье с бантом", -40 => "Платье невесты", -41 => "Повязка Хиппи", -42 => "Майка Хиппи", -43 => "Юбка Хиппи",
		-44 => "Штаны Хиппи", -45 => "Подвеска Хиппи", -46 => "Брюки Стиляги", -47 => "Пиджак Стиляги", -48 => "Причёска Росомахи", -49 => "Джинсы Росомахи",
		-50 => "Куртка Росомахи", -51 => "Оранжевые бомбошки", -52 => "Смайлик", -53 => "Смешарик Крош", -54 => "Сердечко на хвост", -55 => "Штаны легионера",
		-57 => "Шлем легионера", -58 => "Шлем центуриона", -60 => "Копье легионера", -61 => "Броня легионера", -62 => "Шлем Тора", -63 => "Мьёльнир",
		-64 => "Броня Тора", -65 => "Штаны Тора", -66 => "Щит из вибраниевой стали", -67 => "Маска Капитана Америка", -68 => "Штаны Капитана Америка", -69 => "Броня Капитана Америка",
		-70 => "Броня Дарта Вейдера", -71 => "Штаны Дарта Вейдера", -72 => "Плащ Дарта Вейдера", -73 => "Световой меч", -74 => "Шапка Зайца НеСудьбы", -75 => "Комбинезон Зайца НеСудьбы",
		-76 => "Морковка", -77 => "Рунический Желудь", -78 => "Маска человека-паука", -79 => "Кофта человека-паука", -80 => "Штаны человека-паука", -81 => "Паук на хвост",
		-82 => "Маска", -83 => "Водолазка", -84 => "Леггинсы", -85 => "Нэко-тян", -86 => "Хлыст", -88 => "Шлем",
		-89 => "Верхняя броня", -90 => "Нижняя броня", -91 => "Энергоячейка", -93 => "Костюм зомби", -94 => "Муж. шапка полицейского", -95 => "Жен. шапка полицейского",
		-96 => "Рубашка полицейского", -97 => "Штаны полицейского", -98 => "Наручники на хвост", -99 => "Маска Ниндзя", -100 => "Меч Ниндзя", -101 => "Кофта Ниндзя",
		-102 => "Штаны Ниндзя", -103 => "Сюрикен на хвост", -104 => "Череп", -105 => "Скелет", -106 => "Тыква", -107 => "Шлем Викинга",
		-108 => "Оружие Викинга", -109 => "Броня Викинга", -110 => "Щит Викинга", -113 => "Костюм зомби Девочки", -115 => "Красный Викинг", -116 => "Шлем Самурая",
		-117 => "Броня Самурая", -118 => "Штаны Самурая", -119 => "Нунчаки Самурая", -121 => "Шуба Синего Деда Мороза", -122 => "Шапка Синего Деда Мороза", -123 => "Новогодние шарики",
		-124 => "Шуба Белой Снегурочки", -125 => "Шапка Белой Снегурочки", -126 => "Новогодний подарок", -129 => "Роба Ангела", -130 => "Звезда Ангела", -132 => "Роба Архангела",
		-133 => "Колокол Архангела", -135 => "Костюм Смерти", -145 => "Костюм Сладкой Смерти", -152 => "Платье истинной леди", -153 => "Шляпка истинной леди", -154 => "Очки истинной леди",
		-155 => "Сумочка истинной леди", -156 => "Кольцо истинной леди", -158 => "Спортивная мастерка", -160 => "Камзол Наполеона", -161 => "Штаны Наполеона", -162 => "Шляпа Наполеона",
		-163 => "Рапира Наполеона", -164 => "Медаль Наполеона", -166 => "Эльфийская Диадема", -167 => "Эльфийская Броня", -168 => "Эльфийские Поножи", -169 => "Эльфийский Талисман",
		-171 => "Шлем Локи", -172 => "Посох Локи", -173 => "Броня Локи", -174 => "Поножи Локи", -176 => "Шляпа для тусовок", -177 => "Трость для тусовок",
		-178 => "Пиджак для тусовок", -179 => "Брюки для тусовок", -180 => "Аксессуар для тусовок", -182 => "Шапочка медсестры", -183 => "Халат доктора", -184 => "Красный крест",
		-185 => "Шприц", -187 => "Шапочка доктора", -189 => "Зелёные штаны", -190 => "Венок из лилий", -191 => "Туника из лилий", -192 => "Штаны из незабудок",
		-193 => "Утренняя роса", -195 => "Венок из незабудок", -197 => "Красный блок", -198 => "Мегаблок", -199 => "Шляпа Волшебника", -200 => "Шляпа Волшебницы",
		-201 => "Мантия Волшебника", -202 => "Волшебная палочка", -203 => "Чехол для палочки", -204 => "Кепка патриота", -205 => "Кепка патриотки", -206 => "Рубашка патриота",
		-207 => "Юбка патриотки", -208 => "Штаны патриота", -209 => "Шарик патриота", -210 => "Триколор", -211 => "Наушники хипстера", -212 => "Майка хипстера",
		-213 => "Джинсы хипстера", -214 => "Неоновые браслеты", -215 => "Очки хипстера", -221 => "Шляпа Пирата", -222 => "Бандана Пирата", -223 => "Камзол Пирата",
		-224 => "Штаны Пирата", -225 => "Амулет Пирата", -226 => "Скрэтти", -227 => "Костюм Спартанца", -228 => "Костюм Спартанки", -229 => "Костюм белки из стали",
		-230 => "Костюм белочки из стали", -231 => "Железный Скрэт", -232 => "Железная Скрэтти", -233 => "Скрэт-Гаргул", -234 => "Скрэтти-Гаргулья", -235 => "Бандана Рэмбо",
		-236 => "Пулемётная обойма", -237 => "Штаны Рэмбо", -238 => "Пулемёт Рэмбо", -239 => "Граната Рэмбо", -240 => "Скрэт-Фокусник", -241 => "Скрэтти-Фокусница",
		-242 => "Фрак Фокусника", -243 => "Цилиндр Фокусника", -244 => "Карта Фокусника", -245 => "Цилиндр Фокусницы", -246 => "Карта Фокусницы", -247 => "Цилиндр Шляпника",
		-248 => "Сюртук Шляпника", -249 => "Штаны Шляпника", -250 => "Лента на хвост", -251 => "Рубашка Лепрекона", -252 => "Штаны Лепрекона", -253 => "Мешок с золотом",
		-254 => "Шляпа Лепрекона", -255 => "Монетка на хвост", -256 => "Клыки Вампира", -257 => "Плащ Вампира", -258 => "Красная жилетка Вампира", -259 => "Брюки Вампира",
		-260 => "Вампирский знак", -261 => "Пустынные шаровары", -262 => "Амулет из песка", -263 => "Меч Песчаного Джинна", -264 => "Причёска Странника", -265 => "Косы Странницы",
		-266 => "Наручи Странника", -267 => "Топ Странницы", -268 => "Праздничный колпак", -269 => "Школьный галстук", -270 => "Школьная рубашка", -271 => "Школьный портфель",
		-272 => "Очки для занятий", -273 => "Юбка Школьницы", -274 => "Брюки Школьника", -275 => "Маска Бэтмена", -276 => "Знак Бэтмена", -277 => "Плащ Бэтмена",
		-278 => "Броня Бэтмена", -279 => "Штаны Бэтмена", -280 => "Маска Женщины-Кошки", -281 => "Знак Женщины-Кошки", -282 => "Гарпун Женщины-Кошки", -283 => "Корсет Женщины-Кошки",
		-284 => "Штаны Женщины-Кошки", -285 => "Скрэт-Вампир", -286 => "Скрэтти-Вампир", -287 => "Скрэт-Шляпник", -288 => "Скрэтти-Шляпница", -289 => "Скрэт-Скелет",
		-290 => "Скрэтти-Скелет", -291 => "Скрэт-Странник", -292 => "Скрэтти-Странница", -293 => "Шапка Волка", -294 => "Жилет Волка", -295 => "Килт Волка",
		-296 => "Ловец снов", -297 => "Посох Волка", -298 => "Новогодняя шапка", -299 => "Новогодний тулуп", -300 => "Новогодний посох", -301 => "Сказочная шапочка",
		-302 => "Сказочная шубка", -303 => "Сказочная снежинка", -304 => "Осколок Льда", -305 => "Куртка Голубчика", -306 => "Шарф Голубчика", -307 => "Штаны Голубчика",
		-308 => "Куртка Жемчужинки", -309 => "Цветок Жемчужинки", -310 => "Юбка Жемчужинки", -311 => "Подвеска Рио", -312 => "Олимпийская кепка", -313 => "Олимпийская шапка",
		-314 => "Олимпийская куртка", -315 => "Олимпийские штаны", -316 => "Олимпийская медаль", -317 => "Олимпийский факел", -318 => "Шапка Сноубордиста", -319 => "Шарф Сноубордиста",
		-320 => "Штаны Сноубордиста", -321 => "Куртка Сноубордиста", -322 => "Сноуборд", -323 => "Золотая медаль", -324 => "Причёска Мику", -325 => "Рубашка Мику", -326 => "Юбка Мику",
		-327 => "Кольца Мику", -328 => "Причёска Лена", -329 => "Рубашка Лена", -330 => "Штаны Лена", -331 => "Кольца Лена", -332 => "Шлем Хранителя времени",
		-333 => "Корона Хранительницы времени", -334 => "Куртка Хранителя времени", -335 => "Поножи Хранителя времени", -336 => "Сфера Хранителя времени", -337 => "Чешуя Ктухлу Младшего", -338 => "Чешуя Ктухлу Младшей",
		-339 => "Щупальца Ктулху", -340 => "Пасхальная корзина", -341 => "Пасхальная звезда", -342 => "Скрэт-Робокоп", -343 => "Скрэтти-Фея", -344 => "Причёска Сейлор Мун",
		-345 => "Одежда Сейлор Мун", -346 => "Крылья Сейлор Мун", -347 => "Лунный Жезл", -348 => "Талисман Сейлор Мун", -349 => "Шляпа Такседо Маска", -350 => "Фрак Такседо Маска",
		-351 => "Брюки Такседо Маска", -352 => "Трость Такседо Маска", -353 => "Роза Такседо Маска", -354 => "Георгиевская ленточка", -355 => "Причёска Соника", -356 => "Комбинезон Соника",
		-357 => "Причёска Эми Роуз", -358 => "Платье Эми Роуз", -359 => "Корона", -360 => "Чупа-Чупс", -361 => "Летучий голландец", -362 => "Шлем Бамблби", -363 => "Броня Бамблби",
		-364 => "Доспех Бамблби", -365 => "Шлем Арси", -366 => "Броня Арси", -367 => "Доспех Арси", -368 => "Трансформ-куб", -369 => "Корона Белхотепа I", -370 => "Украшения Белхотепа I",
		-371 => "Туника Белхотепа I", -372 => "Ключ жизни", -373 => "Жезл Белхотепа I", -374 => "Диадема Клеобеллы", -375 => "Украшения Клеобеллы", -376 => "Платье Клеобеллы", -377 => "Око Ра",
		-378 => "Веер Клеобеллы", -379 => "Куртка Импульса", -380 => "Штаны Импульса", -381 => "Очки Импульса", -382 => "Причёска Импульса", -383 => "Куртка Кинетики", -384 => "Штаны Кинетики",
		-385 => "Очки Кинетики", -386 => "Причёска Кинетики", -387 => "Мужской костюм Зелёного шамана", -388 => "Женский костюм Зелёного шамана", -389 => "Мужской костюм Синего шамана", -390 => "Женский костюм Синего шамана",
		-391 => "Мужской костюм Фиолетового шамана", -392 => "Женский костюм Фиолетового шамана", -393 => "Грим Джокера", -394 => "Сюртук Джокера", -395 => "Брюки Джокера", -396 => "Маска Харли Квинн",
		-397 => "Куртка Харли Квинн", -398 => "Трико Харли Квинн", -399 => "Очки сумасшедшего алхимика", -400 => "Зловещая тыква", -401 => "Загадочный плащ", -402 => "Амулет «Череп»", -403 => "Паук",
		-404 => "Волшебная шляпа", -405 => "Облачение Вендиго", -406 => "Накидка Вендиго", -407 => "Меховые штаны", -408 => "Хвост Вендиго", -409 => "Клык Вендиго", -410 => "Маска Киви",
		-411 => "Костюм Жреца", -412 => "Ловец снов", -413 => "Повелительница грёз", -414 => "Зелёный шаман стихий", -415 => "Медаль чемпиона", -416 => "Майка Киви", -417 => "Чеширский кот",
		-418 => "Толстовка Lay's", -419 => "Оленьи рожки", -420 => "Брюки Рудольфа", -421 => "Новогодняя гирлянда", -422 => "Новогодний колокольчик", -423 => "Шапка Дедушки Мороза", -424 => "Тулуп Дедушки Мороза",
		-425 => "Мешочек с подарками", -426 => "Волшебный посох", -427 => "Диадема Снежной Феи", -428 => "Платье Снежной Феи", -429 => "Снежинка", -430 => "Крылья Снежной Феи", -431 => "Волшебная палочка Снежной Феи",
		-432 => "Кокошник", -433 => "Шубка Снегурочки", -434 => "Ледяное сердце", -435 => "Волшебный Амулет 1", -436 => "Волшебный Амулет 2", -437 => "Волшебный Амулет 3", -438 => "Волшебный Амулет 4",
		-439 => "Синий Шаман стихий", -440 => "Красный Шаман стихий", -441 => "Фиолетовый Шаман стихий", -442 => "Волшебный Амулет 5", -443 => "Костюм Честера", -444 => "Женский костюм Хани Лемон",
		-445 => "Костюм Беззубика", -446 => "Костюм Пикачу", -449 => "Костюм сладкоежки", -452 => "Костюм Flash"
	);

	/**
	 * @var array Массив конфигурации для дополнительного меню к отчётам
	 * покупок одежды. id - ключ из массива $packages (комплект одежды),
	 * установить для id значение false, если нет комплекта, а только элементы.
	 * name - если нет комплекта ('id' => false), подставить своё название вместо названия комплекта.
	 * sum_by - по какой сущности группировать пункт меню, строка или массив:
	 * "children" - по элементам комплекта, array(...) - по комплектам (указать ключи $packages)
	 * children - массив ключей из массива $packages_elements (элементы комплекта).
	 */
	private $packages_menu = array(
		array('id' => false, 'name' => "Одежда без комплектов", 'sum_by' => "children", 'children' => array(-1, -2, -3, -4, -7, -9, -8, -12, -13, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -29, -30, -31, -32, -33, -34, -35, -37, -41, -42, -43, -44, -45, -51, -52, -53, -54, -56, -59, -57, -66, -67, -68, -69, -77, -93, -106, -113, -115, -135, -145, -189, -197, -198, -226, -231, -232, -233, -234, -240, -241, -268, -285, -286, -287, -288, -289, -290, -291, -292, -304, -317, -323, -340, -341, -342, -343, -359, -360, -361, -399, -400, -401, -402, -403, -404, -410, -415, -416, -418, -435, -436, -437, -438, -442, -443)),
		array('id' => 0, 'children' => array(-82, -84, -83, -85, -86)),
		array('id' => 1, 'children' => array(-89, -90, -91, -88)),
		array('id' => 2, 'children' => array(-109, -108, -107, -110)),
		array('id' => 3, 'children' => array(-105, -104)),
		array('id' => 4, 'children' => array(-101, -99, -102, -103, -100)),
		array('id' => 5, 'children' => array(-117, -116, -119, -118)),
		array('id' => false, 'name' => "Новогодние комплекты", 'sum_by' => array(6, 7), 'children' => array(6, 7, -121, -122, -123, -124, -125, -126)),
		array('id' => 8, 'children' => array(-129, -130)),
		array('id' => 9, 'children' => array(-133, -132)),
		array('id' => 10, 'children' => array(-76, -74, -75)),
		array('id' => false, 'name' => "Комплект Полицейского", 'sum_by' => array(11, 12), 'children' => array(11, 12, -94, -95, -96, -97, -98)),
		array('id' => 13, 'children' => array(-47, -5, -46, -6)),
		array('id' => 14, 'children' => array(-50, -49, -48)),
		array('id' => 15, 'children' => array(-61, -58, -60, -55)),
		array('id' => 16, 'children' => array(-78, -80, -79, -81)),
		array('id' => 17, 'children' => array(-11, -70, -71, -72, -73)),
		array('id' => 18, 'children' => array(-64, -63, -62, -65)),
		array('id' => 19, 'children' => array(-16, -40)),
		array('id' => 20, 'children' => array(-36, -10)),
		array('id' => 21, 'children' => array(-38, -39)),
		array('id' => 22, 'children' => array(-15, -14)),
		array('id' => 23, 'children' => array(-155, -156, -152, -154, -153)),
		array('id' => 24, 'children' => array(-28, -158, -27)),
		array('id' => 25, 'children' => array(-162, -160, -161, -163, -164)),
		array('id' => 26, 'children' => array(-166, -168, -167, -169)),
		array('id' => 27, 'children' => array(-173, -172, -171, -174)),
		array('id' => 28, 'children' => array(-180, -177, -176, -179, -178)),
		array('id' => false, 'name' => "Комплект врачей", 'sum_by' => array(29, 30), 'children' => array(29, 30, -182, -183, -184, -185, -187)),
		array('id' => false, 'name' => "Комплект из лепестков", 'sum_by' => array(31, 32), 'children' => array(31, 32, -190, -191, -192, -193, -195)),
		array('id' => 33, 'children' => array(-201, -203, -202, -200)),
		array('id' => 34, 'children' => array(-199, -201, -203, -202)),
		array('id' => false, 'name' => "Костюм Патриота", 'sum_by' => array(35, 36), 'children' => array(35, 36, -204, -205, -206, -207, -208, -209, -210)),
		array('id' => false, 'name' => "Костюм Хипстера", 'sum_by' => array(37, 38), 'children' => array(37, 38, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220)),
		array('id' => 39, 'children' => array(-222, -221, -225, -224, -223)),
		array('id' => false, 'name' => "Костюмы белочек из Стали", 'sum_by' => array(40, 41), 'children' => array(40, 41)),
		array('id' => 42, 'children' => array(-236, -239, -238, -237, -235)),
		array('id' => false, 'name' => "Фокусник", 'sum_by' => array(43, 44), 'children' => array(43, 44, -242, -243, -244, -245, -246)),
		array('id' => false, 'name' => "Костюм спартанца", 'sum_by' => array(45, 46), 'children' => array(45, 46)),
		array('id' => 47, 'children' => array(-248, -249, -250, -247)),
		array('id' => 48, 'children' => array(-253, -254, -251, -252, -255)),
		array('id' => 49, 'children' => array(-260, -257, -256, -258, -259)),
		array('id' => false, 'name' => "Странники пустыни", 'sum_by' => array(50, 51), 'children' => array(50, 51, -261, -262, -263, -264, -265, -266, -267)),
		array('id' => false, 'name' => "Костюмы Школьников", 'sum_by' => array(52, 53), 'children' => array(52, 53, -269, -270, -271, -272, -273, -274)),
		array('id' => false, 'name' => "Бетмен/Женщина кошка", 'sum_by' => array(54, 55), 'children' => array(54, 55, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284)),
		array('id' => 56, 'children' => array(-293, -294, -295, -297, -296)),
		array('id' => false, 'name' => "Сказочные костюмы", 'sum_by' => array(57, 58), 'children' => array(57, 58, -298, -299, -300, -301, -302, -303)),
		array('id' => false, 'name' => "Костюм Рио", 'sum_by' => array(59, 60), 'children' => array(59, 60, -305, -306, -307, -308, -309, -310, -311)),
		array('id' => false, 'name' => "Олимпийские костюмы", 'sum_by' => array(61, 62), 'children' => array(61, 62, -312, -313, -314, -315, -316)),
		array('id' => 63, 'children' => array(-318, -320, -319, -321, -322)),
		array('id' => false, 'name' => "Мику/Лен", 'sum_by' => array(64, 65), 'children' => array(64, 65, -324, -325, -326, -327, -328, -329, -330, -331)),
		array('id' => false, 'name' => "Хранители времени", 'sum_by' => array(66, 67), 'children' => array(66, 67, -332, -333, -334, -335, -336)),
		array('id' => false, 'name' => "Костюмы Ктулху", 'sum_by' => array(68, 69), 'children' => array(68, 69, -337, -338, -339)),
		array('id' => false, 'name' => "Сейлор Мун", 'sum_by' => array(70, 71), 'children' => array(70, 71, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353)),
		array('id' => false, 'name' => "Соник/Эми Роуз", 'sum_by' => array(72, 73), 'children' => array(72, 73, -355, -356, -357, -358)),
		array('id' => 74),
		array('id' => false, 'name' => "Трансформеры", 'sum_by' => array(75, 76), 'children' => array(75, 76, -362, -363, -364, -365, -366, -367, -368)),
		array('id' => false, 'name' => "Костюмы фараонов", 'sum_by' => array(77, 78), 'children' => array(77, 78, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378)),
		array('id' => false, 'name' => "Импульс/Кинетика", 'sum_by' => array(79, 80), 'children' => array(79, 80, -379, -380, -381, -382, -383, -384, -385, -386)),
		array('id' => false, 'name' => "Зелёный шаман", 'sum_by' => array(81, 82), 'children' => array(81, 82)),
		array('id' => false, 'name' => "Синий шаман", 'sum_by' => array(83, 84), 'children' => array(83, 84)),
		array('id' => false, 'name' => "Фиолетовый шаман", 'sum_by' => array(85, 86), 'children' => array(85, 86)),
		array('id' => false, 'name' => "Хиппи", 'sum_by' => array(87, 88), 'children' => array(87, 88)),
		array('id' => 89),
		array('id' => 90),
		array('id' => 91),
		array('id' => false, 'name' => "Джокер и Квинн", 'sum_by' => array(92, 93), 'children' => array(92, 93, -393, -394, -395, -396, -397, -398)),
		array('id' => 94, 'children' => array(-405, -406, -407, -408, -409)),
		array('id' => 95, 'children' => array(-411)),
		array('id' => 96, 'children' => array(-412)),
		array('id' => 97, 'children' => array(-413)),
		array('id' => 98, 'children' => array(-414)),
		array('id' => 99, 'children' => array(-417)),
		array('id' => 100, 'children' => array(-419, -420, -421, -422)),
		array('id' => 101, 'children' => array(-423, -424, -425, -426)),
		array('id' => 102, 'children' => array(-427, -428, -429, -430, -431)),
		array('id' => 103, 'children' => array(-432, -433, -434)),
		array('id' => 104, 'children' => array(-439)),
		array('id' => 105, 'children' => array(-440)),
		array('id' => 106, 'children' => array(-441)),
		array('id' => 107, 'children' => array(-444)),
		array('id' => 108, 'children' => array(-445)),
		array('id' => 109, 'children' => array(-446)),
		array('id' => 136),
		array('id' => 137),
		array('id' => 139),
		array('id' => 140),
		array('id' => 142)
	);

	/**
	 * @var array Перки от костюмов - массив подписей к отчёту Счётчики: Использование магии.
	 * Ключи массива соответствуют полю counters.data в базе данных.
	 * При добавлении/удалении данных обязательно внести
	 * соответствующие изменения $perks_menu
	 */
	private $perks = array(18 => "Юбка", 19 => "Платье", 20 => "Подгузники", 21 => "Супермен", 22 => "Тельняшка", 23 => "Красная футболка",
		24 => "Норвежский свитер", 25 => "Красный бант", 26 => "Бальное платье с бантом", 27 => "Платье невесты", 28 => "Майка хиппи",
		29 => "Куртка Росомахи", 30 => "Смайл", 31 => "Шлем центуриона красный", 32 => "Шлем центуриона синий", 33 => "Молот Тора",
		34 => "Щит Капитана Америка", 35 => "Световой меч", 36 => "Костюм Человека паука", 37 => "Костюм Женщины кошки",
		38 => "Костюм Желелного человека", 39 => "Костюм Зомби", 40 => "Костюм полицейского", 41 => "Костюм Нинзя", 42 => "Костюм скелета",
		43 => "Тыква", 44 => "Костюм викинга", 45 => "Костюм скелета: Возрождение", 46 => "Зомби-девочка", 47 => "Костюм Самурая", 48 => "Шапка Деда Мороза",
		49 => "Шуба Деда Мороза", 50 => "Шапка Снегурочки", 51 => "Шуба Снегурочки", 52 => "Костюм Ангела", 53 => "Костюм Ангела: воскрешение",
		54 => "Костюм Архангела", 55 => "Костюм Архангела: воскрешение", 56 => "Костюм Смерти", 57 => "Сладкая смерть", 60 => "Гламурный комплект",
		61 => "Костюм истинной леди", 62 => "Костюм Гопника", 63 => "Костюм Наполеона", 64 => "Костюм Эльфа", 65 => "Костюм Локи",
		66 => "Костюм Тусовщика", 67 => "Костюм Медсестры", 68 => "Костюм из лепестков", 69 => "Костюм Лего", 70 => "Костюм Волшебника",
		71 => "Костюм Патриота", 72 => "Костюм Хипстера", 73 => "Костюм Пирата: превращение в скелет", 74 => "Костюм Пирата: быстро плавать",
		75 => "Костюм Спартанца", 76 => "Костюм белки из стали", 77 => "Костюм Рэмбо", 78 => "Костюм Скрэта Фокусника", 79 => "Костюм Фокусника",
		80 => "Костюм Шляпника", 81 => "Костюм Лепрекона", 82 => "Костюм Вампира", 83 => "Праздничный колпак", 84 => "Костюм Пустынного Странника",
		85 => "Гарпун бетмена", 86 => "Гарпун женщины кошки", 87 => "Заморозка коллекций", 88 => "Метель", 89 => "Попугай", 90 => "Олимпийская магия", 91 => "Чемпионская магия",
		92 => "Валентинка", 93 => "Чемпион", 94 => "Костюм Хроноса", 95 => "Костюм ктулху", 96 => "Пасхальная курица", 97 => "Костюм Сейлор Мун", 98 => "Костюм Такседо Маска",
		99 => "Ленточка 9 мая", 100 => "Костюм Соника", 101 => "Костюм голландца", 102 => "Магия трансформеров", 103 => "Магия фараонов", 104 => "Магия Притяжение", 105 => "Магия Толчок",
		106 => "Магия Джокера", 107 => "Магия Вендиго", 108 => "Магия Чеширского кота", 109 => "Снегопад", 110 => "Снеговик", 111 => "Етти", 112 => "Дракон",
		113 => "Хани - Липкий", 114 => "Хани - Дым", 115 => "Беззубик - Прыжок", 116 => "Беззубик - Огненный шар", 117 => "Способность Пикачу",
		118 => "Снежный барс", 119 => "Бросок", 120 => "Звериный рык", 121 => "Кинжал", 122 => "Дымовая завеса",
		123 => "Кексик", 124 => "Броненосец", 125 => "Пушечная белка"
	);

	/**
	 * @var array Массив конфигурации для дополнительного меню к отчёту Счётчики: Использование магии.
	 * id - Ключ элемента массива $perks.
	 */
	private $perks_menu = array(
		array('id' => 18), array('id' => 19), array('id' => 20), array('id' => 21), array('id' => 22),
		array('id' => 23), array('id' => 24), array('id' => 25), array('id' => 26), array('id' => 27),
		array('id' => 28), array('id' => 29), array('id' => 30), array('id' => 31), array('id' => 32),
		array('id' => 33), array('id' => 34), array('id' => 35), array('id' => 36), array('id' => 37),
		array('id' => 38), array('id' => 39), array('id' => 40), array('id' => 41), array('id' => 42),
		array('id' => 43), array('id' => 44), array('id' => 45), array('id' => 46), array('id' => 47),
		array('id' => 48), array('id' => 49), array('id' => 50), array('id' => 51), array('id' => 52),
		array('id' => 53), array('id' => 54), array('id' => 55), array('id' => 56), array('id' => 57),
		array('id' => 60), array('id' => 61), array('id' => 62), array('id' => 63), array('id' => 64),
		array('id' => 65), array('id' => 66), array('id' => 67), array('id' => 68), array('id' => 69),
		array('id' => 70), array('id' => 71), array('id' => 72), array('id' => 73), array('id' => 74),
		array('id' => 75), array('id' => 76), array('id' => 77), array('id' => 78), array('id' => 79),
		array('id' => 80), array('id' => 81), array('id' => 82), array('id' => 83), array('id' => 84),
		array('id' => 85), array('id' => 86), array('id' => 87), array('id' => 88), array('id' => 89),
		array('id' => 90), array('id' => 91), array('id' => 92), array('id' => 93), array('id' => 94),
		array('id' => 95), array('id' => 96), array('id' => 97), array('id' => 98), array('id' => 99),
		array('id' => 100), array('id' => 101), array('id' => 102), array('id' => 103), array('id' => 104),
		array('id' => 105), array('id' => 106), array('id' => 107), array('id' => 108), array('id' => 109),
		array('id' => 110), array('id' => 111), array('id' => 112), array('id' => 113), array('id' => 114),
		array('id' => 115), array('id' => 116), array('id' => 117), array('id' => 118), array('id' => 119),
		array('id' => 120), array('id' => 121), array('id' => 122), array('id' => 123), array('id' => 124),
		array('id' => 125)
	);

	private $decorations = array(0 => "Выцветшие обои", 1 => "Зелёные обои", 2 => "Обои со звёздами", 3 => "Старые полы", 4 => "Сиреневый пол", 5 => "Тёмно-синий пол", 6 => "Рисунок акварелью", 7 => "Картина с деревом", 8 => "Портрет в золотой раме", 9 => "Круглое окошко", 10 => "Большое окно", 11 => "Окно с цветами", 12 => "Оранжевая занавеска", 13 => "Зелёные занавески", 14 => "Голубая бархатная штора", 15 => "Деревянная полка", 16 => "Полка с крючками", 17 => "Позолоченная полка", 18 => "Настенные часы", 19 => "Часы \"Модерн\"", 20 => "Антикварные часы", 21 => "Обычное красное кресло", 22 => "Мягкое кресло", 23 => "Кресло Лорда", 24 => "Стандартный стол", 25 => "Журнальный столик", 26 => "Роскошный стол", 27 => "Зелёная ваза", 28 => "Стеклянная ваза", 29 => "Старинный кубок", 30 => "Горшок с тюльпанами", 31 => "Винтовое деревце", 32 => "Декоративный самшит", 33 => "Статуэтка \"Созвездие\"", 34 => "Бюст Белкистотеля", 35 => "Крылатый лев", 36 => "Обычный светильник", 37 => "Бронзовая люстра", 38 => "Королевская люстра");
	private $decorations_menu = array(
		array('id' => 0), array('id' => 1), array('id' => 2), array('id' => 3), array('id' => 4),
		array('id' => 5), array('id' => 6), array('id' => 7), array('id' => 8), array('id' => 9),
		array('id' => 10), array('id' => 11), array('id' => 12), array('id' => 13), array('id' => 14),
		array('id' => 15), array('id' => 16), array('id' => 17), array('id' => 18), array('id' => 19),
		array('id' => 20), array('id' => 21), array('id' => 22), array('id' => 23), array('id' => 24),
		array('id' => 25), array('id' => 26), array('id' => 27), array('id' => 28), array('id' => 29),
		array('id' => 30), array('id' => 31), array('id' => 32), array('id' => 33), array('id' => 34),
		array('id' => 35), array('id' => 36), array('id' => 37), array('id' => 38)
	);

	private $shaman_items = array(0 => "Балка", 2 => "Ящик", 8 => "Гиря", 9 => "Батут", 11 => "Ядро", 12 => "Синий портал", 13 => "Красный портал", 16 => "Удалятор", 18 => "Шар");
	private $shaman_buyings_talents = array(0 => "Большой орех", -1 => "Первый уровень", -2 => "Второй уровень", -3 => "Третий уровень", 1 => "Массовое безумие", -11 => "Первый уровень", -12 => "Второй уровень", -13 => "Третий уровень", 2 => "Обожание шамана", -21 => "Первый уровень", -22 => "Второй уровень", -23 => "Третий уровень", 3 => "Дух моржа", -31 => "Первый уровень", -32 => "Второй уровень", -33 => "Третий уровень", 4 => "Тонкий лёд", -41 => "Первый уровень", -42 => "Второй уровень", -43 => "Третий уровень", 5 => "Ледяной куб", -51 => "Первый уровень", -52 => "Второй уровень", -53 => "Третий уровень", 6 => "Руна", -61 => "Первый уровень", -62 => "Второй уровень", -63 => "Третий уровень", 7 => "Цепкие коготки", -71 => "Первый уровень", -72 => "Второй уровень", -73 => "Третий уровень", 8 => "Аура шустрости", -81 => "Первый уровень", -82 => "Второй уровень", -83 => "Третий уровень", 9 => "Указатель", -91 => "Первый уровень", -92 => "Второй уровень", -93 => "Третий уровень", 10 => "Отстающий", -101 => "Первый уровень", -102 => "Второй уровень", -103 => "Третий уровень", 11 => "Воодушевление", -111 => "Первый уровень", -112 => "Второй уровень", -113 => "Третий уровень", 12 => "Друг шамана", -121 => "Первый уровень", -122 => "Второй уровень", -123 => "Третий уровень", 13 => "Телепорт", -131 => "Первый уровень", -132 => "Второй уровень", -133 => "Третий уровень", 14 => "Беличье счастье", -141 => "Первый уровень", -142 => "Второй уровень", -143 => "Третий уровень", 15 => "Любимчик", -151 => "Первый уровень", -152 => "Второй уровень", -153 => "Третий уровень", 16 => "Массовое бессмертие", -161 => "Первый уровень", -162 => "Второй уровень", -163 => "Третий уровень", 17 => "Большая голова", -171 => "Первый уровень", -172 => "Второй уровень", -173 => "Третий уровень", 18 => "Тучка", -181 => "Первый уровень", -182 => "Второй уровень", -183 => "Третий уровень", 19 => "Тяжёлый шаман", -191 => "Первый уровень", -192 => "Второй уровень", -193 => "Третий уровень", 20 => "Капитуляция", -201 => "Первый уровень", -202 => "Второй уровень", -203 => "Третий уровень", 21 => "Белка — летяга", -211 => "Первый уровень", -212 => "Второй уровень", -213 => "Третий уровень", 22 => "Улучшенный телекинез", -221 => "Первый уровень", -222 => "Второй уровень", -223 => "Третий уровень", 23 => "Фронтальный телепорт", -231 => "Первый уровень", -232 => "Второй уровень", -233 => "Третий уровень", 24 => "Капитан крюк", -241 => "Первый уровень", -242 => "Второй уровень", -243 => "Третий уровень", 25 => "Шустряк", -251 => "Первый уровень", -252 => "Второй уровень", -253 => "Третий уровень", 26 => "Ленивый шаман", -261 => "Первый уровень", -262 => "Второй уровень", -263 => "Третий уровень", 27 => "Повелитель времени", -271 => "Первый уровень", -272 => "Второй уровень", -273 => "Третий уровень", 28 => "Концентрация", -281 => "Первый уровень", -282 => "Второй уровень", -283 => "Третий уровень", 29 => "Умелец", -291 => "Первый уровень", -292 => "Второй уровень", -293 => "Третий уровень", 30 => "Карманный телепорт", -301 => "Первый уровень", -302 => "Второй уровень", -303 => "Третий уровень", 31 => "Райские врата", -311 => "Первый уровень", -312 => "Второй уровень", -313 => "Третий уровень", 32 => "Сосредоточение", -321 => "Первый уровень", -322 => "Второй уровень", -323 => "Третий уровень", 33 => "Бессмертный шаман", -331 => "Первый уровень", -332 => "Второй уровень", -333 => "Третий уровень", 34 => "Динамит", -341 => "Первый уровень", -342 => "Второй уровень", -343 => "Третий уровень", 35 => "Гелий", -351 => "Первый уровень", -352 => "Второй уровень", -353 => "Третий уровень", 36 => "Тяжёлая гиря", -361 => "Первый уровень", -362 => "Второй уровень", -363 => "Третий уровень", 37 => "Помощник", -371 => "Первый уровень", -372 => "Второй уровень", -373 => "Третий уровень", 38 => "Скачок", -381 => "Первый уровень", -382 => "Второй уровень", -383 => "Третий уровень", 39 => "Билет в одну сторону", -391 => "Первый уровень", -392 => "Второй уровень", -393 => "Третий уровень", 40 => "Перевернуть балку", -401 => "Первый уровень", -402 => "Второй уровень", -403 => "Третий уровень", 41 => "Таймер", -411 => "Первый уровень", -412 => "Второй уровень", -413 => "Третий уровень", 42 => "Уничтожитель", -421 => "Первый уровень", -422 => "Второй уровень", -423 => "Третий уровень", 43 => "Духи предков", -431 => "Первый уровень", -432 => "Второй уровень", -433 => "Третий уровень", 44 => "Замедление времени", -441 => "Первый уровень", -442 => "Второй уровень", -443 => "Третий уровень", 45 => "Крановщик", -451 => "Первый уровень", -452 => "Второй уровень", -453 => "Третий уровень", 46 => "Грави-блок", -461 => "Первый уровень", -462 => "Второй уровень", -463 => "Третий уровень", 47 => "Оплот", -471 => "Первый уровень", -472 => "Второй уровень", -473 => "Третий уровень", 48 => "Режим рисования", -481 => "Первый уровень", -482 => "Второй уровень", -483 => "Третий уровень", 49 => "Мастер порталов", -491 => "Первый уровень", -492 => "Второй уровень", -493 => "Третий уровень", 50 => "Гроза", -501 => "Первый уровень", -502 => "Второй уровень", -503 => "Третий уровень", 51 => "Безопасный путь", -511 => "Первый уровень", -512 => "Второй уровень", -513 => "Третий уровень");
	private $shaman_buyings_talents_menu = array(array('id' => 0, 'children' => array(-1, -2, -3)), array('id' => 1, 'children' => array(-11, -12, -13)), array('id' => 2, 'children' => array(-21, -22, -23)), array('id' => 3, 'children' => array(-31, -32, -33)), array('id' => 4, 'children' => array(-41, -42, -43)), array('id' => 5, 'children' => array(-51, -52, -53)), array('id' => 6, 'children' => array(-61, -62, -63)), array('id' => 7, 'children' => array(-71, -72, -73)), array('id' => 8, 'children' => array(-81, -82, -83)), array('id' => 9, 'children' => array(-91, -92, -93)), array('id' => 10, 'children' => array(-101, -102, -103)), array('id' => 11, 'children' => array(-111, -112, -113)), array('id' => 12, 'children' => array(-121, -122, -123)), array('id' => 13, 'children' => array(-131, -132, -133)), array('id' => 14, 'children' => array(-141, -142, -143)), array('id' => 15, 'children' => array(-151, -152, -153)), array('id' => 16, 'children' => array(-161, -162, -163)), array('id' => 17, 'children' => array(-171, -172, -173)), array('id' => 18, 'children' => array(-181, -182, -183)), array('id' => 19, 'children' => array(-191, -192, -193)), array('id' => 20, 'children' => array(-201, -202, -203)), array('id' => 21, 'children' => array(-211, -212, -213)), array('id' => 22, 'children' => array(-221, -222, -223)), array('id' => 23, 'children' => array(-231, -232, -233)), array('id' => 24, 'children' => array(-241, -242, -243)), array('id' => 25, 'children' => array(-251, -252, -253)), array('id' => 26, 'children' => array(-261, -262, -263)), array('id' => 27, 'children' => array(-271, -272, -273)), array('id' => 28, 'children' => array(-281, -282, -283)), array('id' => 29, 'children' => array(-291, -292, -293)), array('id' => 30, 'children' => array(-301, -302, -303)), array('id' => 31, 'children' => array(-311, -312, -313)), array('id' => 32, 'children' => array(-321, -322, -323)), array('id' => 33, 'children' => array(-331, -332, -333)), array('id' => 34, 'children' => array(-341, -342, -343)), array('id' => 35, 'children' => array(-351, -352, -353)), array('id' => 36, 'children' => array(-361, -362, -363)), array('id' => 37, 'children' => array(-371, -372, -373)), array('id' => 38, 'children' => array(-381, -382, -383)), array('id' => 39, 'children' => array(-391, -392, -393)), array('id' => 40, 'children' => array(-401, -402, -403)), array('id' => 41, 'children' => array(-411, -412, -413)), array('id' => 42, 'children' => array(-421, -422, -423)), array('id' => 43, 'children' => array(-431, -432, -433)), array('id' => 44, 'children' => array(-441, -442, -443)), array('id' => 45, 'children' => array(-451, -452, -453)), array('id' => 46, 'children' => array(-461, -462, -463)), array('id' => 47, 'children' => array(-471, -472, -473)), array('id' => 48, 'children' => array(-481, -482, -483)), array('id' => 49, 'children' => array(-491, -492, -493)), array('id' => 50, 'children' => array(-501, -502, -503)), array('id' => 51, 'children' => array(-511, -512, -513)));
	private $shaman_talents = array(0 => "Большой орех", 1 => "Массовое безумие", 2 => "Обожание шамана", 3 => "Дух моржа", 4 => "Тонкий лёд", 5 => "Ледяной куб", 6 => "Руна", 7 => "Цепкие коготки", 8 => "Аура шустрости", 9 => "Указатель", 10 => "Отстающий", 11 => "Воодушевление", 12 => "Друг шамана", 13 => "Телепорт", 14 => "Беличье счастье", 15 => "Любимчик", 16 => "Массовое бессмертие", 17 => "Большая голова", 18 => "Тучка", 19 => "Тяжёлый шаман", 20 => "Капитуляция", 21 => "Белка — летяга", 22 => "Улучшенный телекинез", 23 => "Фронтальный телепорт", 24 => "Капитан крюк", 25 => "Шустряк", 26 => "Ленивый шаман", 27 => "Повелитель времени", 28 => "Концентрация", 29 => "Умелец", 30 => "Карманный телепорт", 31 => "Райские врата", 32 => "Сосредоточение", 33 => "Бессмертный шаман", 34 => "Динамит", 35 => "Гелий", 36 => "Тяжёлая гиря", 37 => "Помощник", 38 => "Скачок", 39 => "Билет в одну сторону", 40 => "Перевернуть балку", 41 => "Таймер", 42 => "Уничтожитель", 43 => "Духи предков", 44 => "Замедление времени", 45 => "Крановщик", 46 => "Грави-блок", 47 => "Оплот", 48 => "Режим рисования", 49 => "Мастер порталов", 50 => "Гроза", 51 => "Безопасный путь");
	private $shaman_talents_menu = array(array('id' => 0), array('id' => 1), array('id' => 2), array('id' => 3), array('id' => 4), array('id' => 5), array('id' => 6), array('id' => 7), array('id' => 8), array('id' => 9), array('id' => 10), array('id' => 11), array('id' => 12), array('id' => 13), array('id' => 14), array('id' => 15), array('id' => 16), array('id' => 17), array('id' => 18), array('id' => 19), array('id' => 20), array('id' => 21), array('id' => 22), array('id' => 23), array('id' => 24), array('id' => 25), array('id' => 26), array('id' => 27), array('id' => 28), array('id' => 29), array('id' => 30), array('id' => 31), array('id' => 32), array('id' => 33), array('id' => 34), array('id' => 35), array('id' => 36), array('id' => 37), array('id' => 38), array('id' => 39), array('id' => 40), array('id' => 41), array('id' => 42), array('id' => 43), array('id' => 44), array('id' => 45), array('id' => 46), array('id' => 47), array('id' => 48), array('id' => 49), array('id' => 50), array('id' => 51));

	private $olympiad_maps = array(0 => "Кручёные белки", 1 => "Грави-белки", 2 => "Прыгай", 3 => "Турбобелки", 4 => "Альпинизм", 5 => "Самолётики", 6 => "Ниндзи", 7 => "Прыжок с парашютом", 8 => "Равновесие", 9 => "Пузыри", 2114030 => "2114030", 2114039 => "2114039", 2114898 => "2114898", 2114040 => "2114040", 2114897 => "2114897", 2114042 => "2114042", 2114041 => "2114041", 2114031 => "2114031", 2114900 => "2114900", 2114901 => "2114901", 2114054 => "2114054", 2114908 => "2114908", 2114053 => "2114053", 2114905 => "2114905", 2114037 => "2114037", 2114044 => "2114044", 2114910 => "2114910", 2114909 => "2114909", 2114032 => "2114032", 2114043 => "2114043", 2114033 => "2114033", 2114913 => "2114913", 2114912 => "2114912", 2114045 => "2114045", 2114046 => "2114046", 2114055 => "2114055", 2114917 => "2114917", 2114918 => "2114918", 2114056 => "2114056", 2114038 => "2114038", 2114920 => "2114920", 2114050 => "2114050", 2114049 => "2114049", 2114922 => "2114922", 2114035 => "2114035", 2114926 => "2114926", 2114929 => "2114929", 2114036 => "2114036", 2114052 => "2114052", 2114051 => "2114051", 2114057 => "2114057", 2114034 => "2114034", 2114048 => "2114048", 2114047 => "2114047", 2114930 => "2114930", 2114931 => "2114931");
	private $olympiad_maps_menu = array(
		array('id' => 0, 'children' => array(2114030, 2114039, 2114898, 2114040, 2114897)),
		array('id' => 1, 'children' => array(2114042, 2114041, 2114031, 2114900, 2114901)),
		array('id' => 2, 'children' => array(2114054, 2114908, 2114053, 2114905, 2114037)),
		array('id' => 3, 'children' => array(2114044, 2114910, 2114909, 2114032, 2114043)),
		array('id' => 4, 'children' => array(2114033, 2114913, 2114912, 2114045, 2114046)),
		array('id' => 5, 'children' => array(2114055, 2114917, 2114918, 2114056, 2114038)),
		array('id' => 6, 'children' => array(2114920, 2114050, 2114049, 2114922, 2114035)),
		array('id' => 7, 'children' => array(2114926, 2114929, 2114036, 2114052, 2114051)),
		array('id' => 8, 'children' => array(2114057)),
		array('id' => 9, 'children' => array(2114034, 2114048, 2114047, 2114930, 2114931))
	);

	private $collections = array(
		0 => "Золотая бабочка", 1 => "Золотое перо", 2 => "Золотой след", 3 => "Золотой череп", 4 => "Золотой паук", 5 => "Золотой гриб",
		6 => "Золотая раковина", 7 => "Золотая рыба", 8 => "Золотая сущность", 9 => "Золотая инфузория", 10 => "Нокия", 11 => "Золотой цеппелин",
		12 => "Золотой скафандр", 13 => "Красный блок", 14 => "Синий блок", 15 => "Зелёный блок", 16 => "Желтый блок", 17 => "Фиолетовый блок",
		18 => "Золотой саркофаг", 19 => "Золотая лампа джинна", 20 => "Золотой нож-бабочка", 21 => "Золотая ядерная боеголовка", 22 => "Золотой робот", 23 => "Золотой танк",
		24 => "Золотая гроздь", 25 => "Золотой компас", 26 => "Золотая консервная банка", 27 => "Золотой баллон кислорода", 28 => "Золотой верблюд", 29 => "Золотой кактус",
		30 => "Золотой звездолёт", 31 => "Золотой инопланетянин", 32 => "Золотой штурвал", 33 => "Золотой морской котик"
	);
	private $trophy = array(
		0 => "Скрэт", 2 => "Скрэтти", 3 => "Железный Скрэт", 4 => "Железная Скрэтти", 5 => "Железный дракон Скрэт", 6 => "Железный дракон Скрэтти",
		7 => "Скрэт фокусник", 8 => "Скрэтти фокуснца", 9 => "Скрэт вампир", 10 => "Скрэтти вампирша", 11 => "Скрэт шляпник", 12 => "Скрэтти шляпница", 13 => "Скрэт скелет",
		14 => "Скрэтти скелет", 15 => "Скрэт странник", 16 => "Скрэтти странница", 17 => "Скрэт робокоп", 18 => "Скрэтти фея"
	);

	private $resource_reasons = array(
		0 => "Автодобавление по таймауту", 1 => "Награда", 2 => "Бонус", 3 => "Покупка", 4 => "Создание клана", 5 => "Вложение в клан",
		6 => "Сбор уникальной коллекци", 7 => "CURRENT", 8 => "Награда за перк смерти", 9 => "Баланс игрока по умолчанию", 10 => "Компенсация за дракона", 11 => "Подбор элемента",
		12 => "Обмен элементов", 13 => "FLAG_QUEST", 14 => "Подарок", 15 => "Награда за перк хипстера", 16 => "Награда за приглашение", 17 => "Мозайка",
		18 => "Добавление карты редактором", 19 => "Награда за карту", 20 => "Скилл медсестры", 21 => "Выполнение квеста", 22 => "Награда кролику-убийце", 23 => "Повышение уровня",
		24 => "Пополнение баланса", 25 => "Бонус за возвращение друга", 26 => "Вход в комнату", 27 => "ROUND_REFUNDING", 28 => "ROUND_STARTED", 29 => "Компенсация шамана",
		30 => "Награда шаману-убийце", 31 => "Награда шаману за спасение белок", 32 => "Использование перка", 33 => "Траты на покупки", 34 => "Завершение обучения", 35 => "Награда за прохождение раунда",
		36 => "Возврат энергии", 37 => "Репост новости", 38 => "Золото лепрекона", 39 => "Коробка с подарками", 40 => "Шкатулка новичка", 41 => "Первым вошел в игру",
		42 => "Награда за виральный квест", 43 => "Магия шамана \"Капитуляция\"", 44 => "Разбит сундук приключений", 45 => "Хэллоуин: Рулетка", 46 => "Олимпийская награда за победу", 47 => "Новый год 2015",
		48 => "Награда за ежедневный вход", 49 => "Оффер", 50 => "Горшок лепрекона", 51 => "Акции", 52 => "Оффер Читос", 53 => "Режим Зомби"
	);

	private $notifications = array(
		1	=> "Восстановление энергии",
		2	=> "Карта принята",
		3	=> "Карта не принята",
		6	=> "Принят в клан",
		7	=> "Заявка в клан отклонена",
		8	=> "Приглашение вступить в клан",
		9	=> "Исключение из клана",
		10	=> "Роспуск клана",
		11	=> "Изменение новости клана",
		12	=> "Блокировка клана",
		13	=> "Повышение уровня",
		14	=> "Награда за друга 7 уровня",
		15	=> "Обмен коллекциями",
		28	=> "Уведомление другу (возврат друга в игру)",
		29	=> "Доступен бонус Золота Лепрекона",
		30	=> "Возвращение вышедшего новичка",
		255	=> "Для неактивных игроков"
	);

	private $tutorial_steps = array("1 - Начало уровня", "9 - Уровень завершён", "2 - Обрыв", "3 - Лифт", "4 - Коллекция", "5 - Камень", "6- Орех и порталы", "7 - Лифт и батут", "8 - Прыжок к дуплу");
	private $training = array(2 => "Первые раунды на песочнице: начало", 3 => "Первые раунды на локации: начало", 4 => "Обучение в магазине: начало", 5 => "Обучение в профиле игрока: начало", 6 => "Обучение в гардеробе: начало", 7 => "Обучение в коллекциях: начало", 8 => "Обучение в скиллах шамана: начало", -2 => "Первые раунды на песочнице: конец", -3 => "Первые раунды на локации: конец", -4 => "Обучение в магазине: конец", -5 => "Обучение в профиле игрока: конец", -6 => "Обучение в гардеробе: конец", -7 => "Обучение в коллекциях: конец", -8 => "Обучение в скиллах шамана: конец");
	private $gifts = array(0 => "Энергия", 1 => "Мана", 2 => "Ящик", 3 => "Балка", 4 => "Шарик", 5 => "Трамплин", 6 => "Монеты");
	private $viral_steps = array(0 => "Установить приложение", 1 => "Вступить в сообщество", 2 => "Добавить приложение в левое меню", 3 => "Пригласить друга", 4 => "Рассказать друзьям", 5 => "Квест завершен");

	/**
	 * @var array Офферы-бандлы. Ключ массива - идентификатор оффера в базе,
	 * значение - название оффера
	 */
	private $bundles = array(100 => "Деревянный", 101 => "Серебряный", 102 => "Золотой", 103 => "Новичка дорогой", 104 => "Новичка дешёвый", 105 => "Легендарный", 106 => "Волшебника", 107 => "Коллекций", 108 => "Ветерана", 109 => "Карьериста");

	private $prices_old = array(5 => 0.1);
	private $prices = array(5 => 0.033);
	private $revenue_old = array(5 => 0.07);
	private $revenue = array(5 => 0.0231);

	/**
	 * @var string Обозначение валюты (рубли) для финансовых отчетов,
	 * выводится на подписях к кривым и в других местах,
	 * где требуется указание реальной валюты.
	 */
	private $currency = " $";

	static public function init($service_id)
	{
		self::$service_id = $service_id;
	}

	/**
	 * Возвращает список запросов к базе днных, известных объектам
	 * данного класса. Ключ массива - имя метода объекта
	 * соединения с базой данных, в который должны передаваться значения
	 * для подставновки в запрос. Реализует интерфейс DatabaseInterface.
	 * Пример вызова запроса:
	 * <code>
	 * static public function get_queries()
	 * {
	 *	return array(
	 *		'some_query' => "SELECT * FROM `table` WHERE `date` = @s",
	 *		'another_query' => "SELECT * FROM `table2` WHERE `date` = @s"
	 *	);
	 * }
	 *
	 * public function someMethod()
	 * {
	 *	$date = date("Y-m-d");
	 *	$this->DB->some_query($date);
	 * }
	 * </code>
	 *
	 * @see DatabaseInterface::get_queries()
	 *
	 * @return array Список запросов к базе данных
	 */
	static public function get_queries()
	{
		return array(
			'payments_all'			=> "SELECT DATE(`time`) as `date`, SUM(`balance`) as `sum`, COUNT(*) as `count` FROM `payments` WHERE `time` >= @s GROUP BY `date`",
			'payments_candles'		=> "SELECT DATE(`time`) as `date`, HOUR(`time`) as `hour`, SUM(`balance`) as `sum` FROM `payments` WHERE `time` >= DATE_SUB(@s, INTERVAL 1 DAY) GROUP BY `date`, `hour`",
			'payments_specific'		=> "SELECT DATE(`time`) as `date`, `offer`, `balance`, SUM(`balance`) as `sum`, COUNT(*) as `count` FROM `payments` WHERE `time` >= @s GROUP BY `date`, `offer`, `balance`",
			'payments_offers'		=> "SELECT DATE(`time`) as `date`, `offer` as `data`, SUM(`balance`) as `sum`, COUNT(*) as `count` FROM `payments` WHERE `offer` > 0 AND `time` >= @s GROUP BY `date`, `offer`",
			'payments_hourly'		=> "SELECT DATE(`time`) as `date`, HOUR(`time`) as `data`, SUM(`balance`) as `sum`, COUNT(*) as `count` FROM `payments` WHERE `time` >= @s GROUP BY `date`, HOUR(`time`)",
			'payments_net'			=> "SELECT DATE(`time`) as `date`, `type` as `data`, SUM(`balance`) as `sum`, COUNT(*) as `count` FROM `payments` WHERE `time` >= @s GROUP BY `date`, `data`",
			'payments_age'			=> "SELECT DATE(pm.`time`) as `date`, IF(pl.`bday` = 0, -1, TIMESTAMPDIFF(YEAR, DATE_ADD(FROM_UNIXTIME(0), INTERVAL pl.`bday` SECOND), pm.`time`)) as `data`, SUM(pm.`balance`) as `sum`, COUNT(*) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s GROUP BY `date`, `data`",
			'payments_sex'			=> "SELECT DATE(pm.`time`) as `date`, pl.`sex` as `data`, SUM(pm.`balance`) as `sum`, COUNT(*) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s GROUP BY `date`, `data`",
			'payments_tag'			=> "SELECT DATE(pm.`time`) as `date`, pl.`tag` as `data`, SUM(pm.`balance`) as `sum`, COUNT(*) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s AND pl.`register_time` >= '2015-01-14' GROUP BY `date`, `data`",
			'payments_first'		=> "SELECT DATE(p2.`time`) as `date`, SUM(p2.`balance`) as `sum`, COUNT(*) as `count`, ROUND(AVG(p2.`balance`), 2) as `average` FROM (SELECT `type`, `net_id`, MIN(`time`) as `time` FROM `payments` WHERE (`net_id`, `type`) IN(SELECT `net_id`, `type` FROM `payments` FORCE INDEX(`time`) WHERE `time` >= @s) GROUP BY `type`, `net_id`) p1 INNER JOIN `payments` p2 FORCE INDEX (`time`) ON p2.`net_id` = p1.`net_id` AND p2.`type` = p1.`type` AND p2.`time` = p1.`time` WHERE p2.`time` >= @s GROUP BY `date`",
			'payments_repeated'		=> "SELECT DATE(p2.`time`) as `date`, SUM(p2.`balance`) as `sum`, COUNT(*) as `count`, ROUND(AVG(p2.`balance`), 2) as `average` FROM (SELECT `type`, `net_id`, MIN(`time`) as `time` FROM `payments` WHERE (`net_id`, `type`) IN(SELECT `net_id`, `type` FROM `payments` FORCE INDEX(`time`) WHERE `time` >= @s) GROUP BY `type`, `net_id`) p1 INNER JOIN `payments` p2 FORCE INDEX (`type`) ON p2.`net_id` = p1.`net_id` AND p2.`type` = p1.`type` AND p2.`time` != p1.`time` WHERE p2.`time` >= @s GROUP BY `date`",
			'payments_day_first'		=> "SELECT pl.`register_time` as `date`, pm.`net_id`, DATEDIFF(pm.`time`, pl.`register_time`) as `days`, COUNT(*) as `count` FROM (SELECT `type`, `net_id`, MIN(`time`) as `time` FROM `payments` GROUP BY `type`, `net_id`) pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pl.`register_time` > '2000-01-01' GROUP BY `date`, `days` ORDER BY `date` ASC",
			'payments_day_next'		=> "SELECT DATE(`time`) as `date`, `net_id`, `type`, `balance` as `value`, `bonus` FROM `payments` ORDER BY `time` ASC",
			'payments_bonus'		=> "SELECT DATE(`time`) as `date`, SUM(`balance`) as `sum`, COUNT(*) as `count` FROM `payments` WHERE `bonus` = 100 AND `time` >= @s GROUP BY `date`",
			'payments_newbies'		=> "SELECT DATE(pm.`time`) as `date`, SUM(pm.`balance`) as `sum`, COUNT(*) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pl.`register_time` = DATE(pm.`time`) AND pm.`time` >= @s GROUP BY `date`",

			'finance_arpu_net'		=> "SELECT DATE(`time`) as `date`, `type` as `data`, `type` as `net`, SUM(`balance`) as `sum`, COUNT(*) as `count` FROM `payments` WHERE `time` >= @s GROUP BY `date`, `data`",
			'finance_arpu_age'		=> "SELECT DATE(pm.`time`) as `date`, IF(pl.`bday` = 0, -1, TIMESTAMPDIFF(YEAR, DATE_ADD(FROM_UNIXTIME(0), INTERVAL pl.`bday` SECOND), pm.`time`)) as `data`, pm.`type` as `net`, SUM(pm.`balance`) as `sum`, COUNT(*) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s GROUP BY `date`, `data`, `net`",
			'finance_arpu_sex'		=> "SELECT DATE(pm.`time`) as `date`, pl.`sex` as `data`, pm.`type` as `net`, SUM(pm.`balance`) as `sum`, COUNT(*) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s GROUP BY `date`, `data`, `net`",
			'finance_arpu_tag'		=> "SELECT DATE(pm.`time`) as `date`, pl.`tag` as `data`, pm.`type` as `net`, SUM(pm.`balance`) as `sum`, COUNT(*) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s AND pl.`register_time` >= '2014-10-24' GROUP BY `date`, `data`, `net`",

			'finance_arppu_net'		=> "SELECT DATE(`time`) as `date`, `type` as `data`, `type` as `net`, SUM(`balance`) as `sum`, COUNT(DISTINCT `net_id`) as `count` FROM `payments` WHERE `time` >= @s GROUP BY `date`, `data`",
			'finance_arppu_age'		=> "SELECT DATE(pm.`time`) as `date`, IF(pl.`bday` = 0, -1, TIMESTAMPDIFF(YEAR, DATE_ADD(FROM_UNIXTIME(0), INTERVAL pl.`bday` SECOND), pm.`time`)) as `data`, pm.`type` as `net`, SUM(pm.`balance`) as `sum`, COUNT(DISTINCT pm.`net_id`) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s GROUP BY `date`, `data`, `net`",
			'finance_arppu_sex'		=> "SELECT DATE(pm.`time`) as `date`, pl.`sex` as `data`, pm.`type` as `net`, SUM(pm.`balance`) as `sum`, COUNT(DISTINCT pm.`net_id`) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s GROUP BY `date`, `data`, `net`",
			'finance_arppu_tag'		=> "SELECT DATE(pm.`time`) as `date`, pl.`tag` as `data`, pm.`type` as `net`, SUM(pm.`balance`) as `sum`, COUNT(DISTINCT pm.`net_id`) as `count` FROM `payments` pm INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= @s AND pl.`register_time` >= '2014-10-24' GROUP BY `date`, `data`, `net`",

			'ltv_period_paying'		=> "SELECT pl.`inner_id`, pl.`register_time`, pl.`type`, pl.`sex`, pl.`bday`, pm.`balance`, pm.`time` FROM `players` AS pl INNER JOIN `payments` AS pm ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` AND pm.`time` <= GREATEST(@s, DATE_ADD((SELECT MIN(`register_time`) FROM `players`), INTERVAL 30 DAY)) WHERE DATEDIFF(GREATEST(@s, DATE_ADD((SELECT MIN(`register_time`) FROM `players`), INTERVAL 30 DAY)), pl.`register_time`) <= 30 AND DATEDIFF(GREATEST(@s, DATE_ADD((SELECT MIN(`register_time`) FROM `players`), INTERVAL 30 DAY)), pl.`register_time`) >= 0",
			'ltv_period_all'		=> "SELECT pl.`inner_id`, pl.`register_time`, pl.`type`, pl.`sex`, pl.`bday`, IFNULL(pm.`balance`, 0) AS `balance`, pm.`time` FROM `players` AS pl LEFT JOIN `payments` AS pm ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` AND pm.`time` <= GREATEST(@s, DATE_ADD((SELECT MIN(`register_time`) FROM `players`), INTERVAL 30 DAY)) WHERE DATEDIFF(GREATEST(@s, DATE_ADD((SELECT MIN(`register_time`) FROM `players`), INTERVAL 30 DAY)), pl.`register_time`) <= 30 AND DATEDIFF(GREATEST(@s, DATE_ADD((SELECT MIN(`register_time`) FROM `players`), INTERVAL 30 DAY)), pl.`register_time`) >= 0",

			'buyings_coins'			=> "SELECT `time` as `date`, `good_id` as `data`, SUM(`coins`) as `value`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `coins` > 0 GROUP BY `date`, `good_id`",
			'buyings_nuts'			=> "SELECT `time` as `date`, `good_id` as `data`, SUM(`nuts`) as `value`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `nuts` > 0 GROUP BY `date`, `good_id`",
			'buyings_maps'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 70 AND `date` >= @s",
			'buyings_packages'		=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `coins`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 26 GROUP BY `date`, `data`",
			'buyings_packages_day'		=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `coins`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 57 GROUP BY `date`, `data`",
			'buyings_packages_week'		=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `coins`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 58 GROUP BY `date`, `data`",
			'buyings_packages_month'	=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `coins`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 59 GROUP BY `date`, `data`",
			'buyings_clothes'		=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `coins`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 1 GROUP BY `date`, `data`",
			'buyings_clothes_net'		=> "SELECT b.`time` as `date`, p.`type` as `data`, SUM(b.`coins`) as `value` FROM `buyings` b INNER JOIN `players` p ON p.`inner_id` = b.`owner_id` WHERE b.`good_id` IN(1,26) AND b.`time` >= @s AND b.`coins` > 0 GROUP BY `date`, `type`",
			'buyings_clothes_prolongation'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 357 AND `date` >= @s",
			'buyings_shaman_nuts'		=> "SELECT `time` as `date`, `data`, SUM(`nuts`) as `nuts`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 14 GROUP BY `date`, `data`",
			'buyings_shaman_coins'		=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `coins`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 15 GROUP BY `date`, `data`",
			'buyings_clan_location'		=> "SELECT `time` as `date`, `target_id` as `location`, `data` as `mode`, COUNT(*) as `value` FROM `buyings` WHERE `time` >= @s AND `good_id` = 17 GROUP BY `date`, `target_id`, `data`",
			'buyings_subscription'		=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `sum`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 16 AND `coins` > 0 GROUP BY `date`, `data`",
			'buyings_subscription_power'	=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `sum`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 60 AND `coins` > 0 GROUP BY `date`, `data`",
			'buyings_goldencup'		=> "SELECT `date`, `type` AS `data`, `value` FROM `counters_daily` WHERE `type` IN(330, 331, 332, 333) AND `date` >= @s",
			'buyings_vip'			=> "SELECT `date`, (`data` MOD 10) as `type`, (`data` DIV 10) as `paid`, `value` FROM `counters_daily` WHERE `type` = 206 AND `date` >= @s",
			'buyings_decoration'		=> "SELECT `time` as `date`, `data`, IF(`coins` > 0, 1, 0) as `currency`, SUM(`coins`) as `coins`, SUM(`nuts`) as `nuts`, COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 47 GROUP BY `date`, `data`, `currency`",
			'buyings_quests_map'		=> "SELECT `time` as `date`, `data`, SUM(`coins`) as `value` , COUNT(*) as `count` FROM `buyings` WHERE `time` >= @s AND `good_id` = 51 AND `coins` > 0 GROUP BY `date`, `data`",
			'buyings_rpg_talents'		=> "SELECT `date`, `data`, IF(`type` = 222, 1, 0) as `is_sum`, `value` FROM `counters_daily` WHERE `type` IN(222, 223) AND `date` >= @s",

			'buyings_clan_totems'		=> "SELECT DATE(FROM_UNIXTIME(`time`)) as `date`, 0 as `data`, COUNT(*) as `value` FROM `clan_transactions` WHERE `type` = 5 AND `time` >= UNIX_TIMESTAMP(@s) GROUP BY `date`",
			'buyings_clan_coins'		=> "SELECT DATE(FROM_UNIXTIME(`time`)) as `date`, 0 as `data`, SUM(`coins`) as `value` FROM `clan_transactions` WHERE `coins` > 0 AND `time` >= UNIX_TIMESTAMP(@s) GROUP BY `date`",
			'buyings_clan_nuts'		=> "SELECT DATE(FROM_UNIXTIME(`time`)) as `date`, 0 as `data`, SUM(`nuts`) as `value` FROM `clan_transactions` WHERE `nuts` > 0 AND `time` >= UNIX_TIMESTAMP(@s) GROUP BY `date`",

			'counters_dau_all'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 316 AND `date` >= @s",
			'counters_dau_vip'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 314 AND `date` >= @s",
			'counters_dau_paying'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 315 AND `date` >= @s",
			'counters_dau_net'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 317 AND `date` >= @s",
			'counters_dau_age'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 318 AND `date` >= @s",
			'counters_dau_sex'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 319 AND `date` >= @s",
			'counters_dau_level'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 324 AND `date` >= @s",
			'counters_dau_locations'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 139 AND `date` >= @s",
			'counters_dau_locations_hard'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 166 AND `date` >= @s",
			'counters_dau_days'		=> "SELECT `date`, DATEDIFF(`date`, '1970-01-01') - `data` as `data`, `value` FROM `counters_daily` WHERE `type` = 56 AND `date` >= @s",
			'counters_dau_referrer'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 321 AND `date` >= @s",
			'counters_dau_source'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 367 AND `date` >= @s",
			'counters_dau_net_age'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 320 AND `date` >= @s",
			'counters_dau_tag'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 322 AND `date` >= @s AND `date` >= '2014-10-25'",

			'counters_wau_all'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 19 AND `date` >= @s",
			'counters_wau_net'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 104 AND `date` >= @s",
			'counters_wau_age'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 105 AND `date` >= @s",
			'counters_wau_sex'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 106 AND `date` >= @s",

			'counters_mau_all'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 20 AND `date` >= @s",
			'counters_mau_net'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 52 AND `date` >= @s",
			'counters_mau_age'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 53 AND `date` >= @s",
			'counters_mau_sex'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 55 AND `date` >= @s",
			'counters_mau_tag'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 000 AND `date` >= @s",

			'counters_dau_net_sex'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 323 AND `date` >= @s",
			'counters_wau_net_sex'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 270 AND `date` >= @s",
			'counters_mau_net_sex'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 271 AND `date` >= @s",

			'counters_online_all'		=> "SELECT DATE(`time`) as `date`, MAX(`value`) as `max`, MIN(`value`) as `min` FROM `counters` WHERE `type` = 0 AND `time` >= @s GROUP BY `date`",
			'counters_online_net'		=> "SELECT DATE(`time`) as `date`, `data`, MAX(`value`) as `value` FROM `counters` WHERE `type` = 1 AND `time` >= @s GROUP BY `date`, `data`",
			'counters_online_age'		=> "SELECT DATE(`time`) as `date`, `data`, MAX(`value`) as `value` FROM `counters` WHERE `type` = 2 AND `time` >= @s GROUP BY `date`, `data`",
			'counters_online_sex'		=> "SELECT DATE(`time`) as `date`, `data`, MAX(`value`) as `value` FROM `counters` WHERE `type` = 115 AND `time` >= @s GROUP BY `date`, `data`",
			'counters_online_location'	=> "SELECT DATE(`time`) as `date`, `data`, MAX(`value`) as `max`, MIN(`value`) as `min` FROM `counters` WHERE `type` = 41 AND `time` >= @s GROUP BY `date`, `data`",

			'counters_coins'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 31 AND `date` >= @s",
			'counters_nuts'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 40 AND `date` >= @s",
			'counters_jettons'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 164 AND `date` >= @s",
			'counters_average'		=> "SELECT `date`, `data`, ROUND(`value` / 100, 2) as `value` FROM `counters_daily` WHERE `type` = 100 AND `date` >= @s",
			'counters_average_paying'	=> "SELECT `date`, `data`, ROUND(`value` / 100, 2) as `value` FROM `counters_daily` WHERE `type` = 325 AND `date` >= @s",
			'counters_award_flow'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 272 AND `date` >= @s",

			'counters_campaign_mana'	=> "SELECT `date`, IF(`type` = 204, 2, `data`) as `data`, `value` FROM `counters_daily` WHERE `type` IN(204, 205) AND `date` >= @s",
			'counters_campaign_show'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 210 AND `date` >= @s",
			'counters_campaign_used'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 211 AND `date` >= @s",

			'counters_bank'			=> "SELECT `date`, IF(`type` = 37, 1, 0) as `data`, `value` FROM `counters_daily` WHERE `type` IN(36, 37) AND `date` >= @s",
			'counters_shop'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 212 AND `date` >= @s",
			'counters_smile_click'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 196 AND `date` >= @s",
			'counters_smile_use'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 197 AND `date` >= @s",

			'counters_return'		=> "SELECT `date`, (`type` - 101) as `data`, `value` FROM `counters_daily` WHERE `type` IN(101, 102, 103) AND `date` >= @s",
			'counters_friends_total'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 215 AND `date` >= @s",
			'counters_friends_invite'	=> "SELECT `date`, IF(`type` = 49, 0, 1) as `data`, SUM(`value`) as `value` FROM `counters_daily` WHERE `type` IN(49,50) AND `date` >= @s GROUP BY `date`, `type`",
			'counters_friends_click'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 216 AND `date` >= @s",

			'counters_reposts_news'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 138 AND `date` >= @s",
			'counters_reposts_achievement'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 145 AND `date` >= @s",
			'counters_reposts_player_level'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 244 AND `date` >= @s",
			'counters_reposts_shaman_level'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 245 AND `date` >= @s",
			'counters_reposts_show'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 273 AND `date` >= @s",
			'counters_reposts_make'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 274 AND `date` >= @s",
			'counters_reposts_follow'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 275 AND `date` >= @s",

			'counters_rpg_magic'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 221 AND `date` >= @s",
			'counters_rpg_levels'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 225 AND `date` >= @s",
			'counters_rpg_branches'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 219 AND `date` >= @s",
			'counters_rpg_feathers'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 224 AND `date` >= @s",
			'counters_rpg_experience'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 226 AND `date` >= @s",

			'counters_magic'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 12 AND `data` < 10 AND `date` >= @s",
			'counters_perk'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 12 AND `data` >= 18 AND `date` >= @s",
			'counters_perk_mana'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 282 AND `data` >= 18 AND `date` >= @s",
			'counters_steal'		=> "SELECT `date`, SUM(`data` * `value`) as `sum`, SUM(`value`) as `count` FROM `counters_daily` WHERE `type` = 126 AND `date` >= @s GROUP BY `date`",
			'counters_leprechaun'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 143 AND `date` >= @s",

			'counters_shaman_select'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 13 AND `data` < 4 AND `date` >= @s",
			'counters_shaman_buy'		=> "SELECT `time` as `date`, IF(`coins` > 0, 1, 0) as `currency`, COUNT(*) as `value` FROM `buyings` WHERE `good_id` = 6 AND `time` >= @s GROUP BY `date`, `currency`",
			'counters_shaman'		=> "SELECT `date`, IF(`type` = 5, 1, 0) as `data`, `value` FROM `counters_daily` WHERE `type` IN(4,5) AND `date` >= @s",
			'counters_rabbit'		=> "SELECT `date`, IF(`type` = 27, 1, 0) as `data`, `value` FROM `counters_daily` WHERE `type` IN(26,27) AND `date` >= @s",
			'counters_dragon'		=> "SELECT `date`, IF(`type` = 64, 1, 0) as `data`, `value` FROM `counters_daily` WHERE `type` IN(64,65) AND `date` >= @s",

			'counters_active_time'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 187 AND `date` >= @s",
			'counters_active_count'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 186 AND `date` >= @s",
			'counters_active_paying_time'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 189 AND `date` >= @s",
			'counters_active_paying_count'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 188 AND `date` >= @s",

			'counters_sessions_time_all'	=> "SELECT `date`, CASE WHEN `type` = 107 THEN 0 WHEN `type` = 298 THEN 1 WHEN `type` = 299 THEN 2 ELSE 0 END as `data`, `value` FROM `counters_daily` WHERE `type` IN(107,298,299) AND `date` >= @s",
			'counters_sessions_time_net'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 108 AND `date` >= @s",
			'counters_sessions_time_age'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 109 AND `date` >= @s",
			'counters_sessions_time_sex'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 110 AND `date` >= @s",
			'counters_sessions_time_level'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 133 AND `date` >= @s",
			'counters_sessions_count_all'	=> "SELECT `date`, CASE WHEN `type` = 111 THEN 0 WHEN `type` = 300 THEN 1 WHEN `type` = 301 THEN 2 ELSE 0 END as `data`, `value` FROM `counters_daily` WHERE `type` IN(111,300,301) AND `date` >= @s",
			'counters_sessions_count_net'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 112 AND `date` >= @s",
			'counters_sessions_count_age'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 113 AND `date` >= @s",
			'counters_sessions_count_sex'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 114 AND `date` >= @s",
			'counters_sessions_count_level'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 134 AND `date` >= @s",

			'counters_clans_flow'		=> "SELECT `date`, IF(`type` = 129, 1, 0) as `data`, `value` FROM `counters_daily` WHERE `type` IN(128, 129) AND `date` >= @s",
			'counters_clans_limit'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 130 AND `date` >= @s",
			'counters_experience'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 71 AND `date` >= @s",

			'counters_support'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 155 AND `date` >= @s",
			'counters_notifications'	=> "SELECT `date`, `type`, `data`, `value` FROM `counters_daily` WHERE `type` IN(@l) AND `date` >= @s",
			'counters_bad_maps'		=> "SELECT `date`, 0 as `data`, SUM(`value`) as `value` FROM `counters_daily` WHERE `type` = 146 AND `date` >= @s GROUP BY `date`, `type`",
			'counters_defer_autoban'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 131 AND `date` >= @s",
			'counters_cheaters'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 127 AND `data` = 2 AND `date` >= @s",

			'counters_rating_location'	=> "SELECT c1.`date`, c1.`data`, c1.`value` as `negative`, c2.`value` as `positive` FROM `counters_daily` c1, `counters_daily` c2 WHERE c1.`type` = 136 AND c2.`type` = 137 AND c2.`date` = c1.`date` AND c2.`data` = c1.`data` AND c1.`date` >= @s",
			'counters_time_round_location'	=> "SELECT c2.`date`, c2.`data`, (c2.`value`/60/c1.`value`) as `value` FROM `counters_daily` c1 INNER JOIN `counters_daily` c2 ON c2.`date` = c1.`date` AND c2.`data` = c1.`data` AND c2.`type` = 141 WHERE c1.`type` = 140 AND c1.`date` >= @s ORDER BY c1.`date`, `data`",
			'counters_count_round_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 140 AND `date` >= @s",
			'counters_round_completion'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 334 AND `date` >= @s",
			'counters_success_r_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 190 AND `date` >= @s",
			'counters_hollow_r_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 99 AND `date` >= @s",
			'counters_plays_count'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 192 AND `date` >= @s",
			'counters_death'		=> "SELECT `date`, (`data` MOD 100) as `death`, SUM(`value`) as `value` FROM `counters_daily` WHERE `type` = 193 AND `date` >= @s GROUP BY `date`, `death`",
			'counters_mode_rating'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 342 AND `date` >= @s",

			'counters_collections'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 61 AND `date` >= @s",
			'counters_trophy'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 62 AND `date` >= @s",
			'counters_pickup_col_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 60 AND `date` >= @s",
			'counters_success_col_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 208 AND `date` >= @s",
			'counters_shaman_col_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 209 AND `date` >= @s",
			'counters_spawn_col_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 181 AND `date` >= @s",
			'counters_collection_exchange'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 63 AND `date` >= '2013-10-01' AND `date` >= @s",

			'counters_award_ten_coins'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 152 AND `date` >= @s",

			'counters_exchange'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 356 AND `date` >= @s",

			'players_new_all'		=> "SELECT `register_time` as `date`, 0 as `data`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= @s GROUP BY `date`",
			'players_new_by_invites'	=> "SELECT `register_time` as `date`, 0 as `data`, COUNT(`inviter_id`) as `value` FROM `players` FORCE INDEX (`register_time`, `inviter_id`) WHERE `register_time` >= @s AND `inviter_id` <> 0 GROUP BY `date`",
			'players_new_by_invites_5'	=> "SELECT `register_time` as `date`, 1 as `data`, COUNT(`inviter_id`) as `value` FROM `players` FORCE INDEX (`register_time`, `inviter_id`) WHERE `register_time` >= @s AND `inviter_id` <> 0 AND `level` >= 5 GROUP BY `date`",
			'players_new_net'		=> "SELECT `register_time` as `date`, `type` as `data`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= @s GROUP BY `date`, `data`",
			'players_new_age'		=> "SELECT `register_time` as `date`, IF(`bday` = 0, -1, TIMESTAMPDIFF(YEAR, DATE_ADD(FROM_UNIXTIME(0), INTERVAL `bday` SECOND), `register_time`)) as `data`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= @s GROUP BY `date`, `data`",
			'players_new_sex'		=> "SELECT `register_time` as `date`, `sex` as `data`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= @s GROUP BY `date`, `data`",
			'players_new_tag'		=> "SELECT `register_time` as `date`, `tag` as `data`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= '2015-01-14' AND `register_time` >= @s GROUP BY `date`, `data`",
			'players_new_ref_fb'		=> "SELECT `register_time` as `date`, `referrer` as `data`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= @s AND `referrer` IN(".self::ReferrersFB.") AND `type` = 5 GROUP BY `date`, `data`",

			'players_retention_1d'		=> "SELECT DATE_ADD('1970-01-01', INTERVAL `data` DAY) as `registered`, DATEDIFF(`date`, '1970-01-01') - `data` as `days`, `value` FROM `counters_daily` WHERE `type` = 56",
			'players_retention_1d_net'	=> "SELECT `date`, DATE_ADD('1970-01-01', INTERVAL `data` & 0xFFFF DAY) as `registered`, DATEDIFF(`date`, '1970-01-01') - (`data` & 0xFFFF) as `days`, `data` >> 16 as `data`, `value` FROM `counters_daily` WHERE `type` = 57 AND `date` >= @s",
			'players_retention_1d_age'	=> "SELECT `date`, DATE_ADD('1970-01-01', INTERVAL `data` & 0xFFFF DAY) as `registered`, DATEDIFF(`date`, '1970-01-01') - (`data` & 0xFFFF) as `days`, `data` >> 16 as `data`, `value` FROM `counters_daily` WHERE `type` = 59 AND `date` >= @s",
			'players_retention_1d_sex'	=> "SELECT `date`, DATE_ADD('1970-01-01', INTERVAL `data` & 0xFFFF DAY) as `registered`, DATEDIFF(`date`, '1970-01-01') - (`data` & 0xFFFF) as `days`, `data` >> 16 as `data`, `value` FROM `counters_daily` WHERE `type` = 58 AND `date` >= @s",
			'players_retention_1d_tag'	=> "SELECT `date`, DATE_ADD('1970-01-01', INTERVAL `data` & 0xFFFFFFFF DAY) as `registered`, `data` >> 32 as `data`, (DATEDIFF(`date`, '1970-01-01') - (`data` & 0xFFFFFFFF)) as `days`, `value` FROM `counters_daily` WHERE `type` = 000 AND `date` >= @s",
			'players_retention_all'		=> "SELECT `register_time` as `date`, DATEDIFF(FROM_UNIXTIME(`logout_time`), `register_time`) as `days`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= '2000-01-01' AND `logout_time` != 0 GROUP BY `date`, `days`",
			'players_retention_net'		=> "SELECT `register_time` as `date`, `type` as `data`, DATEDIFF(FROM_UNIXTIME(`logout_time`), `register_time`) as `days`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= '2000-01-01' AND `logout_time` != 0 GROUP BY `date`, `data`, `days`",
			'players_retention_age'		=> "SELECT `register_time` as `date`, IF(`bday` = 0, -1, TIMESTAMPDIFF(YEAR, DATE_ADD(FROM_UNIXTIME(0), INTERVAL `bday` SECOND), `register_time`)) as `data`, DATEDIFF(FROM_UNIXTIME(`logout_time`), `register_time`) as `days`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= '2000-01-01' AND `logout_time` != 0 GROUP BY `date`, `data`, `days`",
			'players_retention_sex'		=> "SELECT `register_time` as `date`, `sex` as `data`, DATEDIFF(FROM_UNIXTIME(`logout_time`), `register_time`) as `days`, COUNT(*) as `value` FROM `players` WHERE `register_time` >= '2000-01-01' AND `logout_time` != 0 GROUP BY `date`, `data`, `days`",
			'players_retention_tag'		=> "SELECT `register_time` as `date`, `tag` as `data`, DATEDIFF(FROM_UNIXTIME(`logout_time`), `register_time`) as `days`, COUNT(*) as `value` FROM `players` WHERE `logout_time` != 0 AND `register_time` >= '2014-10-24' GROUP BY `date`, `data`, `days`",
			'players_retention_paying'	=> "SELECT pl.`register_time` as `date`, DATEDIFF(FROM_UNIXTIME(pl.`logout_time`), pl.`register_time`) as `days`, COUNT(DISTINCT pl.`inner_id`) as `value` FROM `players` pl INNER JOIN `payments` pm ON pm.`net_id` = pl.`net_id` AND pm.`type` = pl.`type` GROUP BY `date`, `days`",
			'players_retention_ref_fb'	=> "SELECT `register_time` as `date`, `referrer` as `data`, DATEDIFF(FROM_UNIXTIME(`logout_time`), `register_time`) as `days`, COUNT(*) as `value` FROM `players` FORCE INDEX(`referrer`) WHERE `register_time` >= '2000-01-01' AND `logout_time` != 0 AND `referrer` IN(".self::ReferrersFB.") GROUP BY `date`, `data`, `days`",

			'players_life_time_2weeks'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 258 AND `date` >= @s",
			'players_life_time_3weeks'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 259 AND `date` >= @s",

			'players_paying_net'		=> "SELECT DATE(`time`) as `date`, `type` as `data`, `net_id`, COUNT(*) as `count` FROM `payments` FORCE INDEX(`time`) WHERE `time` >= DATE_SUB(@s, INTERVAL 30 DAY) GROUP BY `date`, `data`, `net_id` ORDER BY `date` ASC",
			'players_paying_age'		=> "SELECT DATE(pm.`time`) as `date`, IF(pl.`bday` = 0, -1, TIMESTAMPDIFF(YEAR, DATE_ADD(FROM_UNIXTIME(0), INTERVAL pl.`bday` SECOND), pm.`time`)) as `data`, pm.`net_id` as `net_id` FROM `payments` pm FORCE INDEX(`time`) INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= DATE_SUB(@s, INTERVAL 30 DAY) GROUP BY `date`, `data`, `net_id` ORDER BY `date` ASC",
			'players_paying_sex'		=> "SELECT DATE(pm.`time`) as `date`, pl.`sex` as `data`, pm.`net_id` as `net_id` FROM `payments` pm FORCE INDEX(`time`) INNER JOIN `players` pl ON pl.`type` = pm.`type` AND pl.`net_id` = pm.`net_id` WHERE pm.`time` >= DATE_SUB(@s, INTERVAL 30 DAY) GROUP BY `date`, `data`, `net_id` ORDER BY `date` ASC",

			'players_paying_groups'		=> "SELECT DATE(`time`) as `date`, `type` as `data`, `net_id`, SUM(`balance`) as `sum` FROM `payments` FORCE INDEX(`time`) WHERE `time` >= DATE_SUB(@s, INTERVAL 30 DAY) GROUP BY `date`, `data`, `net_id` ORDER BY `date` ASC",
			'players_paying_counts'		=> "SELECT DATE(pm1.`time`) as `date`, COUNT(pm2.`net_id`) as `count` FROM `payments` pm1 INNER JOIN `payments` pm2 ON pm2.`time` <= pm1.`time` AND pm2.`net_id` = pm1.`net_id` AND pm2.`type` = pm1.`type` WHERE pm1.`time` >= @s GROUP BY `date`, pm1.`net_id`, pm1.`type`",

			'players_levels'		=> "SELECT `register_time` as `date`, IF(`level` > 9, 9, `level`) as `data`, COUNT(*) as `value` FROM `players` WHERE `register_time` > '2000-01-01' GROUP BY `date`, `data`",
			'players_subscription'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 120 AND `date` >= @s",
			'players_bans'			=> "SELECT DATE(FROM_UNIXTIME(`time`)) as `date`, `reason` as `data`, COUNT(*) as `value` FROM `blocks` WHERE `time` >= UNIX_TIMESTAMP(@s) GROUP BY `date`, `data`",
			'players_bans_paying'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 368 AND `date` >= @s",
			'players_anticheat'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 131 AND `date` >= @s",

			'players_tutorial'		=> "SELECT DATE_ADD('1970-01-01', INTERVAL `data` >> 32 DAY) as `date`, `data` & 0xFF as `data`, SUM(`value`) as `value` FROM `counters_daily` WHERE `type` = 260 AND `data` > 16 GROUP BY `data`",
			'players_game_start'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 265",
			'players_sandbox'		=> "SELECT `date`, `data` & 0xFF AS `chart`, `data` >> 8 AS `type`, `value` FROM `counters_daily` WHERE `type` = 344 AND `data` & 0xFF IN(2,3,4,5,6) AND `date` >= @s",
			'players_tutorial_level'	=> "SELECT `date`, `data` & 0xFF AS `chart`, `data` >> 8 AS `type`, `value` FROM `counters_daily` WHERE `type` = 345 AND `date` >= @s",
			'players_training'		=> "SELECT `date`, IF(`type` = 350, `data`, -`data`) AS `data`, `value` FROM `counters_daily` WHERE `type` IN(350,351) AND `date` >= @s",

			'players_goldencup'		=> "SELECT `date`, CASE WHEN `sum` < 50 THEN 0 WHEN `sum` < 151 THEN 1 WHEN `sum` < 301 THEN 2 ELSE 3 END AS `data`, COUNT(DISTINCT `net_id`, `type`) as `value` FROM (SELECT DATE(pm1.`time`) as `date`, SUM(pm2.`balance`) as `sum`, pm2.`type`, pm2.`net_id` FROM `payments` pm1 INNER JOIN `payments` pm2 ON pm2.`net_id` = pm1.`net_id` AND pm2.`type` = pm1.`type` WHERE pm2.`time` BETWEEN DATE_SUB(pm1.`time`, INTERVAL 30 DAY) AND pm1.`time` AND pm1.`offer` = 20 AND pm1.`time` >= @s GROUP BY `date`, `type`, `net_id`) t1 GROUP BY `date`, `data`",

			'players_gifts_appended'	=> "SELECT `date`, `data` & 0xFF AS `count`, `data` >> 8 AS `way`, `value` FROM `counters_daily` WHERE `type` = 352 AND `date` >= @s",
			'players_gifts_removed'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 353 AND `date` >= @s",
			'players_gifts_taken'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 354 AND `date` >= @s",

			'quests_new'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 233 AND `date` >= @s",
			'quests_done'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 234 AND `date` >= @s",
			'quests_map_chests'		=> "SELECT `date`, -1 as `data`, `value` FROM `counters_daily` WHERE `type` = 237 AND `data` = 1 AND `date` >= @s",
			'quests_map_result'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 243 AND `date` >= @s",
			'quests_map_collect'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 235 AND `date` >= @s",
			'quests_time'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 239 AND `date` >= @s",
			'quests_count'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 257 AND `date` >= @s",
			'quests_exchange'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 242 AND `date` >= @s",
			'quests_puzzle'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 246 AND `date` >= @s",
			'quests_chests_open'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 241 AND `date` >= @s",
			'quests_pharaon_package'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 240 AND `date` >= @s",

			'quests_friend_achieve'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 142 AND `date` >= @s",
			'quests_viral_active'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 227 AND `date` >= @s",
			'quests_viral_deactive'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 228 AND `date` >= @s",
			'quests_viral_new'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 355 AND `date` >= @s",

			'achievements_total'		=> "SELECT q.`date`, q.`megadata` as `data`, q.`value` FROM (SELECT `date`, (CASE WHEN `data` BETWEEN 0 AND 85 THEN 0 WHEN `data` BETWEEN 86 AND 132 THEN 1 WHEN `data` BETWEEN 133 AND 161 THEN 2 ELSE 3 END) as `megadata`, SUM(`value`) as `value` FROM `counters_daily` WHERE `type` = 144 AND `date` >= @s GROUP BY `date`, `megadata`) q",
			'achievements_all'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 144 AND `data` IN (@t) AND `date` >= @s",

			'events_pickups'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 117 AND `date` >= @s",
			'events_cakes'			=> "SELECT c1.`date`, c1.`data`, (c1.`value` - IFNULL(c2.`value`, 0)) as `value` FROM `counters_daily` c1 LEFT JOIN `counters_daily` c2 ON c2.`date` = c1.`date` AND c2.`data` = c1.`data` AND c2.`type` = 119 WHERE c1.`type` = 118 ORDER BY `date` ASC",

			'events_elements'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 61 AND `date` >= @s AND `data` >= 13",
			'events_megablock'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 62 AND `date` >= @s AND `data` = 1",

			'events_lottery'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 147 AND `date` >= @s",
			'events_vampire_award'		=> "SELECT `date`, 0 as `data`, `value` FROM `counters_daily` WHERE `type` = 148 AND `date` >= @s",
			'events_sweets'			=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 149 AND `date` >= @s",
			'events_vampire_magic'		=> "SELECT `date`, 0 as `data`, `value` FROM `counters_daily` WHERE `type` = 150 AND `date` >= @s",
			'events_lottery_post'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 151 AND `date` >= @s",

			'events_ny_awards'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 156 AND `date` >= @s",
			'events_ny_posts'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 157 AND `date` >= @s",
			'events_ny_snowflakes_type'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 158 AND `date` >= @s",
			'events_ny_snowflakes_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 159 AND `date` >= @s",
			'events_ny_snowflakes_flow'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 160 AND `date` >= @s",
			'events_ny_magic'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 161 AND `date` >= @s",
			'events_ny_wolf'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 162 AND `date` >= @s",

			'events_olymp_roulette'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 172 AND `date` >= @s",
			'events_olymp_posts'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 174 AND `date` >= @s",
			'events_olymp_rings_location'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 171 AND `date` >= @s",
			'events_olymp_rings_type'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 169 AND `date` >= @s",
			'events_olymp_snowboard'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 173 AND `date` >= @s",
			'events_olymp_ring_flow'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 170 AND `date` >= @s",
			'events_olymp_ticket_flow'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 168 AND `date` >= @s",
			'events_olymp_visits'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 179 AND `date` >= @s",
			'events_olymp_ticket_type'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 167 AND `date` >= @s",
			'events_olymp_like'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 177 AND `date` >= @s",
			'events_olymp_dislike'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 178 AND `date` >= @s",
			'events_olymp_waiting'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 180 AND `date` >= @s",

			'events_egg_count'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 198 AND `date` >= @s",
			'events_egg_flow'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 199 AND `date` >= @s",
			'events_egg_upgrade'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 200 AND `date` >= @s",
			'events_egg_upgrade_fail'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 201 AND `date` >= @s",
			'events_egg_battle'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 202 AND `date` >= @s",

			'events_september_spawn'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 249 AND `date` >= @s",
			'events_september_pickups'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 250 AND `date` >= @s",
			'events_september_rolls'	=> "SELECT `date`, IF(`type` = 251, 1, 0) as `data`, `value` FROM `counters_daily` WHERE `type` IN(251, 252) AND `date` >= @s",
			'events_september_awards'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 253 AND `date` >= @s",
			'events_september_clothes'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 254 AND `date` >= @s",

			'events_halloween_spawn'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 276 AND `date` >= @s",
			'events_halloween_pickup'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 277 AND `date` >= @s",
			'events_halloween_rolls'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 279 AND `date` >= @s",
			'events_halloween_awards'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 280 AND `date` >= @s",
			'events_halloween_clothes'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 281 AND `date` >= @s",

			'events_ny2015_pickup'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 307 AND `date` >= @s",
			'events_ny2015_created'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 306 AND `date` >= @s",
			'events_ny2015_ways'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 308 AND `date` >= @s",
			'events_ny2015_snow_unique'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 310 AND `date` >= @s",
			'events_ny2015_games'		=> "SELECT `date`, `data` >> 8 AS `location`, (`data` & 0xFF) AS `count`, `value` FROM `counters_daily` WHERE `type` = 303 AND `date` >= @s",
			'events_ny2015_games_duration'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 304 AND `date` >= @s",
			'events_ny2015_tree_gifts'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 305 AND `date` >= @s",
			'events_ny2015_trees'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 312 AND `date` >= @s",
			'events_ny2015_gift_accepted'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 16 AND `date` >= @s AND `data` = 1",
			'events_ny2015_gift_sent'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 302 AND `date` >= @s AND `data` = 1",
			'events_ny2015_baubles_unique'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 311 AND `date` >= @s",
			'events_ny2015_accessory_up'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 309 AND `date` >= @s",

			'events_olympiad_maps_count'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 286 AND `date` >= @s",
			'events_olympiad_maps_time'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 288 AND `date` >= @s",
			'events_olympiad_maps_points'	=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 287 AND `date` >= @s",
			'events_olympiad_games'		=> "SELECT `date`, `data`, `value` FROM `counters_daily` WHERE `type` = 290 AND `date` >= @s",

			'hidden_counters_mau_net'	=> "SELECT LAST_DAY(CURDATE()) as `date`, `type` as `data`, COUNT(*) as `value` FROM `players` WHERE `logout_time` >= @i GROUP BY `data`",
			'hidden_counters_mau_age'	=> "SELECT LAST_DAY(CURDATE()) as `date`, IF(`bday` = 0, -1, TIMESTAMPDIFF(YEAR, DATE_ADD(FROM_UNIXTIME(0), INTERVAL `bday` SECOND), NOW())) as `data`, COUNT(*) as `value` FROM `players` WHERE `logout_time` >= @i GROUP BY `data`",
			'hidden_counters_mau_sex'	=> "SELECT LAST_DAY(CURDATE()) as `date`, `sex` as `data`, COUNT(*) as `value` FROM `players` WHERE `logout_time` >= @i GROUP BY `data`",
			'hidden_counters_mau_tag'	=> "SELECT LAST_DAY(CURDATE()) as `date`, `tag` as `data`, COUNT(*) as `value` FROM `players` WHERE `logout_time` >= @i GROUP BY `data`",
			'hidden_paying_month_net'	=> "SELECT LAST_DAY(`time`) as `date`, `type` as `data`, COUNT(DISTINCT `net_id`, `type`) as `value` FROM `payments` FORCE INDEX(`time`) WHERE `time` >= DATE_FORMAT(@s, '%Y-%m-01') GROUP BY `date`, `data`",
			'hidden_paying_month_age'	=> "SELECT LAST_DAY(pm.`time`) as `date`, IF(p.`bday` = 0, -1, TIMESTAMPDIFF(YEAR, DATE_ADD(FROM_UNIXTIME(0), INTERVAL p.`bday` SECOND), pm.`time`)) as `data`, COUNT(DISTINCT pm.`net_id`, pm.`type`) as `value` FROM `payments` pm FORCE INDEX(`time`) INNER JOIN `players` p ON p.`net_id` = pm.`net_id` AND p.`type` = pm.`type` WHERE pm.`time` >= DATE_FORMAT(@s, '%Y-%m-01') GROUP BY `date`, `data`",
			'hidden_paying_month_sex'	=> "SELECT LAST_DAY(pm.`time`) as `date`, p.`sex` as `data`, COUNT(DISTINCT pm.`net_id`, pm.`type`) as `value` FROM `payments` pm FORCE INDEX(`time`) INNER JOIN `players` p ON p.`net_id` = pm.`net_id` AND p.`type` = pm.`type` WHERE pm.`time` >= DATE_FORMAT(@s, '%Y-%m-01') GROUP BY `date`, `data`",
			'hidden_paying_month_tag'	=> "SELECT LAST_DAY(pm.`time`) as `date`, p.`tag` as `data`, COUNT(DISTINCT pm.`net_id`, pm.`type`) as `value` FROM `payments` pm FORCE INDEX(`time`) INNER JOIN `players` p ON p.`net_id` = pm.`net_id` AND p.`type` = pm.`type` WHERE pm.`time` >= DATE_FORMAT(@s, '%Y-%m-01') GROUP BY `date`, `data`"
		);
	}

	public function get_jobs()
	{
		return array(217 => "payments_bundle");
	}

	public function get_categories()
	{
		return array(
			'payments'	=> "Платежи",
			'finance'	=> "Финансы",
			'buyings'	=> "Покупки",
			'counters'	=> "Счётчики",
			'players'	=> "Игроки",
			'quests'	=> "Квесты",
			'achievements'	=> "Достижения",
			'events'	=> "Эвенты",
			'api'		=> "События",
			'hidden'	=> "Скрытая категория",
			'apipath'	=> "Скрытая для путей"
		);
	}

	public function get_reports()
	{
		$id = 0;
		return array(
			'payments' => array(
				'all' => array(
					'id'		=> $id++,
					'title'		=> "Все платежи",
					'description'	=> "Количество и сумма платежей",
					'graphs'	=> array(
						array(
							'title'		=> "Платежи",
							'legend'	=> array(0 => "Сумма", 1 => "Количество"),
							'split_axis'	=> array("0", "1")
						)
					)
				),
				'candles' => array(
					'id'		=> $id++,
					'type'		=> "candles",
					'title'		=> "Все платежи (свечи)",
					'description'	=> "Сумма платежей с минимальным и максимальным значениями в час",
					'legend'	=> "Сумма"
				),
				'specific' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по суммам",
					'description'	=> "Количество и сумма платежей, с разделением по суммам",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма в монетах",
							'legend'	=> $this->payments
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->payments
						)
					)
				),
				'offers' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по офферам",
					'description'	=> "Количество и сумма платежей по офферам",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->offers
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->offers
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					)
				),
				'bundles' => array(
					'id'		=> $id++,
					'title'		=> "Бандлы",
					'description'	=> "Количество и сумма в игровой валюте платежей за бандлы",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма в игровой валюте",
							'legend'	=> $this->bundles
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->bundles
						)
					)
				),
				'hourly' => array(
					'id'		=> $id++,
					'type'		=> "stacked",
					'title'		=> "Платежи по часам",
					'description'	=> "Количество и сумма платежей по часам",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> array(0 => "Полночь", 1 => "01:00", 2 => "02:00", 3 => "03:00", 4 => "04:00", 5 => "05:00", 6 => "06:00", 7 => "07:00", 8 => "08:00", 9 => "09:00", 10 => "10:00", 11 => "11:00", 12 => "12:00", 13 => "13:00", 14 => "14:00", 15 => "15:00", 16 => "16:00", 17 => "17:00", 18 => "18:00", 19 => "19:00", 20 => "20:00", 21 => "21:00", 22 => "22:00", 23 => "23:00")
						),
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "Полночь", 1 => "01:00", 2 => "02:00", 3 => "03:00", 4 => "04:00", 5 => "05:00", 6 => "06:00", 7 => "07:00", 8 => "08:00", 9 => "09:00", 10 => "10:00", 11 => "11:00", 12 => "12:00", 13 => "13:00", 14 => "14:00", 15 => "15:00", 16 => "16:00", 17 => "17:00", 18 => "18:00", 19 => "19:00", 20 => "20:00", 21 => "21:00", 22 => "22:00", 23 => "23:00")
						)
					)
				),
				"-",
				'net' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по сетям",
					'description'	=> "Количество и сумма платежей для каждой соц. сети",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->networks
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					)
				),
				'age' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по возрасту",
					'description'	=> "Количество и сумма платежей для каждой возрастной группы",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->ages
						)
					)
				),
				'sex' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по полу",
					'description'	=> "Количество и сумма платежей для каждого пола",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->sex
						)
					)
				),
				'tag' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по тегам",
					'description'	=> "Количество и сумма платежей для маркированных пользователей",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->user_tags
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->user_tags
						)
					)
				),
				"-",
				'first' => array(
					'id'		=> $id++,
					'title'		=> "Первые платежи",
					'description'	=> "Количество и сумма платежей, сделанных игроками в первый раз",
					'graphs'	=> array(
						array(
							'title'		=> "Платежи",
							'legend'	=> array(0 => "Сумма", 1 => "Количество", 2 => "Средний платеж"),
							'split_axis'	=> array("0", "1", "2")
						)
					)
				),
				'repeated' => array(
					'id'		=> $id++,
					'title'		=> "Повторные платежи",
					'description'	=> "Количество и сумма платежей, сделанных игроками повторно",
					'graphs'	=> array(
						array(
							'title'		=> "Платежи",
							'legend'	=> array(0 => "Сумма", 1 => "Количество", 2 => "Средний платеж"),
							'split_axis'	=> array("0", "1", "2")
						)
					)
				),
				'newbies' => array(
					'id'		=> $id++,
					'title'		=> "Платежи новичков",
					'description'	=> "Количество и сумма платежей, сделанных игроками в течении суток после регистрации",
					'graphs'	=> array(
						array(
							'title'		=> "Платежи",
							'legend'	=> array(0 => "Сумма", 1 => "Количество"),
							'split_axis'	=> array("0", "1")
						)
					)
				),
				"-",
				'day_first' => array(
					'id'		=> $id++,
					'type'		=> "filled",
					'title'		=> "Время первого платежа",
					'description'	=> "Разделение первых платежей по дням, прошедших с момента регистрации",
					'graphs'	=> array(
						array(
							'title'		=> "Проценты",
							'legend'	=> $this->periods,
							'value_append'	=> array(0 => "%", 2 => "%", 8 => "%", 15 => "%", 31 => "%")
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->periods
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				'day_next' => array(
					'id'		=> $id++,
					'title'		=> "Время между платежами",
					'description'	=> "Количество и сумма платежей, совершенных через N дней",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->periods
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->periods
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				"-",
				'bonus' => array(
					'id'		=> $id++,
					'title'		=> "Использованный 2x бонус",
					'description'	=> "Количество и сумма платежей с начислением двойного бонуса",
					'graphs'	=> array(
						array(
							'title'		=> "Платежи",
							'legend'	=> array(0 => "Сумма", 1 => "Количество"),
							'split_axis'	=> array("0", "1")
						)
					)
				)
			),
			'finance' => array(
				'revenue' => array(
					'id'		=> $id++,
					'title'		=> "Доход",
					'description'	=> "Сумма дохода",
					'graphs'	=> array(
						array(
							'title'		=> "Общий",
							'legend'	=> array(0 => "Сумма")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks
						)
					),
					'params'	=> array(
						'value_append'	=> $this->currency
					)
				),
				"-",
				'arpu' => array(
					'id'		=> $id++,
					'title'		=> "ARPU",
					'description'	=> "Средний доход от игрока за день в рублях (без учёта комиссии социальной сети)",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Общее")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags
						)
					),
					'params'	=> array(
						'value_append'	=> $this->currency,
						'show_sums'	=> false,
						'indicator'	=> array('type' => "function", 'function' => "arpu_indicator")
					)
				),
				'arppu' => array(
					'id'		=> $id++,
					'title'		=> "ARPPU",
					'description'	=> "Средний доход от платящего игрока за день в рублях (без учёта комиссии социальной сети)",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Общее")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags
						)
					),
					'params'	=> array(
						'value_append'	=> $this->currency,
						'show_sums'	=> false,
						'indicator'	=> array('type' => "function", 'function' => "arppu_indicator")
					)
				),
				'ltv' => array(
					'id'		=> $id++,
					'title'		=> "LTV",
					'description'	=> "Life Time Value (прибыль от игрока за время, проведенное в проекте)",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Общее")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags
						)
					),
					'params'	=> array(
						'value_append'	=> $this->currency,
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'ltv_period_all' => array(
					'id'		=> $id++,
					'title'		=> "LTV за период (все)",
					'description'	=> "Life Time Value (доход от игрока за период со дня регистрации)",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array("Общее за сутки", "За неделю", "За 30 дней")
						),
						array(
							'title'		=> "По сетям за сутки",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По сетям за неделю",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По сетям за 30 дней",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По возрасту за сутки",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По возрасту за неделю",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По возрасту за 30 дней",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> array("Мужской за сутки", "Женский за сутки", "Не задан за сутки", "Мужской за неделю", "Женский за неделю", "Не задан за неделю", "Мужской за 30 дней", "Женский за 30 дней", "Не задан за 30 дней")
						)
					),
					'params'	=> array(
						'value_append'	=> $this->currency,
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'ltv_period_paying' => array(
					'id'		=> $id++,
					'title'		=> "LTV за период (платящие)",
					'description'	=> "Life Time Value (доход от игрока за период со дня регистрации)",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array("Общее за сутки", "За неделю", "За 30 дней")
						),
						array(
							'title'		=> "По сетям за сутки",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По сетям за неделю",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По сетям за 30 дней",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "По возрасту за сутки",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По возрасту за неделю",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По возрасту за 30 дней",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> array("Мужской за сутки", "Женский за сутки", "Не задан за сутки", "Мужской за неделю", "Женский за неделю", "Не задан за неделю", "Мужской за 30 дней", "Женский за 30 дней", "Не задан за 30 дней")
						)
					),
					'params'	=> array(
						'value_append'	=> $this->currency,
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				)
			),
			'buyings' => array(
				'coins' => array(
					'id'		=> $id++,
					'title'		=> "За монеты",
					'description'	=> "Количество и сумма покупок за монеты",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->goods
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->goods
						)
					),
					'params'	=> array(
						'legend_skip'	=> true,
						'show_sumline'	=> true,
						'sort_graphs'	=> "asc"
					)
				),
				'nuts' => array(
					'id'		=> $id++,
					'title'		=> "За орехи",
					'description'	=> "Количество и сумма покупок за орехи",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->goods
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->goods
						)
					),
					'params'	=> array(
						'legend_skip'	=> true,
						'show_sumline'	=> true,
						'sort_graphs'	=> "asc"
					)
				),
				"-",
				'shaman' => array(
					'id'		=> $id++,
					'title'		=> "Предметы шамана",
					'description'	=> "Количество и сумма покупок предметов шамана за орешки и за монетки",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма за орешки",
							'legend'	=> $this->shaman_items
						),
						array(
							'title'		=> "Количество за орешки",
							'legend'	=> $this->shaman_items
						),
						array(
							'title'		=> "Сумма за монетки",
							'legend'	=> $this->shaman_items
						),
						array(
							'title'		=> "Количество за монетки",
							'legend'	=> $this->shaman_items
						)
					),
					'params'	=> array(
						'legend_skip'	=> true,
						'show_sumline'	=> true
					)
				),
				'subscription' => array(
					'id'		=> $id++,
					'title'		=> "Подписка: Зелье",
					'description'	=> "Количество и сумма покупок подписки по типу за монетки",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> array(0 => "7 дней", 1 => "30 дней", 2 => "1 день")
						),
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "7 дней", 1 => "30 дней", 2 => "1 день")
						)
					)
				),
				'subscription_power' => array(
					'id'		=> $id++,
					'title'		=> "Подписка: Зелье Могущества",
					'description'	=> "Количество и сумма покупок подписки по типу за монетки",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> array("На день", "На неделю")
						),
						array(
							'title'		=> "Количество",
							'legend'	=> array("На день", "На неделю")
						)
					)
				),
				'goldencup' => array(
					'id'		=> $id++,
					'title'		=> "Подписка: Золото",
					'description'	=> "Количество сборов, сумма собранных монет , активные игроки с подпиской, сколько пропущено сборов и монет, количество игроков, купивших подписку: золото",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма монет, количество сборов, игроки",
							'legend'	=> array(330 => "Сумма собранных монет", 331 => "Количество сборов", 332 => "Активные игроки с подпиской"),
							'split_axis'	=> array("330", "331", "332")
						),
						array(
							'title'		=> "Пропущено сборов, сумма неполученных монет",
							'legend'	=> array("Пропущено сборов", "Сумма неполученных монет"),
							'split_axis'	=> array("0", "1")
						),
						array(
							'title'		=> "Купившие подписку: золото",
							'legend'	=> array(0 => "0-49", 1 => "50-150", 2 => "151-300", 3 => "300+")
						)
					)
				),
				'vip' => array(
					'id'		=> $id++,
					'title'		=> "VIP-Статус",
					'description'	=> "Количество покупок VIP-Статуса пользователями по типу",
					'graphs'	=> array(
						array(
							'title'		=> "Платящие",
							'legend'	=> array(0 => "1 день", 1 => "7 дней", 2 => "30 дней")
						),
						array(
							'title'		=> "Заплатили в день покупки",
							'legend'	=> array(0 => "1 день", 1 => "7 дней", 2 => "30 дней")
						),
						array(
							'title'		=> "Пользователи без платежей",
							'legend'	=> array(0 => "1 день", 1 => "7 дней", 2 => "30 дней")
						)
					)
				),
				'decoration' => array(
					'id'		=> $id++,
					'title'		=> "Декорации",
					'description'	=> "Количество и сумма покупок декора по типу за монеты и орехи",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма за монеты",
							'legend'	=> $this->decorations,
							'legend_menu'	=> array('menu' => $this->decorations_menu)
						),
						array(
							'title'		=> "Количество за монеты",
							'legend'	=> $this->decorations,
							'legend_menu'	=> array('menu' => $this->decorations_menu)
						),
						array(
							'title'		=> "Сумма за орехи",
							'legend'	=> $this->decorations,
							'legend_menu'	=> array('menu' => $this->decorations_menu)
						),
						array(
							'title'		=> "Количество за орехи",
							'legend'	=> $this->decorations,
							'legend_menu'	=> array('menu' => $this->decorations_menu)
						)
					),
					'connectable'	=> false
				),
				'rpg_talents' => array(
					'id'		=> $id++,
					'title'		=> "Навыки шамана",
					'description'	=> "Количество и сумма покупок платных талантов шамана",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->shaman_buyings_talents,
							'legend_menu'	=> array('menu' => $this->shaman_buyings_talents_menu)
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->shaman_buyings_talents,
							'legend_menu'	=> array('menu' => $this->shaman_buyings_talents_menu)
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					)
				),
				'quests_map' => array(
					'id'		=> $id++,
					'title'		=> "Квесты",
					'description'	=> "Количество и сумма покупок на картах квестов",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> array(0 => "Время", 1 => "Воскрешение", 2 => "Компас")
						),
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "Время", 1 => "Воскрешение", 2 => "Компас")
						)
					),
					'start_date'	=> "2014-08-12"
				),
				'clothes' => array(
					'id'		=> $id++,
					'title'		=> "Одежда",
					'description'	=> "Количество и сумма покупок одежды за монеты",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->packages + $this->packages_elements,
							'legend_menu'	=> array('menu' => $this->packages_menu, 'search' => true)
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->packages + $this->packages_elements,
							'legend_menu'	=> array('menu' => $this->packages_menu, 'search' => true)
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					),
					'connectable'	=> false
				),
				'clothes_day' => array(
					'id'		=> $id++,
					'title'		=> "Одежда на день",
					'description'	=> "Количество и сумма покупок аренды одежды на день за монеты",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->packages + $this->packages_elements,
							'legend_menu'	=> array('menu' => $this->packages_menu, 'search' => true)
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->packages + $this->packages_elements,
							'legend_menu'	=> array('menu' => $this->packages_menu, 'search' => true)
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					),
					'connectable'	=> false
				),
				'clothes_week' => array(
					'id'		=> $id++,
					'title'		=> "Одежда на неделю",
					'description'	=> "Количество и сумма покупок аренды одежды на день за монеты",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->packages + $this->packages_elements,
							'legend_menu'	=> array('menu' => $this->packages_menu, 'search' => true)
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->packages + $this->packages_elements,
							'legend_menu'	=> array('menu' => $this->packages_menu, 'search' => true)
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					),
					'connectable'	=> false
				),
				'clothes_month' => array(
					'id'		=> $id++,
					'title'		=> "Одежда на месяц",
					'description'	=> "Количество и сумма покупок аренды одежды на день за монеты",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->packages + $this->packages_elements,
							'legend_menu'	=> array('menu' => $this->packages_menu, 'search' => true)
						),
						array(
							'title'		=> "Количество",
							'legend'	=> $this->packages + $this->packages_elements,
							'legend_menu'	=> array('menu' => $this->packages_menu, 'search' => true)
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					),
					'connectable'	=> false
				),
				'clothes_net' => array(
					'id'		=> $id++,
					'title'		=> "Одежда по сетям",
					'description'	=> "Сумма монет за одежду по соцсетям",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма по сетям",
							'legend'	=> $this->networks
						)
					),
					'start_date'	=> '2015-01-01'
				),
				'clothes_prolongation' => array(
					'id'		=> $id++,
					'title'		=> "Одежда: продление",
					'description'	=> "Количество покупок продления одежды",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(1 => "Сутки", 7 => "Неделя", 30 => "Месяц")
						)
					)
				),
				"-",
				'clan_location' => array(
					'id'		=> $id++,
					'title'		=> "Клановые комнаты",
					'description'	=> "Количество покупок клановых комнат по локациям (локации с одним режимом только в общем списке)",
					'graphs'	=> array(
						array(
							'title'		=> "Общий",
							'legend'	=> $this->locations,
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Топи",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Снежные хребты",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Аномальная зона",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Шторм",
							'legend'	=> $this->location_mods
						)
					),
					'start_date'	=> "2014-11-19"
				),
				'clan_totem' => array(
					'id'		=> $id++,
					'title'		=> "Тотемы",
					'description'	=> "Количество покупок тотемов, внесение монет и орехов в кланы",
					'graphs'	=> array(
						array(
							'title'		=> "Покупки тотемов, количество",
							'legend'	=> array(0 => "Количество")
						),
						array(
							'title'		=> "Внесение монет, сумма",
							'legend'	=> array(0 => "Сумма")
						),
						array(
							'title'		=> "Внесение орехов, сумма",
							'legend'	=> array(0 => "Сумма")
						)
					)
				),
			),
			'counters' => array(
				'online' => array(
					'id'		=> $id++,
					'title'		=> "Онлайн",
					'description'	=> "Онлайн игроков",
					'graphs'	=> array(
						array(
							'title'		=> "Общий",
							'legend'	=> array(0 => "Максимальный", 1 => "Минимальный")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'online_location' => array(
					'id'		=> $id++,
					'title'		=> "Онлайн по локациям",
					'description'	=> "Максимальный и минимальный онлайн по локациям",
					'graphs'	=> array(
						array(
							'title'		=> "Максимальный",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Минимальный",
							'legend'	=> $this->locations
						)
					),
					'params'	=> array(
						'legend_skip'	=> true,
						'show_sums'	=> false,
						'show_sumline'	=> true,
						'indicator'	=> array('type' => "average")
					)
				),
				"-",
				'dau' => array(
					'id'		=> $id++,
					'title'		=> "DAU",
					'description'	=> "Количество уникальных игроков за день",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Игроки")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags
						),
						array(
							'title'		=> "По уровням",
							'legend'	=> $this->level_groups
						),
						array(
							'title'		=> "По локациям",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "По локациям, для игроков с уровнем больше 30",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "По дням от регистрации",
							'legend'	=> $this->life_time_periods
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'wau' => array(
					'id'		=> $id++,
					'title'		=> "WAU",
					'description'	=> "Количество уникальных игроков за неделю",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Игроки")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'mau' => array(
					'id'		=> $id++,
					'title'		=> "MAU",
					'description'	=> "Количество уникальных игроков за месяц",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Игроки")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "fixed")
					)
				),
				"-",
				'mau_percent' => array(
					'id'		=> $id++,
					'title'		=> "DAU/MAU",
					'description'	=> "Отношение DAU к MAU",
					'graphs'	=> array(
						array(
							'title'		=> "Общий",
							'legend'	=> array(0 => "Общий")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "fixed")
					)
				),
				"-",
				'dau_referrer' => array(
					'id'		=> $id++,
					'title'		=> "DAU по реферрерам",
					'description'	=> "DAU по рефереррерам для каждой соц. сети",
					'graphs'	=> array(
						array(
							'title'		=> "Facebook",
							'legend'	=> $this->referrers_fb
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'dau_source' => array(
					'id'		=> $id++,
					'title'		=> "DAU по источникам перехода",
					'description'	=> "DAU считается по реферреру, с которого игрок зашёл в первый раз за день",
					'graphs'	=> array(
						array(
							'title'		=> "Facebook",
							'legend'	=> $this->referrers_fb
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'dau_net_sex' => array(
					'id'		=> $id++,
					'title'		=> "DAU соцсети-пол",
					'description'	=> "DAU по соцсетям для каждого пола",
					'graphs'	=> array(
						array(
							'title'		=> "Мужской",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Женский",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Не задан",
							'legend'	=> $this->networks
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					)
				),
				'dau_net_age' => array(
					'id'		=> $id++,
					'title'		=> "DAU соцсети-возраст",
					'description'	=> "DAU по возрасту для каждой соцсети",
					'graphs'	=> array(
						array(
							'title'		=> "ВКонтакте",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "МойМир",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "Одноклассники",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "Facebook",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "ФотоСтрана",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "NextGame",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "StandAlone",
							'legend'	=> $this->ages
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					)
				),
				'wau_net_sex' => array(
					'id'		=> $id++,
					'title'		=> "WAU соцсети-пол",
					'description'	=> "WAU по соцсетям для каждого пола",
					'graphs'	=> array(
						array(
							'title'		=> "Мужской",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Женский",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Не задан",
							'legend'	=> $this->networks
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					)
				),
				'mau_net_sex' => array(
					'id'		=> $id++,
					'title'		=> "MAU соцсети-пол",
					'description'	=> "MAU по соцсетям для каждого пола",
					'graphs'	=> array(
						array(
							'title'		=> "Мужской",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Женский",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Не задан",
							'legend'	=> $this->networks
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					)
				),
				"-",
				'balance' => array(
					'id'		=> $id++,
					'title'		=> "Баланс ресурсов",
					'description'	=> "Количество полученных и потраченных игроками монет, орехов и жетонов",
					'graphs'	=> array(
						array(
							'title'		=> "Монеты",
							'legend'	=> array(1 => "Полученные", 0 => "Потраченные", 2 => "Итог"),
							'negative'	=> array(1 => false, 0 => true, 2 => false)
						),
						array(
							'title'		=> "Орехи",
							'legend'	=> array(1 => "Полученные", 0 => "Потраченные", 2 => "Итог"),
							'negative'	=> array(1 => false, 0 => true, 2 => false)
						),
						array(
							'title'		=> "Жетоны",
							'legend'	=> array(0 => "Полученные", 1 => "Потраченные", 2 => "Итог"),
							'negative'	=> array(0 => false, 1 => true, 2 => false)
						)
					)
				),
				'average' => array(
					'id'		=> $id++,
					'title'		=> "Средний баланс",
					'description'	=> "Среднее количество орехов и монет у игрока",
					'graphs'	=> array(
						array(
							'title'		=> "Средний баланс (общий)",
							'legend'	=> array(0 => "Бесплатные монеты", 1 => "Орехи", 2 => "Платные монеты"),
							'split_axis'	=> array("0,2", "1")
						),
						array(
							'title'		=> "Средний баланс (платящие)",
							'legend'	=> array(0 => "Бесплатные монеты", 1 => "Орехи", 2 => "Платные монеты"),
							'split_axis'	=> array("0,2", "1")
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'resource_income' => array(
					'id'		=> $id++,
					'title'		=> "Получение ресурсов",
					'description'	=> "Получение игроками ресурсов по типу ресурса и событию",
					'graphs'	=> array(
						array(
							'title'		=> "Монеты",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Орехи",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Жетоны",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Мана",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Энергия",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Опыт",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Опыт шамана",
							'legend'	=> $this->resource_reasons
						)
					)
				),
				'resource_outcome' => array(
					'id'		=> $id++,
					'title'		=> "Расход ресурсов",
					'description'	=> "Расход игроками ресурсов по типу ресурса и событию",
					'graphs'	=> array(
						array(
							'title'		=> "Монеты",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Орехи",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Жетоны",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Мана",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Энергия",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Опыт",
							'legend'	=> $this->resource_reasons
						),
						array(
							'title'		=> "Опыт шамана",
							'legend'	=> $this->resource_reasons
						)
					)
				),
				"-",
				'sales_paying' => array(
					'id'		=> $id++,
					'title'		=> "Акции для платящих",
					'description'	=> "Количество получений и использований акций по типу Акции платящими пользователями и Акция на ману",
					'graphs'	=> array(
						array(
							'title'		=> "Получено",
							'legend'	=> $this->campaigns
						),
						array(
							'title'		=> "Использовано",
							'legend'	=> $this->campaigns
						),
						array(
							'title'		=> "Акция на ману",
							'legend'	=> array(0 => "Предложение покупки маны", 1 => "Быстрая покупка маны на раунде", 2 => "Покупка маны в магазине по акции"),
							'split_axis'	=> array("0", "1, 2")
						)
					)
				),
				'sales_nopaying' => array(
					'id'		=> $id++,
					'title'		=> "Акции для не платящих",
					'description'	=> "Количество получений и использований акций не платящими игроками по типу Акции",
					'graphs'	=> array(
						array(
							'title'		=> "Получено",
							'legend'	=> $this->campaigns
						),
						array(
							'title'		=> "Использовано",
							'legend'	=> $this->campaigns,
							'show_sumline'	=> true
						)
					)
				),
				"-",
				'actions' => array(
					'id'		=> $id++,
					'title'		=> "Действия",
					'description'	=> "Количество кликов кнопок и использования смайлов",
					'graphs'	=> array(
						array(
							'title'		=> "Кнопки в клиенте",
							'legend'	=> array(0 => "Открытий банка", 1 => "Кнопка Купить в банке", 2 => "Кнопка Разное в магазине", 3 => "Открытий магазина", 4 => "Закрыли магазин без покупки"),
							'split_axis'	=> array("0, 3, 4", "1", "2"),
							'legend_skip'	=> true
						),
						array(
							'title'		=> "Использование смайлов",
							'legend'	=> array(0 => "Смеюсь", 1 => "Улыбаюсь", 2 => "Смущаюсь", 3 => "Целую", 4 => "В отчаянии", 5 => "Сплю", 6 => "Удивлен", 7 => "Огорчен", 8 => "Плачу", 9 => "Злюсь", 10 => "Пасхальные: Смеюсь", 11 => "Пасхальные: Целую", 12 => "Пасхальные: Плачу", 13 => "Пасхальные: Запутался", 14 => "Пасхальные: Отчаяние", 15 => "Новый год: Смеюсь", 16 => "Новый год: Улыбаюсь", 17 => "Новый год: Смущаюсь", 18 => "Новый год: Целую", 19 => "Новый год: В отчаянии", 20 => "Новый год: Сплю", 21 => "Новый год: Удивлён", 22 => "Новый год: Огорчён", 23 => "Новый год: Плачу", 24 => "Новый год: Злюсь")
						)
					)
				),
				'reposts' => array(
					'id'		=> $id++,
					'title'		=> "Репосты",
					'description'	=> "Количество репостов новостей, достижений (превосходства) и уровней игрока, шамана",
					'graphs'	=> array(
						array(
							'title'		=> "Новостные",
							'legend'	=> array(1 => "Сундук", 5 => "Одежда скрэта", 15 => "Достижения", 60 => "Приключения (Квесты)", 62 => "Одежда шамана", 63 => "Первое сентября", 64 => "Распродажа старых вещей", 65 => "Новость: Чат", 66 => "Новость: Джокер", 67 => "Монетки за уровень", 68 => "Хэллоуин 2014!", 69 => "Золотой ВИП", 72 => "Ловец снов", 73 => "Еженедельные соревнования", 74 => "Костюм Чешира", 75 => "Lay's Max", 76 => "Скоро Новый Год", 77 => "VIP 50%", 80 => "Шаман стихий", 81 => "Ежедневный бонус", 82 => "Новогоднее улучшение", 83 => "VIP с бесконечной энергией", 84 => "Пламя дракоши", 85 => "Декорации летающих островов", 86 => "Оффер читосов", 87 => "Костюм Хани Лемон", 88 => "Золото лепрекона", 89 => "Декорации снежных хребтов", 90 => "Распродажа фараона", 91 => "Новый банк", 92 => "Декорации топей", 93 => "Костюм Беззубика", 94 => "Изменение режимов", 95 => "Первое апреля", 96 => "Костюм Пикачу", 97 => "Декорации аномальной зоны", 98 => "День победы", 99 => "Трагедия белок 2", 100 => "Вип статус", 101 => "Костюм Снежного барса", 102 => "Костюм Ассасина", 103 => "Зомби режим", 104 => "Костюм Броненосеца", 107 => "Костюм Сладкоежки"),
							'legend_skip'	=> true
						),
						array(
							'title'		=> "Уровни",
							'legend'	=> array(0 => "Получил уровень белки", 1 => "Получил уровень шамана"),
							'legend_skip'	=> true
						),
						array(
							'title'		=> "Достижения (превосходства)",
							'legend'	=> array(0 => "Количество")
						)
					)
				),
				'reposts_net' => array(
					'id'		=> $id++,
					'title'		=> "Репосты по сетям",
					'description'	=> "Количество показов окон репоста, репостов и переходов с репостов в приложение",
					'graphs'	=> array(
						array(
							'title'		=> "Показы диалогов",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Репосты",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Переходы с репостов",
							'legend'	=> $this->networks
						)
					)
				),
				'friends' => array(
					'id'		=> $id++,
					'title'		=> "Друзья",
					'description'	=> "Количество игроков с N приглашенных друзей достигших 7го уровня, Пригласи и Позови друга",
					'graphs'	=> array(
						array(
							'title'		=> "Количество игроков",
							'legend'	=> array(1 => "1 друг", 2 => "2 друга", 3 => "3 друга", 4 => "4 друга", 5 => "5 друзей", 6 => "6 друзей", 7 => "7 друзей", 8 => "8 друзей", 9 => "9+ друзей")
						),
						array(
							'title'		=> "Пригласи друга",
							'legend'	=> array(0 => "Всего приглашенных", 1 => "Достигли 7го уровня", 2 => "Нажатий кнопки Пригласить друга"),
							'split_axis'	=> array("0,1", "2")
						),
						array(
							'title'		=> "Позови друга",
							'legend'	=> array(0 => "Всего попыток", 1 => "Успешных", 2 => "Наград получено")
						)
					)
				),
				"-",
				'rpg_shaman' => array(
					'id'		=> $id++,
					'title'		=> "РПГ Шаман",
					'description'	=> "Шаманы по уровням, Активные ветки и баланс перьев",
					'graphs'	=> array(
						array(
							'title'		=> "Шаманы по уровням",
							'legend'	=> array(0 => "0-4", 1 => "5-9", 2 => "10-14", 3 => "15-19", 4 => "20-24", 5 => "25-29", 6 => "30-34", 7 => "35-39", 8 => "40-44", 9 => "45-50", 10 => "51")
						),
						array(
							'title'		=> "Активные ветки шамана",
							'legend'	=> array(0 => "Наставник", 1 => "Вожак", 2 => "Творец"),
							'legend_skip'	=> true
						),
						array(
							'title'		=> "Баланс перьев",
							'legend'	=> array(0 => "Всего перьев", 1 => "Потрачено перьев")
						)
					)
				),
				'rpg_magic' => array(
					'id'		=> $id++,
					'title'		=> "Магия шамана",
					'description'	=> "Количество использований магии шамана на локациях",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> $this->shaman_talents,
							'legend_menu'	=> array('menu' => $this->shaman_talents_menu)
						)
					)
				),
				'rpg_experience' => array(
					'id'		=> $id++,
					'title'		=> "Опыт шамана",
					'description'	=> "Получение опыта платящими и не платящими пользователями",
					'graphs'	=> array(
						array(
							'title'		=> "Платящие пользователи",
							'legend'	=> array(0 => "Опыта в минуту", 1 => "Опыта за сессию"),
							'split_axis'	=> array("0", "1")
						),
						array(
							'title'		=> "Неплатящие пользователи",
							'legend'	=> array(0 => "Опыта в минуту", 1 => "Опыта за сессию"),
							'split_axis'	=> array("0", "1")
						)
					)
				),
				'shaman' => array(
					'id'		=> $id++,
					'title'		=> "Выбор шамана",
					'description'	=> "Выбор нового шамана на раунде по типу и процент раундов с купленным шаманом по типу валюты",
					'graphs'	=> array(
						array(
							'title'		=> "Получения, количество",
							'legend'	=> array(0 => "Лучший по рейтингу", 1 => "Случайный", 2 => "Платный", 3 => "Первый на прошлом раунде")
						),
						array(
							'title'		=> "Платный шаман",
							'legend'	=> array(0 => "За орехи", 1 => "За монеты"),
							'split_axis'	=> array("0", "1"),
							'value_append'	=> array("%", "%")
						)
					)
				),
				"-",
				'magic' => array(
					'id'		=> $id++,
					'title'		=> "Использование магии",
					'description'	=> "Количество использований магии, среднее число краж магий Волшебниками, бонусы магии Лепрекона, использование магии костюмов и затраты маны",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "Невидимка", 1 => "Белка-молния", 2 => "Высокий прыжок", 3 => "Двойной прыжок", 4 => "Белка-летяга", 5 => "Цепкие лапки", 6 => "Белка-варвар", 7 => "Реинкарнация", 8 => "Телепортация", 9 => "Малыш"),
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Кражи",
							'legend'	=> array(0 => "Среднее"),
						),
						array(
							'title'		=> "Бонусы Костюма Лепрекона",
							'legend'	=> array(0 => "Орехи", 1 => "Монеты", 2 => "Мана", 3 => "Энергия", 4 => "Ничего")
						),
						array(
							'title'		=> "Магия одежды, количество",
							'legend'	=> $this->perks,
							'legend_menu'	=> array('menu' => $this->perks_menu, 'search' => true)
						),
						array(
							'title'		=> "Магия одежды, мана",
							'legend'	=> $this->perks,
							'legend_menu'	=> array('menu' => $this->perks_menu, 'search' => true)
						)
					)
				),
				'transform' => array(
					'id'		=> $id++,
					'title'		=> "Превращения",
					'description'	=> "Успешные и неуспешные превращения в шамана, зайца или дракона",
					'graphs'	=> array(
						array(
							'title'		=> "Шаман",
							'legend'	=> array(0 => "Успешные", 1 => "Неуспешные")
						),
						array(
							'title'		=> "Заяц",
							'legend'	=> array(0 => "Успешные", 1 => "Неуспешные")
						),
						array(
							'title'		=> "Дракон",
							'legend'	=> array(0 => "Успешные", 1 => "Неуспешные")
						)
					)
				),
				"-",
				'items_location' => array(
					'id'		=> $id++,
					'title'		=> "Коллекции по локациям",
					'description'	=> "Количество собранных, сгенерированных, полученных шаманом и успешно собранных элементов коллекций по локациям и соотношение данных",
					'graphs'	=> array(
						array(
							'title'		=> "Собрано",
							'legend'	=> $this->locations,
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Сгенерировано",
							'legend'	=> $this->locations,
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Донесли до дупла",
							'legend'	=> $this->locations,
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Получены шаманом",
							'legend'	=> $this->locations,
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Соотношение собранных к сгенерированным",
							'legend'	=> $this->locations,
							'value_append'	=> array(0 => "%", 1 => "%", 2 => "%", 3 => "%", 4 => "%", 9 => "%", 10 => "%", 13 => "%")
						)
					)
				),
				'collections' => array(
					'id'		=> $id++,
					'title'		=> "Сбор коллекций",
					'description'	=> "Сбор коллекций, обмен на Скрэта, Скрэтти и обмен элементов между игроками по локациям сбора",
					'graphs'	=> array(
						array(
							'title'		=> "Коллекции",
							'legend'	=> $this->collections,
							'show_sumline'	=> true,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "Обмен на скрэтта",
							'legend'	=> $this->trophy,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "Обмен между игроками",
							'legend'	=> $this->locations,
							'show_sumline'	=> true
						)
					)
				),
				'exchange' => array(
					'id'		=> $id++,
					'title'		=> "Поиск обмена коллекций",
					'description'	=> "Количество открытий окна обмена коллекций, обмен",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array("Открытие", "Обмен")
						)
					)
				),
				"-",
				'active' => array(
					'id'		=> $id++,
					'type'		=> "filled",
					'title'		=> "Активность",
					'description'	=> "Количество всех и платящих игроков по времени и количеству сессий в день",
					'graphs'	=> array(
						array(
							'title'		=> "Количеству минут в игре, все игроки",
							'legend'	=> array(0 => "0", 1 => "1", 2 => "2", 3 =>"3-5", 4 => "6-10", 5 => "11-20", 6 => "21-30", 7 => "31-60", 8 => "61+")
						),
						array(
							'title'		=> "Количеству игровых сессий, все игроки",
							'legend'	=> array(0 => "0", 1 => "1", 2 => "2", 3 =>"3-5", 4 => "6-10", 5 => "11-20", 6 => "21-30", 7 => "31-60", 8 => "61+")
						),
						array(
							'title'		=> "Количеству минут в игре, платящие",
							'legend'	=> array(0 => "0", 1 => "1", 2 => "2", 3 =>"3-5", 4 => "6-10", 5 => "11-20", 6 => "21-30", 7 => "31-60", 8 => "61+")
						),
						array(
							'title'		=> "Количеству игровых сессий, платящие",
							'legend'	=> array(0 => "0", 1 => "1", 2 => "2", 3 =>"3-5", 4 => "6-10", 5 => "11-20", 6 => "21-30", 7 => "31-60", 8 => "61+")
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'sessions_time' => array(
					'id'		=> $id++,
					'title'		=> "Среднее время сессий",
					'description'	=> "Среднее время сессии в минутах",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Общее", 1 => "VIP", 2 => "Платящие")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По уровням",
							'legend'	=> $this->level_groups
						)
					),
					'params'	=> array(
						'value_append'	=> " м."
					)
				),
				'sessions_count' => array(
					'id'		=> $id++,
					'title'		=> "Среднее количество сессий",
					'description'	=> "Среднее количество сессий на игрока",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Общее", 1 => "VIP", 2 => "Платящие")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По уровням",
							'legend'	=> $this->level_groups
						)
					)
				),
				"-",
				'clans' => array(
					'id'		=> $id++,
					'title'		=> "Кланы",
					'description'	=> "Создание, закрытие кланов и кланы превысившие лимит по опыту в день",
					'graphs'	=> array(
						array(
							'title'		=> "Создание/Закрытие кланов",
							'legend'	=> array(0 => "Создано", 1 => "Закрыто")
						),
						array(
							'title'		=> "Превысившие лимит",
							'legend'	=> array(0 => "Количество")
						)
					)
				),
				'experience' => array(
					'id'		=> $id++,
					'title'		=> "Опыт",
					'description'	=> "Количество полученного опыта и среднее количество опыта на одного игрока по уровням",
					'graphs'	=> array(
						array(
							'title'		=> "Получено опыта на уровень",
							'legend'	=> $this->level_groups
						),
						array(
							'title'		=> "В среднем опыта на игрока",
							'legend'	=> $this->level_groups
						)
					)
				),
				"-",
				'rating_location' => array(
					'id'		=> $id++,
					'title'		=> "Рейтинг локаций",
					'description'	=> "Рейтинг локаций на основе голосования игроков за карты",
					'graphs'	=> array(
						array(
							'title'		=> "Количество отрицательных голосов",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Количество положительных голосов",
							'legend'	=> $this->locations
						)
					)
				),
				'round_location' => array(
					'id'		=> $id++,
					'title'		=> "Раунды",
					'description'	=> "Среднее время длительности, общее количество, среднее число белок на раунд, количество успешных (хотя бы одна белка зашла в дупло) раундов и среднее число входов в дупло на раунд по локациям",
					'graphs'	=> array(
						array(
							'title'		=> "Время, минуты",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Количество раундов",
							'legend'	=> $this->locations,
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Белок на раунд, в среднем",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Успешные раунды",
							'legend'	=> $this->locations,
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Среднее число входов в дупло, на раунд",
							'legend'	=> $this->locations
						)
					)
				),
				'round_completion' => array(
					'id'		=> $id++,
					'title'		=> "Завершения раундов по локациям",
					'description'	=> "Процентное оношение отрицательных, положительных голосов, выходов живых и погибших белок, успешных завершений - к общему количеству игр",
					'graphs'	=> array(
						array(
							'title'		=> "% отрицательные голоса от количества игравших",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "% положительные голоса от количества игравших",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "% выходы живых игроков от количества игравших",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "% выходы погибших игроков от количества игравших",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "% успешных завершений (белка в дупле)",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "% успешных взятий ореха",
							'legend'	=> $this->locations
						)
					),
					'params'	=> array(
						'value_append'	=> "%"
					)
				),
				'death' => array(
					'id'		=> $id++,
					'title'		=> "Смерти",
					'description'	=> "Количество смертей и процент от общего числа заходов на раунд",
					'graphs'	=> array(
						array(
							'title'		=> "Количество смертей",
							'legend'	=> $this->death_reasons,
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Процент смертей",
							'legend'	=> $this->death_reasons,
							'value_append'	=> array("%", "%", "%", "%", "%", "%", "%", "%")
						)
					)
				),
				'mode_rating' => array(
					'id'		=> $id++,
					'title'		=> "Завершения раундов по режимам игры",
					'description'	=> "Общее количество отрицательных, положительных голосов, выходов живых и мертвых белок, успешных завершений и игр в целом по режимам",
					'graphs'	=> array(
						array(
							'title'		=> "Отрицательные голоса",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Положительные голоса",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Выходы живых игроков",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Выходы погибших игроков",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Сыграно игр всего",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Успешных завершений (белка в дупле)",
							'legend'	=> $this->location_mods
						),
						array(
							'title'		=> "Белка взяла орех",
							'legend'	=> $this->location_mods
						)
					)
				),
				"-",
				'support' => array(
					'id'		=> $id++,
					'title'		=> "Тех. поддержка",
					'description'	=> "Активность использования тех. поддержки игроками, количество удаленных карт по голосованию и количество автобанов пользователей",
					'graphs'	=> array(
						array(
							'title'		=> "Тех. поддержка",
							'legend'	=> array(0 => "Количество нажатий кнопки ТП", 1 => "Количество созданных диалогов", 2 => "Количество показов окна справки")
						),
						array(
							'title'		=> "Удаленные карты",
							'legend'	=> array(0 => "Количество")
						),
						array(
							'title'		=> "Автобан",
							'legend'	=> array(0 => "Отложенный автобан", 1 => "Автобан за быстрый сбор коллекций"),
							'split_axis'	=> array("0", "1")
						)
					)
				),
				'notifications' => array(
					'id'		=> $id++,
					'title'		=> "Напоминания",
					'description'	=> "Количество успешных и не успешных отправок напоминаний по соц. сетям и типам напоминаний",
					'graphs'	=> array(
						array(
							'title'		=> "Добавление по сетям",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Добавление по типам",
							'legend'	=> $this->notifications
						),
						array(
							'title'		=> "Отправка по сетям",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Отправка по типам",
							'legend'	=> $this->notifications
						),
						array(
							'title'		=> "Ошибки на сервере по сетям",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "Ошибки на сервере по типам",
							'legend'	=> $this->notifications
						),
						array(
							'title'		=> "Ошибки API сетей",
							'legend'	=> $this->networks
						)
					)
				)
			),
			'players' => array(
				'new' => array(
					'id'		=> $id++,
					'title'		=> "Новые игроки",
					'description'	=> "Количество игроков, только что установивших приложение и приглашённые другом в соцсети",
					'graphs'	=> array(
						array(
							'title'		=> "Игроки",
							'legend'	=> array(0 => "Игроки")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "Игроки по приглашениям, количество",
							'legend'	=> array(0 => "Приглашённые", 1 => "Достигшие 5-го уровня")
						)
					)
				),
				'new_referrer' => array(
					'id'		=> $id++,
					'title'		=> "Новые игроки по реферрерам",
					'description'	=> "Количество игроков только что установивших приложение по реферрерам соц сетей",
					'graphs'	=> array(
						array(
							'title'		=> "Facebook",
							'legend'	=> $this->referrers_fb
						)
					)
				),
				'subscription' => array(
					'id'		=> $id++,
					'title'		=> "Игроки с подпиской",
					'description'	=> "Количество и процент, относительно DAU, игроков с подпиской",
					'graphs'	=> array(
						array(
							'title'		=> "Игроки",
							'legend'	=> array(0 => "Количество", 1 => "Процент"),
							'split_axis'	=> array("0", "1"),
							'value_append'	=> array("", "%")
						),
					)
				),
				'bans' => array(
					'id'		=> $id++,
					'title'		=> "Баны",
					'description'	=> "Количество заблокированных пользователей",
					'graphs'	=> array(
						array(
							'title'		=> "Пользователи",
							'legend'	=> $this->reasons,
							'legend_skip'	=> true,
							'show_sumline'	=> true
						)
					)
				),
				'bans_paying' => array(
					'id'		=> $id++,
					'title'		=> "Баны платящих и неплатящих",
					'description'	=> "Количество заблокированных пользователей, которые сделали хоть один платёж и тех, кто не делал платежей",
					'graphs'	=> array(
						array(
							'title'		=> "Пользователи",
							'legend'	=> array("Неплатящие", "Платящие")
						)
					)
				),
				"-",
				'levels' => array(
					'id'		=> $id++,
					'type'		=> "filled",
					'title'		=> "Уровни игроков",
					'description'	=> "Разделение новых игроков по уровням",
					'graphs'	=> array(
						array(
							'title'		=> "Общий",
							'legend'	=> array(0 => "1", 1 => "2", 2 => "3", 3 => "4", 4 => "5", 5 => "6", 6 => "7", 7 => "8", 8 => "9", 9 => "10+")
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				'tutorial' => array(
					'id'		=> $id++,
					'title'		=> "Прохождение обучения",
					'description'	=> "Количество игроков по этапам обучения",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(1 => "1 - Новый игрок", 2 => "2 - Получен 1 уровень", 3 => "3 - Вход на летающие острова", 4 => "4 - Получен 3 уровень", 5 => "5 - Открыл шкатулку", 6 => "6 - Переход в гардероб", 7 => "7 - Одежда в гардеробе", 8 => "8 - Выход из домика", 9 => "9 - Вход на ЛО ", 10 => "10 - Получен 4 уровень", 11 => "11 - Битва", 12 => "12 - Школа", 13 => "13 - Магазин", 14 => "14 - Финальный текст", 15 => "15 - Магия", 16 => "16 - Мана", 17 => "17 - Завершено обучение")
						)
					),
					'cache'		=> false
				),
				'game_start' => array(
					'id'		=> $id++,
					'title'		=> "Начало игры",
					'description'	=> "Первые 11 раундов новых игроков",
					'graphs'	=> array(
						array(
							'title'		=> "Начали раунд",
							'legend'	=> array(0 => "Новые игроки", 1 => "1 раунд", 2 => "2 раунд", 3 => "3 раунд", 4 => "4 раунд", 5 => "5 раунд", 6 => "6 раунд", 7 => "7 раунд", 8 => "8 раунд", 9 => "9 раунд", 10 => "10 раунд", 11 => "11 раунд")
						),
						array(
							'title'		=> "Собрали орех",
							'legend'	=> array(0 => "Новые игроки", 1 => "1 раунд", 2 => "2 раунд", 3 => "3 раунд", 4 => "4 раунд", 5 => "5 раунд", 6 => "6 раунд", 7 => "7 раунд", 8 => "8 раунд", 9 => "9 раунд", 10 => "10 раунд", 11 => "11 раунд")
						),
						array(
							'title'		=> "Прошли раунд",
							'legend'	=> array(0 => "Новые игроки", 1 => "1 раунд", 2 => "2 раунд", 3 => "3 раунд", 4 => "4 раунд", 5 => "5 раунд", 6 => "6 раунд", 7 => "7 раунд", 8 => "8 раунд", 9 => "9 раунд", 10 => "10 раунд", 11 => "11 раунд")
						)
					),
					'cache'		=> false

				),
				'sandbox' => array(
					'id'		=> $id++,
					'title'		=> "Карты песочницы",
					'description'	=> "Активность новых игроков на картах песочницы",
					'graphs'	=> array(
						array(
							'title'		=> "Начали раунд",
							'legend'	=> $this->sandbox_maps
						),
						array(
							'title'		=> "Собрали орех",
							'legend'	=> $this->sandbox_maps
						),
						array(
							'title'		=> "Прошли раунд",
							'legend'	=> $this->sandbox_maps
						),
						array(
							'title'		=> "Выход живой белкой",
							'legend'	=> $this->sandbox_maps
						),
						array(
							'title'		=> "Выход мертвой белкой",
							'legend'	=> $this->sandbox_maps
						)
					),
					'cache'		=> false
				),
				'tutorial_level' => array(
					'id'		=> $id++,
					'title'		=> "Обучающий уровень",
					'description'	=> "Активность новых игроков на карте обучающего уровня",
					'graphs'	=> array(
						array(
							'title'		=> "По этапам",
							'legend'	=> $this->tutorial_steps
						),
						array(
							'title'		=> "Смерть на каждом этапе",
							'legend'	=> $this->tutorial_steps
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					)
				),
				'training' => array(
					'id'		=> $id++,
					'title'		=> "Обучающие последовательности",
					'description'	=> "Количество игроков, начавших и завершившивших обучающие последовательности",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> $this->training
						)
					)
				),
				"-",
				'retention' => array(
					'id'		=> $id++,
					'title'		=> "Возвращения",
					'description'	=> "Возвращение игроков через N дней",
					'graphs'	=> array(
						array(
							'title'		=> "%",
							'legend'	=> array(0 => "1d", 1 => "1d+", 2 => "2d+", 7 => "7d+", 30 => "30d+")
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				'retention_paying' => array(
					'id'		=> $id++,
					'title'		=> "Возвращения платящих",
					'description'	=> "Возвращение платящих игроков через N дней",
					'graphs'	=> array(
						array(
							'title'		=> "%",
							'legend'	=> array(1 => "1d+", 2 => "2d+", 7 => "7d+", 30 => "30d+")
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				'retention_net' => array(
					'id'		=> $id++,
					'title'		=> "Возвращения по сетям",
					'description'	=> "Возвращение игроков через N дней по соц. сетям",
					'graphs'	=> array(
						array(
							'title'		=> "1d",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "1d+",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "2d+",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "7d+",
							'legend'	=> $this->networks
						),
						array(
							'title'		=> "30d+",
							'legend'	=> $this->networks
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				'retention_age' => array(
					'id'		=> $id++,
					'title'		=> "Возвращения по возрасту",
					'description'	=> "Возвращение игроков через N дней по возрасту",
					'graphs'	=> array(
						array(
							'title'		=> "1d",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "1d+",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "2d+",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "7d+",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "30d+",
							'legend'	=> $this->ages
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				'retention_sex'	=> array(
					'id'		=> $id++,
					'title'		=> "Возвращения по полу",
					'description'	=> "Возвращение игроков через N дней по полу",
					'graphs'	=> array(
						array(
							'title'		=> "1d",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "1d+",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "2d+",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "7d+",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "30d+",
							'legend'	=> $this->sex
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				'retention_tag' => array(
					'id'		=> $id++,
					'title'		=> "Возвращения по тегам",
					'description'	=> "Воввращения игроков через N дней по тегам (маркированные пользователи)",
					'graphs'	=> array(
						array(
							'title'		=> "1d",
							'legend'	=> $this->user_tags
						),
						array(
							'title'		=> "1d+",
							'legend'	=> $this->user_tags
						),
						array(
							'title'		=> "2d+",
							'legend'	=> $this->user_tags
						),
						array(
							'title'		=> "7d+",
							'legend'	=> $this->user_tags
						),
						array(
							'title'		=> "30d+",
							'legend'	=> $this->user_tags
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "average"),
						'legend_skip'	=> true
					),
					'cache'		=> false
				),
				'retention_ref_fb' => array(
					'id'		=> $id++,
					'title'		=> "Возвращения по реферрерам Facebook",
					'description'	=> "Возвращение игроков через N дней по реферрерам Facebook",
					'graphs'	=> array(
						array(
							'title'		=> "1d+",
							'legend'	=> $this->referrers_fb
						),
						array(
							'title'		=> "2d+",
							'legend'	=> $this->referrers_fb
						),
						array(
							'title'		=> "7d+",
							'legend'	=> $this->referrers_fb
						),
						array(
							'title'		=> "30d+",
							'legend'	=> $this->referrers_fb
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "average")
					),
					'cache'		=> false
				),
				"-",
				'life_time' => array(
					'id'		=> $id++,
					'title'		=> "Время жизни игрока",
					'description'	=> "Количество игроков по дням с момента регистрации посетивших проект за последние 2 и 3 недели",
					'graphs'	=> array(
						array(
							'title'		=> "2 недели",
							'legend'	=> $this->life_time_periods
						),
						array(
							'title'		=> "3 недели",
							'legend'	=> $this->life_time_periods
						)
					)
				),
				'average_life_time' => array(
					'id'		=> $id++,
					'title'		=> "Среднее время жизни игрока",
					'description'	=> "Среднее время жизни игрока на день посещения (новые игроки не учитываются) в днях",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Общее")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags,
							'legend_skip'	=> true
						)
					),
					'params'	=> array(
						'value_append'	=> " д.",
						'indicator'	=> array('type' => "average"),
						'show_sums'	=> true
					)
				),
				"-",
				'paying_day' => array(
					'id'		=> $id++,
					'title'		=> "Платящие за день",
					'description'	=> "Процент пользователей, которые платили хотя бы раз в день",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Процент", 1 => "Количество"),
							'value_append'	=> array(0 => "%", 1 => ""),
							'split_axis'	=> array("0", "1")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						)
					),
					'params'	=> array(
						'value_append'	=> "%",
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'paying_month' => array(
					'id'		=> $id++,
					'title'		=> "Платящие за месяц",
					'description'	=> "Процент пользователей, которые платили хотя бы раз в месяц",
					'graphs'	=> array(
						array(
							'title'		=> "Общее",
							'legend'	=> array(0 => "Процент", 1 => "Количество"),
							'value_append'	=> array(1 => ""),
							'split_axis'	=> array("0", "1")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'value_append'	=> "%",
						'indicator'	=> array('type' => "fixed")
					)
				),
				'paying_groups' => array(
					'id'		=> $id++,
					'type'		=> "filled",
					'title'		=> "Платящие по суммам",
					'description'	=> "Количество игроков, заплативших сумму N за последние 30 дней в игре",
					'graphs'	=> array(
						array(
							'title'		=> "Количество игроков",
							'legend'	=> array(0 => "Меньше 25", 1 => "25-49", 2 => "50-99", 3 => "100-149", 4 => "150-200", 5 => "200-299", 6 => "300-499", 7 => "500-699", 8 => "700-999", 9 => "1000-1499", 10 => "1500-2999", 11 => "3000+")
						)
					),
					'params'	=> array(
						'show_sums'	=> false,
						'indicator'	=> array('type' => "average")
					)
				),
				'paying_counts' => array(
					'id'		=> $id++,
					'title'		=> "Платящие по количеству",
					'description'	=> "Количество игроков по количеству платежей за все время в проекте на момент совершения платежа (Номер платежа игрока)",
					'graphs'	=> array(
						array(
							'title'		=> "Количество игроков",
							'legend'	=> array(1 => "1", 2 => "2", 3 => "3", 4 => "4", 5 => "5-9", 6 => "10-14", 7 => "15-39", 8 => "40-69", 9 => "70-99", 10 => "100-499", 11 => "500-999", 12 => "1000+")
						)
					)
				),
				"-",
				'gifts' => array(
					'id'		=> $id++,
					'title'		=> "Подарки",
					'description'	=> "Получение N-го подарка игроками от друзей и автоматически, удаление подарков, открытие подарков",
					'graphs'	=> array(
						array(
							'title'		=> "Подарки от друзей",
							'legend'	=> array(0 => "1-й подарок", 1 => "2-й подарок", 2 => "3-й подарок", 3 => "4-й подарок", 4 => "5-й подарок", 5 => "6-й подарок", 6 => "7-й подарок")
						),
						array(
							'title'		=> "Подарки автоматические",
							'legend'	=> array(0 => "1-й подарок", 1 => "2-й подарок", 2 => "3-й подарок", 3 => "4-й подарок", 4 => "5-й подарок", 5 => "6-й подарок", 6 => "7-й подарок")
						),
						array(
							'title'		=> "Удаление подарков",
							'legend'	=> array("Удалено")
						),
						array(
							'title'		=> "Открытие подарков",
							'legend'	=> $this->gifts
						)
					)
				)
			),
			'quests' => array(
				'all' => array(
					'id'		=> $id++,
					'title'		=> "Все квесты",
					'description'	=> "Количество полученных, выполненных квестов и среднее время выполнения квестов",
					'graphs'	=> array(
						array(
							'title'		=> "Полученные",
							'legend'	=> $this->quests
						),
						array(
							'title'		=> "Выполненные",
							'legend'	=> $this->quests
						),
						array(
							'title'		=> "Время выпонения",
							'legend'	=> $this->quests,
							'value_append'	=> array(0 => " мин.", 1 => " мин.", 2 => " мин.", 3 => " мин.", 4 => " мин.", 5 => " мин.", 6 => " мин.", 7 => " мин.", 8 => " мин.", 9 => " мин.", 10 => " мин.", 11 => " мин.", 12 => " мин.", 13 => " мин.", 100 => " мин.", 101 => " мин.", 102 => " мин.", 103 => " мин.", 104 => " мин.", 105 => " мин.", 106 => " мин.", 107 => " мин.", 108 => " мин.", 109 => " мин.", 110 => " мин.", 111 => " мин.", 112 => " мин.", 113 => " мин.")
						)
					),
				),
				'maps' => array(
					'id'		=> $id++,
					'title'		=> "Карты",
					'description'	=> "Количество собранных карт всего и прохождение карт",
					'graphs'	=> array(
						array(
							'title'		=> "Сбор карт",
							'legend'	=> array(0 => "Собрано всего")
						),
						array(
							'title'		=> "Карты",
							'legend'	=> array(-1 => "Пройдено с сундуком", 0 => "Всего карт пройдено", 1 => "Не хватило времени", 2 => "Белка умерла", 3 => "Вышел с раунда", 4 => "Отключился от игры")
						)
					),
				),
				'awards' => array(
					'id'		=> $id++,
					'title'		=> "Награды",
					'description'	=> "Количество платных и бесплатных открытий сундуков, количество собранных костюмов",
					'graphs'	=> array(
						array(
							'title'		=> "Сундуки",
							'legend'	=> array(0 => "Открыли платно", 1 => "Открыли бесплатно")
						),
						array(
							'title'		=> "Костюм фараона",
							'legend'	=> array(0 => "Собрано костюмов")
						)
					)
				),
				'exchange' => array(
					'id'		=> $id++,
					'title'		=> "Обмен пазлов",
					'description'	=> "Количество обменов пазлов пользователями по номеру пазла",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "1", 1 => "2", 2 => "3", 3 => "4", 4 => "5", 5 => "6", 6 => "7", 7 => "8", 8 => "9", 9 => "10", 10 => "11", 11 => "12", 12 => "13", 13 => "14", 14 => "15", 15 => "16")
						)
					)
				),
				'puzzle' => array(
					'id'		=> $id++,
					'title'		=> "Получение пазлов",
					'description'	=> "Количество полученных пазлов за квесты/репосты",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "Простой квест", 1 => "Сложный квест", 2 => "Репост")
						)
					)
				),
				"-",
				'friend_achieve' =>array(
					'id'		=> $id++,
					'title'		=> "Квест друзей",
					'description'	=> "Количество игроков, достигших определённого уровня за приглашённых друзей",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(1 => "1 уровень", 2 => "2 уровень", 3 => "3 уровень", 4 => "4 уровень", 5 => "5 уровень")
						)
					)
				),
				'viral' => array(
					'id'		=> $id++,
					'title'		=> "Виральный квест",
					'description'	=> "Соотношение отмен к активациям и количество активаций/отмен виральных квестов за день, по типу квеста",
					'graphs'	=> array(
						array(
							'title'		=> "Соотношение",
							'legend'	=> array(0 => "Мне нравится", 1 => "Добавить в меню", 2 => "Группа", 3 => "Рассказать друзьям", 4 => "Уведомления", 5 => "Транслировать в статус")
						),
						array(
							'title'		=> "Активированные",
							'legend'	=> array(0 => "Мне нравится", 1 => "Добавить в меню", 2 => "Группа", 3 => "Рассказать друзьям", 4 => "Уведомления", 5 => "Транслировать в статус")
						),
						array(
							'title'		=> "Отмененные",
							'legend'	=> array(0 => "Мне нравится", 1 => "Добавить в меню", 2 => "Группа", 3 => "Рассказать друзьям", 4 => "Уведомления", 5 => "Транслировать в статус")
						)
					)
				),
				'viral_new' => array(
					'id'		=> $id++,
					'title'		=> "Виральный квест по шагам",
					'description'	=> "Выполнение вирального квеста по шагам, кол-во игроков на каждом этапе",
					'graphs'	=> array(
						array(
							'title'		=> "Игроки",
							'legend'	=> $this->viral_steps
						)
					)
				)
			),
			'achievements' => array(
				'total' => array(
					'id'		=> $id++,
					'title'		=> "Категории",
					'description'	=> "Общее количество достижений по категориям",
					'graphs'	=> array(
						array(
							'title'		=> "Достижения, количество",
							'legend'	=> array(0 => "Общие", 1 => "Собиратель", 2 => "Шаман", 3 => "Эпичные")
						)
					),
					'params' => array(
						'show_sumline'	=> true
					)
				),
				'common' => array(
					'id'		=> $id++,
					'title'		=> "Общие достижения",
					'description'	=> "Количество достижений в категории «Общее»",
					'graphs'	=> array(
						array(
							'title'		=> "Достижения, количество",
							'legend'	=> $this->achieves_all['common']
						)
					),
					'params' => array(
						'show_sumline'	=> true
					)
				),
				'consumer' => array(
					'id'		=> $id++,
					'title'		=> "Собиратель",
					'description'	=> "Количество достижений в категории «Собиратель»",
					'graphs'	=> array(
						array(
							'title'		=> "Достижения, количество",
							'legend'	=> $this->achieves_all['consumer']
						)
					),
					'params' => array(
						'show_sumline'	=> true
					)
				),
				'shaman' => array(
					'id'		=> $id++,
					'title'		=> "Шаман",
					'description'	=> "Количество достижений в категории «Шаман»",
					'graphs'	=> array(
						array(
							'title'		=> "Достижения, количество",
							'legend'	=> $this->achieves_all['shaman']
						)
					),
					'params' => array(
						'show_sumline'	=> true
					)
				),
				'epic' => array(
					'id'		=> $id++,
					'title'		=> "Эпичные",
					'description'	=> "Количество достижений в категории «Эпичные»",
					'graphs'	=> array(
						array(
							'title'		=> "Достижения, количество",
							'legend'	=> $this->achieves_all['epic']
						)
					),
					'params' => array(
						'show_sumline'	=> true
					)
				)
			),
			'events' => array(
				'easter' => array(
					'id'		=> $id++,
					'title'		=> "Пасхальный эвент 2013",
					'description'	=> "Сбор элементов по заданию и уровни куличей",
					'graphs'	=> array(
						array(
							'title'		=> "Элементы",
							'legend'	=> array(0 => "Правильные", 1 => "Не правильные", 2 => "Штрафные")
						),
						array(
							'title'		=> "Уровни куличей",
							'legend'	=> array(1 => "Мелкий куличик", 2 => "Средний кулич", 3 => "Большой кулич", 4 => "Огромный кулич", 5 => "Гигантский кулич", 6 => "Безмерный куличище")
						)
					),
					'end_date'	=> "2013-05-17"
				),
				'childrens_day' => array(
					'id'		=> $id++,
					'title'		=> "День защиты детей",
					'description'	=> "Сбор элементов и обмен на мегаблок",
					'graphs'	=> array(
						array(
							'title'		=> "Элементы",
							'legend'	=> array(13 => "Красный блок (Вещь)", 14 => "Синий блок", 15 => "Зелёный блок", 16 => "Желтый блок", 17 => "Фиолетовый блок")
						),
						array(
							'title'		=> "Обмен",
							'legend'	=> array(1 => "Мегаблок (Вещь)")
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					),
					'end_date'	=> "2013-12-11"
				),
				'helloween' => array(
					'id'		=> $id++,
					'title'		=> "Хеллоуин",
					'description'	=> "Выигрыши в лотерею, костюма Вампира, получение конфет, использование магии костюма Вампира, посты на стену о выйгрыше в лотерею",
					'graphs'	=> array(
						array(
							'title'		=> "Выигрыши в лотерею, количество",
							'legend'	=> array(0 => "Орехи", 1 => "Мана", 2 => "Опыт", 3 => "Конфеты", 4 => "Фантик", 5 => "Голова вампира", 6 => "Мантия вампира", 7 => "Пиджак вампира", 8 => "Штаны вампира", 9 => "Летучая мышь", 10 => "Бомба")
						),
						array(
							'title'		=> "Выигрыши полного костюма Вампира, количество",
							'legend'	=> array(0 => "Выигрыши")
						),
						array(
							'title'		=> "Получение конфет, количество",
							'legend'	=> array(0 => "В раундах", 1 => "В банке", 2 => "В лотерее")
						),
						array(
							'title'		=> "Использование магии костюма Вампира, количество",
							'legend'	=> array(0 => "Количество")
						),
						array(
							'title'		=> "Посты на стену, количество",
							'legend'	=> array(0 => "Орехи", 1 => "Мана", 2 => "Опыт", 3 => "Конфеты", 4 => "Фантик", 5 => "Голова вампира", 6 => "Мантия вампира", 7 => "Пиджак вампира", 8 => "Штаны вампира", 9 => "Летучая мышь", 10 => "Бомба")
						)
					),
					'end_date'	=> "2013-11-11"
				),
				'birthday' => array(
					'id'		=> $id++,
					'title'		=> "День рождения Трагедии Белок",
					'description'	=> "Количество полученных наград в день рождения Трагедии Белок",
					'graphs'	=> array(
						array(
							'title'		=> "Получения, количество",
							'legend'	=> array(0 => "Количество")
						)
					),
					'end_date'	=> "2013-11-12"
				),
				'ny2014' => array(
					'id'		=> $id++,
					'title'		=> "Новый год 2014",
					'description'	=> "Выигрыши в рулетку, костюма Волка, получение снежинок, использование магии костюма Волка, посты на стену о выйгрыше в рулетке, покупка одежды, мозайка",
					'graphs'	=> array(
						array(
							'title'		=> "Выигрыши в рулетку, количество",
							'legend'	=> array(0 => "Орехи", 1 => "Мана", 2 => "Опыт", 3 => "Снежинки", 4 => "Рейтинг", 5 => "Шапка волка", 6 => "Куртка волка", 7 => "Штаны волка", 8 => "Посох волка", 9 => "Аксессуар волка", 10 => "Бомба")
						),
						array(
							'title'		=> "Посты на стену по рулетке, количество",
							'legend'	=> array(0 => "Орехи", 1 => "Мана", 2 => "Опыт", 3 => "Снежинки", 4 => "Рейтинг", 5 => "Шапка волка", 6 => "Куртка волка", 7 => "Штаны волка", 8 => "Посох волка", 9 => "Аксессуар волка", 10 => "Бомба")
						),
						array(
							'title'		=> "Получение снежинок по локациям, количество",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Получение снежинок по типу получения, количество",
							'legend'	=> array(0 => "В раундах", 1 => "В банке", 2 => "В рулетке")
						),
						array(
							'title'		=> "Баланс снежинок",
							'legend'	=> array(0 => "Приход", 1 => "Расход", 2 => "Остаток"),
							'negative'	=> array(0 => false, 1 => true, 2 => false)
						),
						array(
							'title'		=> "Использование новогодней магии, количество",
							'legend'	=> array(0 => "Заморозка коллекций", 1 => "Метель")
						),
						array(
							'title'		=> "Количество выйгрышей костюма волка",
							'legend'	=> array(0 => "Количество")
						)
					),
					'end_date'	=> "2014-02-12"
				),
				'olympiad' => array(
					'id'		=> $id++,
					'title'		=> "Олимпиада 03.14",
					'description'	=> "Типовые показатели для эвента",
					'graphs'	=> array(
						array(
							'title'		=> "Выигрыши в рулетку, количество",
							'legend'	=> array(0 => "Орехи", 1 => "Мана", 2 => "Опыт", 3 => "Кольца", 4 => "Билеты", 5 => "Шапка сноубордиста", 6 => "Шарф сноубордиста", 7 => "Штаны сноубордиста", 8 => "Рубашка сноубордиста", 9 => "Сноуборд", 10 => "Бомба")
						),
						array(
							'title'		=> "Посты на стену по рулетке, количество",
							'legend'	=> array(0 => "Орехи", 1 => "Мана", 2 => "Опыт", 3 => "Кольца", 4 => "Билеты", 5 => "Шапка сноубордиста", 6 => "Шарф сноубордиста", 7 => "Штаны сноубордиста", 8 => "Рубашка сноубордиста", 9 => "Сноуборд", 10 => "Бомба")
						),
						array(
							'title'		=> "Получение колец по локациям, количество",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Получение колец по типу получения, количество",
							'legend'	=> array(43 => "Рулетка", 24 => "В банке", 42 => "В раундах")
						),
						array(
							'title'		=> "Количество выйгрышей полного костюма сноубордиста",
							'legend'	=> array(0 => "Количество")
						),
						array(
							'title'		=> "Баланс колец",
							'legend'	=> array(0 => "Приход", 1 => "Расход", 2 => "Остаток"),
							'negative'	=> array(0 => false, 1 => true, 2 => false)
						),
						array(
							'title'		=> "Баланс билетов",
							'legend'	=> array(0 => "Приход", 1 => "Расход", 2 => "Остаток"),
							'negative'	=> array(0 => false, 1 => true, 2 => false)
						),
						array(
							'title'		=> "Количество посещений для каждого режима",
							'legend'	=> array(0 => "Бег с препятствиями", 1 => "Скоростной спуск", 2=> "Парашютный спорт", 3 => "Альпинизм", 4 => "Вышибалы", 5 => "Плавание", 6 => "Спортивное ориентирование", 7 => "Прыжки в высоту", 8 => "Биатлон", 9 => "Гребля")
						),
						array(
							'title'		=> "Получение билетов по типу получения, количество",
							'legend'	=> array(1 => "Покупка костюма", 3 => "Покупка в магазине", 2 => "Ежедневный бонус", 24 => "Платёж", 43 => "Олимпийская лотерея")
						),
						array(
							'title'		=> "Количество лайков для каждого режима",
							'legend'	=> array(0 => "Бег с препятствиями", 1 => "Скоростной спуск", 2=> "Парашютный спорт", 3 => "Альпинизм", 4 => "Вышибалы", 5 => "Плавание", 6 => "Спортивное ориентирование", 7 => "Прыжки в высоту", 8 => "Биатлон", 9 => "Гребля")
						),
						array(
							'title'		=> "Количество дислайков для каждого режима",
							'legend'	=> array(0 => "Бег с препятствиями", 1 => "Скоростной спуск", 2=> "Парашютный спорт", 3 => "Альпинизм", 4 => "Вышибалы", 5 => "Плавание", 6 => "Спортивное ориентирование", 7 => "Прыжки в высоту", 8 => "Биатлон", 9 => "Гребля")
						),
						array(
							'title'		=> "Время ожидания начала раунда",
							'legend'	=> array(0 => "Меньше 10 сек.", 1 => "10-60 сек.", 2 => "Больше 60 сек.")
						),
						array(
							'title'		=> "Покупка олимпийской одежды, сумма",
							'legend'	=> array(311 => "Олимпийская кепка", 312 => "Олимпийская шапка", 313 => "Олимпийская куртка", 314 => "Олимпийские штаны", 315 => "Олимпийская медаль", 316 => "Олимпийский факел", 317 => "Шапка чемпиона", 318 => "Шарф чемпиона", 319 => "Штаны чемпиона", 320 => "Рубашка чемпиона", 321 => "Сноуборд")
						),
						array(
							'title'		=> "Покупка олимпийской одежды, количество",
							'legend'	=> array(311 => "Олимпийская кепка", 312 => "Олимпийская шапка", 313 => "Олимпийская куртка", 314 => "Олимпийские штаны", 315 => "Олимпийская медаль", 316 => "Олимпийский факел", 317 => "Шапка чемпиона", 318 => "Шарф чемпиона", 319 => "Штаны чемпиона", 320 => "Рубашка чемпиона", 321 => "Сноуборд")
						)
					),
					'end_date'	=> "2014-03-14"
				),
				'easter_2014' => array(
					'id'		=> $id++,
					'title'		=> "Пасхальный эвент 2014",
					'description'	=> "Баланс яиц, сбор яиц по локациям, успешные/неуспешные улучшения яиц, количество битв на яйцах и предложения дуэлей",
					'graphs'	=> array(
						array(
							'title'		=> "Баланс яиц",
							'legend'	=> array(0 => "Полученные", 1 => "Потраченные", 2 => "Итог"),
							'negative'	=> array(0 => false, 1 => true, 2 => false)
						),
						array(
							'title'		=> "Количество яиц по локациям",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Успешные улучшения яиц, по уровням яиц",
							'legend'	=> array(0 => "Обменов всего", 1 => "1 уровень", 2 => "2 уровень", 3 => "3 уровень", 4 => "4 уровень", 5 => "5 уровень", 6 => "6 уровень")
						),
						array(
							'title'		=> "Неудачные улучшения яиц, по уровням яиц",
							'legend'	=> array(1 => "1 уровень", 2 => "2 уровень", 3 => "3 уровень", 4 => "4 уровень", 5 => "5 уровень")
						),
						array(
							'title'		=> "Победы по уровням",
							'legend'	=> array(1 => "1 уровень", 2 => "2 уровень", 3 => "3 уровень", 4 => "4 уровень", 5 => "5 уровень", 6 => "6 уровень")
						),
						array(
							'title'		=> "Проигрыши по уровням",
							'legend'	=> array(1 => "1 уровень", 2 => "2 уровень", 3 => "3 уровень", 4 => "4 уровень", 5 => "5 уровень", 6 => "6 уровень")
						)
					),
					'end_date'	=> "2014-05-05"
				),
				"-",
				'september_elements' => array(
					'id'		=> $id++,
					'title'		=> "1 сентября 2014: сбор элементов",
					'description'	=> "Количество собранных, созданных и соотношение элементов по локациям",
					'graphs'	=> array(
						array(
							'title'		=> "Собрано",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Создано",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Соотношение",
							'legend'	=> $this->locations
						)
					),
					'end_date'	=> "2014-09-08"
				),
				'september_rolls' => array(
					'id'		=> $id++,
					'title'		=> "1 сентября 2014: рулетка",
					'description'	=> "Количество кручений рулетки, полученные награды и костюмы",
					'graphs'	=> array(
						array(
							'title'		=> "Рулетка",
							'legend'	=> array(0 => "Количество попыток получения приза", 1 => "Количество сборов 5 уникальных предметов")
						),
						array(
							'title'		=> "Награды",
							'legend'	=> array(1 => "Опыт + шаманский опыт", 2 => "Орехи", 3 => "Энергия", 4 => "Мана", 5 => "Подписка", 6 => "Вип", 7 => "Редкий элемент коллекции", 8 => "Рейтинг", 9 => "Золото", 10 => "Одежда")
						),
						array(
							'title'		=> "Костюмы",
							'legend'	=> array(0 => "Вампир", 1 => "Волк", 2 => "Пасхальная звезда", 3 => "Кубик лего")
						)
					),
					'end_date'	=> "2014-09-08"
				),
				"-",
				'halloween_2014_elements' => array(
					'id'		=> $id++,
					'title'		=> "Хеллоуин 2014: сбор элементов",
					'description'	=> "Количество собранных, созданных и соотношение элементов по локациям",
					'graphs'	=> array(
						array(
							'title'		=> "Собрано",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Создано",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Соотношение",
							'legend'	=> $this->locations
						)
					),
					'end_date'	=> "2014-11-10"
				),
				'halloween_2014_rolls' => array(
					'id'		=> $id++,
					'title'		=> "Хеллоуин 2014: рулетка",
					'description'	=> "Количество полученных наград и сбор костюма",
					'graphs'	=> array(
						array(
							'title'		=> "Награды",
							'legend'	=> array(1 => "Опыт + шаманский опыт", 2 => "Орехи", 3 => "Энергия", 4 => "Мана", 5 => "Подписка", 6 => "Вип", 7 => "Редкий элемент коллекции", 8 => "Рейтинг", 9 => "Золото", 10 => "Одежда"),
							'show_sumline'	=> true
						),
						array(
							'title'		=> "Сбор костюма Вендиго",
							'legend'	=> array(0 => "Облачение Вендиго", 1 => "Хвост Вендиго", 2 => "Накидка Вендиго", 3 => "Меховые штаны", 4 => "Клык Вендиго (Всего костюмов)")
						)
					),
					'end_date'	=> "2014-11-10"
				),
				"-",
				'olympiad_maps' => array(
					'id'		=> $id++,
					'title'		=> "Олимпиада: Карты",
					'description'	=> "Среднее количество секунд, потраченных на прохождение карт и среднее количество очков полученных за прохождение карт",
					'graphs'	=> array(
						array(
							'title'		=> "Секунд на карту",
							'legend'	=> $this->olympiad_maps,
							'legend_menu'	=> array('menu' => $this->olympiad_maps_menu),
							'value_append'	=> " с.",
							'show_sums'	=> false
						),
						array(
							'title'		=> "Очков на карту",
							'legend'	=> $this->olympiad_maps,
							'legend_menu'	=> array('menu' => $this->olympiad_maps_menu),
							'show_sums'	=> false
						)
					)
				),
				'olympiad_games' => array(
					'id'		=> $id++,
					'title'		=> "Олимпиада: Игры",
					'description'	=> "Количество заходов на олимпиаду по каждому режиму - обычными и VIP пользователями",
					'graphs'	=> array(
						array(
							'title'		=> "Обычные игроки",
							'legend'	=> $this->olympiad_maps
						),
						array(
							'title'		=> "VIP игроки",
							'legend'	=> $this->olympiad_maps
						)
					)
				),
				"-",
				'ny2015_snowflakes' => array(
					'id'		=> $id++,
					'title'		=> "Новый год 2015: Снежинки",
					'description'	=> "Отношение получено/создано снежинок, cнежинки по способу получения",
					'graphs'	=> array(
						array(
							'title'		=> "Получено/создано снежинок",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Снежинки по способу получения",
							'legend'	=> array(1 => "Куплено в магазине", 3 => "Локации", 4 => "Новогодний режим", 5 => "Подарок от друзей", 6 => "За Елку"),
							'legend_skip'	=> true
						),
						array(
							'title'		=> "Среднее на игрока",
							'legend'	=> array(0 => "Количество")
						)
					)
				),
				'ny2015_games' => array(
					'id'		=> $id++,
					'title'		=> "Новый год 2015: Снеговик",
					'description'	=> "Игры в новогоднем режиме: общее количество, количество неудачных, среднее время раунда",
					'graphs'	=> array(
						array(
							'title'		=> "Всего сыграли раундов",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Неудачные раунды",
							'legend'	=> $this->locations
						),
						array(
							'title'		=> "Среднее время раунда",
							'legend'	=> $this->locations
						)
					)
				),
				'ny2015_tree' => array(
					'id'		=> $id++,
					'title'		=> "Новый год 2015: Елка",
					'description'	=> "Полученные/отправленные подарки, собранные елки",
					'graphs'	=> array(
						array(
							'title'		=> "Количество ресурсов",
							'legend'	=> array(0 => "VIP", 1 => "Подписка", 2 => "Мана", 3 => "Снежинки", 4 => "Игрушки на елку")
						),
						array(
							'title'		=> "Наборы 100 снежинок",
							'legend'	=> array(0 => "Количество")
						),
						array(
							'title'		=> "Принято/отправлено подарков",
							'legend'	=> array(0 => "Отправлено", 1 => "Принято")
						),
						array(
							'title'		=> "Среднее количество шаров на игрока",
							'legend'	=> array(0 => "Количество")
						)
					)
				),
				'ny2015_enchantment' => array(
					'id'		=> $id++,
					'title'		=> "Новый год 2015: Зачарование",
					'description'	=> "Успешние/неуспешные попытки зачарования",
					'graphs'	=> array(
						array(
							'title'		=> "Успешние/неудачные попытки",
							'legend'	=> array(0 => "Неудача", 1 => "Успех")
						),
						array(
							'title'		=> "Амулеты по уровням",
							'legend'	=> array(0 => "Первый", 1 => "Второй", 2 => "Третий", 3 => "Четвертый", 4 => "Пятый", 5 => "Шестой", 6 => "Седьмой", 7 => "Восьмой", 8 => "Девятый", 9 => "Десятый", 10 => "Одиннадцатый", 11 => "Двенадцатый", 12 => "Тринадцатый", 13 => "Четырнадцатый", 14 => "Пятнадцатый")
						)
					)
				)
			),
			'api' => array(
				'loading' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Загрузка приложения",
					'description'	=> "Количество уникальных загрузок приложения, по этапам загрузки для соц сетей",
					'graphs'	=> array(
						array(
							'title'		=> "ВКонтакте",
							'legend'	=> array(0 => "Начали загрузку приложения", 1 => "Загрузили приложение", 2 => "Загрузился игрок")
						),
						array(
							'title'		=> "Одноклассники",
							'legend'	=> array(0 => "Начали загрузку приложения", 1 => "Загрузили приложение", 2 => "Загрузился игрок")
						),
						array(
							'title'		=> "МойМир",
							'legend'	=> array(0 => "Начали загрузку приложения", 1 => "Загрузили приложение", 2 => "Загрузился игрок")
						),
						array(
							'title'		=> "Facebook",
							'legend'	=> array(0 => "Начали загрузку приложения", 1 => "Загрузили приложение", 2 => "Загрузился игрок")
						),
						array(
							'title'		=> "Фотострана",
							'legend'	=> array(0 => "Начали загрузку приложения", 1 => "Загрузили приложение", 2 => "Загрузился игрок")
						),
						array(
							'title'		=> "Belkigame.ru",
							'legend'	=> array(0 => "Начали загрузку приложения", 1 => "Загрузили приложение", 2 => "Загрузился игрок")
						)
					)
				),
				'loading_time' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Время загрузки приложения",
					'description'	=> "Количество загрузок приложения по времени в секундах",
					'graphs'	=> array(
						array(
							'title'		=> "Загрузили приложение",
							'legend'	=> array(0 => "Из кэша браузера", 2 => "2", 3 =>"3", 4 => "4", 5 => "5-10", 6 => "11-20", 7 => "21-30", 8 => "31-60", 9 => "61+")
						),
						array(
							'title'		=> "Загрузился игрок",
							'legend'	=> array(0 => "0", 1 => "1", 2 => "2", 3 =>"3", 4 => "4", 5 => "5-10", 6 => "11-20", 7 => "21-30", 8 => "31-60", 9 => "61+")
						)
					)
				),
				'loading_net' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Загрузка игрока",
					'description'	=> "Количество успешных/неуспешных авторизаций и загрузок по социальным сетям",
					'graphs'	=> array(
						array(
							'title'		=> "ВКонтакте",
							'legend'	=> array(0 => "Игрок авторизовался", 1 => "Игрок уже авторизован", 2 => "Ошибка авторизации", 3 => "Игрок заблокирован", 4 => "Версия приложения неверная")
						),
						array(
							'title'		=> "Одноклассники",
							'legend'	=> array(0 => "Игрок авторизовался", 1 => "Игрок уже авторизован", 2 => "Ошибка авторизации", 3 => "Игрок заблокирован", 4 => "Версия приложения неверная")
						),
						array(
							'title'		=> "МойМир",
							'legend'	=> array(0 => "Игрок авторизовался", 1 => "Игрок уже авторизован", 2 => "Ошибка авторизации", 3 => "Игрок заблокирован", 4 => "Версия приложения неверная")
						),
						array(
							'title'		=> "Facebook",
							'legend'	=> array(0 => "Игрок авторизовался", 1 => "Игрок уже авторизован", 2 => "Ошибка авторизации", 3 => "Игрок заблокирован", 4 => "Версия приложения неверная")
						),
						array(
							'title'		=> "Фотострана",
							'legend'	=> array(0 => "Игрок авторизовался", 1 => "Игрок уже авторизован", 2 => "Ошибка авторизации", 3 => "Игрок заблокирован", 4 => "Версия приложения неверная")
						),
						array(
							'title'		=> "Belkigame.ru",
							'legend'	=> array(0 => "Игрок авторизовался", 1 => "Игрок уже авторизован", 2 => "Ошибка авторизации", 3 => "Игрок заблокирован", 4 => "Версия приложения неверная")
						)
					)
				),
				"-",
				'fullscreen' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Полноэкранный режим",
					'description'	=> "Количество переключений в полноэкранный режим (full screen)",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "Общее", 1 => "Уникальные")
						)
					)
				),
				'daily_quests' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Ежедневные задания",
					'description'	=> "Количество нажатий на кнопку начала выполнения ежедневного задания",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "Общее", 1 => "Уникальные", 2 => "Процент от DAU")
						)
					)
				),
				"-",
				'fps' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Максимальный FPS",
					'description'	=> "Уникальное количество хитов (~пользователей) по количеству кадров в секунду, выбран наилучший показатель в течении игры",
					'graphs'	=> array(
						array(
							'title'		=> "FPS",
							'legend'	=> array(0 => "0-15", 1 => "16-25", 2 => "25+")
						)
					)
				),
				'fps_average' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Усредненный FPS",
					'description'	=> "Уникальное количество хитов (~пользователей) по количеству кадров в секунду, выбран средневзвешенный по времени фпс",
					'graphs'	=> array(
						array(
							'title'		=> "FPS",
							'legend'	=> array(0 => "0-9", 1 => "10-19", 2 => "20-29", 3 => "30+"),
							'legend_skip'	=> true
						)
					)
				),
				'lag' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Зависания игры",
					'description'	=> "Уникальное количество хитов (~пользователей) по проценту времени от игры в зависшем состоянии (fps < 10)",
					'graphs'	=> array(
						array(
							'title'		=> "Количество",
							'legend'	=> array(0 => "0-4%", 5 => "5-9%", 10 => "10-19%", 20 => "20-29%", 30 => "30-39%", 40 => "40-49%", 50 => "50-59%", 60 => "60-69%", 70 => "70-79%", 80 => "80-89%", 90 => "90-100%")
						)
					)
				),
				'acceleration' => array(
					'id'		=> $id++,
					'class'		=> "events",
					'title'		=> "Аппаратное ускорение",
					'description'	=> "Уникальное количество хитов (~пользователей) с включенным аппаратным ускорением",
					'graphs'	=> array(
						array(
							'title'		=> "Аппаратное ускорение",
							'legend'	=> array(0 => "Количество")
						)
					)
				)
			),
			'hidden' => array(
				'payments_all' => array(
					'id'		=> $id++,
					'title'		=> "Все платежи в рублях",
					'description'	=> "Сумма платежей в рублях",
					'graphs'	=> array(
						array(
							'title'		=> "Платежи",
							'legend'	=> array(0 => "Сумма")
						)
					),
					'hidden'	=> true
				),
				'payments_net' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по сетям в рублях",
					'description'	=> "Сумма платежей для каждой соц. сети в рублях",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->networks
						)
					),
					'params'	=> array(
						'legend_skip'	=> true
					),
					'hidden'	=> true
				),
				'payments_age' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по возрасту в рублях",
					'description'	=> "Сумма платежей для каждой возрастной группы в рублях",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->ages
						)
					),
					'hidden'	=> true
				),
				'payments_sex' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по полу в рублях",
					'description'	=> "Сумма платежей для каждого пола в рублях",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->sex
						)
					),
					'hidden'	=> true
				),
				'payments_tag' => array(
					'id'		=> $id++,
					'title'		=> "Платежи по тэгам в рублях",
					'description'	=> "Сумма платежей для маркированных пользователей в рублях",
					'graphs'	=> array(
						array(
							'title'		=> "Сумма",
							'legend'	=> $this->user_tags
						)
					),
					'hidden'	=> true
				),
				'counters_mau' => array(
					'id'		=> $id++,
					'title'		=> "MAU Последнего дня",
					'description'	=> "MAU на последний день месяца",
					'graphs'	=> array(
						array(
							'title'		=> "Общий",
							'legend'	=> array(0 => "Игроки")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags
						)
					),
					'hidden'	=> true
				),
				'paying_month' => array(
					'id'		=> $id++,
					'title'		=> "Платящие за месяц",
					'description'	=> "Количество платящих на каждый последний день месяца",
					'graphs'	=> array(
						array(
							'title'		=> "Общий",
							'legend'	=> array(0 => "Игроки")
						),
						array(
							'title'		=> "По сетям",
							'legend'	=> $this->networks,
							'legend_skip'	=> true
						),
						array(
							'title'		=> "По возрасту",
							'legend'	=> $this->ages
						),
						array(
							'title'		=> "По полу",
							'legend'	=> $this->sex
						),
						array(
							'title'		=> "По тегам",
							'legend'	=> $this->user_tags
						)
					),
					'hidden'	=> true
				)
			),
			'apipath' => array(
				'common' => array(
					'id'		=> $id++,
					'title'		=> "Уникальные посетители и события",
					'description'	=> "Количество уникальных посетителей и событий по определенным путям событий",
					'graphs'	=> array(
						array(
							'title'		=> "Посетители и события",
							'legend'	=> array()
						)
					),
					'hidden'	=> true,
					'params'	=> array(
						'show_sums'	=> false
					)
				)
			)
		);
	}

	/**
	 * Функции индикаторов
	 */
	public static function arpu_indicator($Analytics, $report, $periods, $graph, $type)
	{
		$data = array();

		while (list($key, $offsets) = each($periods))
			$data[$key] = array('value' => 0, 'month_days' => $offsets['month_days']);

		switch ($graph)
		{
			case 0:
				$path = "hidden_payments_all";
				break;
			case 1:
				$path = "hidden_payments_net";
				break;
			case 2:
				$path = "hidden_payments_age";
				break;
			case 3:
				$path = "hidden_payments_sex";
				break;
			case 4:
				$path = "hidden_payments_tag";
				break;
		}

		$result = $Analytics->DB->get_filtered_cache($report['service'], $path, 0, $type, $report['date_begin'], $report['date_end']);
		while ($row = $result->fetch())
		{
			$time = $row['time'];

			reset($periods);
			while (list($key, $offsets) = each($periods))
			{
				if (!($time >= $offsets['min'] && $time <= $offsets['max']))
					continue;

				$data[$key]['value'] += $row['value'];
			}
		}

		$current = date("Y.m") === date("Y.m", $report['date_end']);
		$mau = array();

		$result = $Analytics->DB->get_filtered_cache($report['service'], "counters_mau", $graph, $type, $report['date_begin'], $report['date_end']);
		while ($row = $result->fetch())
		{
			$time = $row['time'];

			reset($periods);
			while (list($key, $offsets) = each($periods))
			{
				if (!($time >= $offsets['min'] && $time <= $offsets['max']))
					continue;

				if ($offsets['month_days'] !== 30)
					$row['value'] = $row['value'] / 30 * $offsets['month_days'];

				$mau[$key] = $row['value'];
			}
		}

		if ($current === true)
		{
			if (isset($mau[0]) && $mau[0] != 0)
				$data[0]['diff'] = $data[0]['value'] / date("d", time() - 86400) * date("t") / $mau[0];

			$mau[0] = 0;

			$result = $Analytics->DB->get_filtered_cache($report['service'], "hidden_counters_mau", $graph, $type, $report['date_end'], $report['date_end']);
			while ($row = $result->fetch())
				$mau[0] = $row['value'];
		}

		while (list($key, $values) = each($data))
		{
			if (!isset($mau[$key]))
			{
				$data[$key]['value'] = 0;
				continue;
			}
			if ($mau[$key] == 0)
			{
				$data[$key]['value'] = 0;
				continue;
			}

			$data[$key]['value'] = round($values['value'] / $mau[$key], 2);
		}

		return $data;
	}

	public static function arppu_indicator($Analytics, $report, $periods, $graph, $type)
	{
		$data = array();

		while (list($key, $offsets) = each($periods))
			$data[$key] = array('value' => 0, 'month_days' => $offsets['month_days']);

		switch ($graph)
		{
			case 0:
				$path = "hidden_payments_all";
				break;
			case 1:
				$path = "hidden_payments_net";
				break;
			case 2:
				$path = "hidden_payments_age";
				break;
			case 3:
				$path = "hidden_payments_sex";
				break;
		}

		$result = $Analytics->DB->get_filtered_cache($report['service'], $path, 0, $type, $report['date_begin'], $report['date_end']);
		while ($row = $result->fetch())
		{
			$time = $row['time'];

			reset($periods);
			while (list($key, $offsets) = each($periods))
			{
				if (!($time >= $offsets['min'] && $time <= $offsets['max']))
					continue;

				$data[$key]['value'] += $row['value'];
			}
		}

		$paying = array();

		$result = $Analytics->DB->get_filtered_cache($report['service'], "hidden_paying_month", $graph, $type, $report['date_begin'], $report['date_end']);
		while ($row = $result->fetch())
		{
			$time = $row['time'];

			reset($periods);
			while (list($key, $offsets) = each($periods))
			{
				if (!($time >= $offsets['min'] && $time <= $offsets['max']))
					continue;

				$paying[$key] = $row['value'];
			}
		}

		if (date("Y.m") === date("Y.m", $report['date_end']))
		{
			$last_day = mktime(0, 0, 0, date("n"), date("d") - 1);

			$result = $Analytics->DB->get_filtered_cache($report['service'], "players_paying_month", $graph, ($graph == 0 ? 1 : $type), $last_day, $last_day + 86399);
			if ($row = $result->fetch())
			{
				if ($graph != 0)
				{
					$result = $Analytics->DB->get_filtered_cache($report['service'], "counters_mau", $graph, $type, $last_day, $last_day + 86399);
					if ($mau = $result->fetch())
						$row['value'] = $mau['value'] / 100 * $row['value'];
				}

				$data[0]['diff'] = $data[0]['value'] / date("d", time() - 86400) * date("t") / $row['value'];
			}
		}

		while (list($key, $values) = each($data))
		{
			if (!isset($paying[$key]))
			{
				$data[$key]['value'] = 0;
				continue;
			}
			if ($paying[$key] == 0)
			{
				$data[$key]['value'] = 0;
				continue;
			}

			$data[$key]['value'] = round($values['value'] / $paying[$key], 2);
		}

		return $data;
	}

	/**
	 * Платежи
	 */
	public function payments_all($cache_date)
	{
		$result = $this->DB->payments_all($cache_date);
		$data = $this->simple_data($result, array(0 => "sum", 1 => "count"));

		return array($data);
	}

	public function payments_candles($cache_date)
	{
		$data = array();

		$result = $this->DB->payments_candles($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$hour = $row['hour'];

			if (!isset($data[$date]))
				$data[$date] = array();
			$data[$date][$hour] = $row;
		}

		$open = 0;
		$first = true;

		$candles = array();
		while (list($date, $hours) = each($data))
		{
			$close = 0;

			$sums = array();
			while (list($hour, $values) = each($hours))
			{
				$close += $values['sum'];
				$sums[] = $values['sum'];
			}

			sort($sums);

			$count = count($sums);
			if ($count > 4)
			{
				$sums = array_slice($sums, 2, $count - 4);
				$count -= 4;
			}

			$low = 0;
			$high = 0;

			$average_count = $count * 1 / 2;

			if ($average_count != 0)
			{
				for ($i = 0; $i < $average_count; $i++)
					$low += $sums[$i];
				$low = intval($low * 24 / $average_count);

				for ($i = $count - 1; $i >= $average_count; $i--)
					$high += $sums[$i];
				$high = intval($high * 24 / $average_count);
			}
			else
			{
				$low = $close;
				$high = $close;
			}

			if ($first)
				$open = $close;

			$days = $this->date_diff($date, $cache_date);
			if ($days >= 0)
			{
				$candles[] = array('date' => $date, 'type' => 0, 'value' => $open);
				$candles[] = array('date' => $date, 'type' => 1, 'value' => $close);
				$candles[] = array('date' => $date, 'type' => 2, 'value' => $low);
				$candles[] = array('date' => $date, 'type' => 3, 'value' => $high);
			}

			$open = $close;
			$first = false;
		}

		return array($candles);
	}

	public function payments_specific($cache_date)
	{
		$data = array('sum' => array(), 'count' => array());
		$box = array();
		$offers = array();

		$result = $this->DB->payments_specific($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$offer = $row['offer'];
			$balance = $row['balance'];

			switch ($offer)
			{
				case self::OfferBox_60:
				case self::OfferBox_100_1:
				case self::OfferBox_100_2:
				case self::OfferBox_100_3:
				case self::OfferBox_300_1:
				case self::OfferBox_300_2:
				case self::OfferBox_300_3:
				case self::OfferBox_200_1:
					if (!isset($box[$date]))
						$box[$date] = array('sum' => 0, 'count' => 0);

					$box[$date]['sum'] += $row['sum'];
					$box[$date]['count'] += $row['count'];
					break;
				case self::OfferNone:
					$index = $this->get_payment_index($balance);
					if (!isset($data['sum'][$date."-".$index]))
					{
						$data['sum'][$date."-".$index] = array('date' => $date, 'type' => $index, 'value' => 0);
						$data['count'][$date."-".$index] = array('date' => $date, 'type' => $index, 'value' => 0);
					}

					$data['sum'][$date."-".$index]['value'] += $row['sum'];
					$data['count'][$date."-".$index]['value'] += $row['count'];
					break;
				default:
					if (!isset($offers[$date]))
						$offers[$date] = array('sum' => 0, 'count' => 0);

					$offers[$date]['sum'] += $row['sum'];
					$offers[$date]['count'] += $row['count'];
					break;
			}
		}

		$data['sum'] = array_values($data['sum']);
		$data['count'] = array_values($data['count']);

		while (list($date, $values) = each($offers))
		{
			$data['sum'][] = array('date' => $date, 'type' => -2, 'value' => $values['sum']);
			$data['count'][] = array('date' => $date, 'type' => -2, 'value' => $values['count']);
		}

		while (list($date, $values) = each($box))
		{
			$data['sum'][] = array('date' => $date, 'type' => -1, 'value' => $values['sum']);
			$data['count'][] = array('date' => $date, 'type' => -1, 'value' => $values['count']);
		}

		return array($data['sum'], $data['count']);
	}

	public function payments_offers($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->payments_offers($cache_date);
		while ($row = $result->fetch())
		{
			$sum[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['sum']);
			$count[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	/**
	 * Сбор данных для отчёта Платежи/Бандлы
	 *
	 * @param string $cache_dateДата Y-m-d, с которой начинать сбор данных
	 * @return array Готовый массив данных для записи в кеш аналитики
	 */
	public function payments_bundles($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->payments_offers($cache_date);
		while ($row = $result->fetch())
		{
			if (!isset($this->bundles[$row['data']]))
				continue;

			$sum[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['sum']);
			$count[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function payments_hourly($cache_date)
	{
		return $this->payments_type($cache_date, "hourly");
	}

	public function payments_net($cache_date)
	{
		return $this->payments_type($cache_date, "net");
	}

	public function payments_age($cache_date)
	{
		return $this->payments_type($cache_date, "age");
	}

	public function payments_sex($cache_date)
	{
		return $this->payments_type($cache_date, "sex");
	}

	public function payments_tag($cache_date)
	{
		return $this->payments_type($cache_date, "tag");
	}

	public function payments_first($cache_date)
	{
		$result = $this->DB->payments_first($cache_date, $cache_date);
		$data = $this->simple_data($result, array(0 => "sum", 1 => "count", 2 => "average"));

		return array($data);
	}

	public function payments_repeated($cache_date)
	{
		$result = $this->DB->payments_repeated($cache_date, $cache_date);
		$data = $this->simple_data($result, array(0 => "sum", 1 => "count", 2 => "average"));

		return array($data);
	}

	public function payments_newbies($cache_date)
	{
		$result = $this->DB->payments_newbies($cache_date);
		$data = $this->simple_data($result, array(0 => "sum", 1 => "count"));

		return array($data);
	}

	public function payments_day_first($cache_date)
	{
		$data = array();

		$result = $this->DB->payments_day_first();
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_period_index($row['days']);

			if (!isset($data[$date]))
				$data[$date] = array('0d' => 0, '2d' => 0, '8d' => 0, '15d' => 0, '31d' => 0, 'count' => 0);
			$point = &$data[$date];

			$point[$type.'d'] += $row['count'];
			$point['count'] += $row['count'];
		}

		$all = array();
		$counts = array();

		while (list($date, $values) = each($data))
		{
			$day = &$values['count'];

			$all[] = array('date' => $date, 'type' => 0, 'value' => round($values['0d'] * 100 / $day, 2));
			$all[] = array('date' => $date, 'type' => 2, 'value' => round($values['2d'] * 100 / $day, 2));
			$all[] = array('date' => $date, 'type' => 8, 'value' => round($values['8d'] * 100 / $day, 2));
			$all[] = array('date' => $date, 'type' => 15, 'value' => round($values['15d'] * 100 / $day, 2));
			$all[] = array('date' => $date, 'type' => 31, 'value' => round($values['31d'] * 100 / $day, 2));

			$counts[] = array('date' => $date, 'type' => 0, 'value' => $values['0d']);
			$counts[] = array('date' => $date, 'type' => 2, 'value' => $values['2d']);
			$counts[] = array('date' => $date, 'type' => 8, 'value' => $values['8d']);
			$counts[] = array('date' => $date, 'type' => 15, 'value' => $values['15d']);
			$counts[] = array('date' => $date, 'type' => 31, 'value' => $values['31d']);
		}

		return array($all, $counts);
	}

	public function payments_day_next($cache_date)
	{
		$sum = array();
		$count = array();
		$dates = array();

		$result = $this->DB->payments_day_next();
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$uid = $row['type']."-".$row['net_id'];

			if (!isset($dates[$uid]))
			{
				$dates[$uid] = $date;
				continue;
			}

			$days = $this->date_diff($date, $dates[$uid]);
			$type = $this->get_period_index($days);

			if (!isset($sum[$date."-".$type]))
				$sum[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$point1 = &$sum[$date."-".$type];

			if (!isset($count[$date."-".$type]))
				$count[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$point2 = &$count[$date."-".$type];

			$point1['value'] += $row['value'];
			$point2['value'] += 1;

			$dates[$uid] = $date;
		}

		$sum = array_values($sum);
		$count = array_values($count);

		return array($sum, $count);
	}

	public function payments_bonus($cache_date)
	{
		$result = $this->DB->payments_bonus($cache_date);
		$data = $this->simple_data($result, array(0 => "sum", 1 => "count"));

		return array($data);
	}

	/**
	 * Финансы
	 */
	public function finance_revenue($cache_date)
	{
		$data = array();
		$data_all = array();

		$result = $this->DB->finance_arpu_net($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$net = $row['net'];
			$prices = $this->get_revenue($date);

			if (!isset($prices[$net]))
				continue;
			$row['sum'] = round($row['sum'] * $prices[$net], 2);

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data[$date."-".$type]['value'] += $row['sum'];

			if (!isset($data_all[$date]))
				$data_all[$date] = array('date' => $date, 'type' => 0, 'value' => 0);
			$data_all[$date]['value'] += $row['sum'];
		}

		$data = array_values($data);
		$data_all = array_values($data_all);

		return array($data_all, $data);
	}

	public function finance_arpu($cache_date)
	{
		list($all, $net) = $this->finance_arpu_type($cache_date, "net");
		$age = $this->finance_arpu_type($cache_date, "age");
		$sex = $this->finance_arpu_type($cache_date, "sex");
		$tag = $this->finance_arpu_type($cache_date, "tag");

		return array($all, $net, $age, $sex, $tag);
	}

	public function finance_arppu($cache_date)
	{
		list($all, $net) = $this->finance_arppu_type($cache_date, "net");
		$age = $this->finance_arppu_type($cache_date, "age");
		$sex = $this->finance_arppu_type($cache_date, "sex");
		$tag = $this->finance_arppu_type($cache_date, "tag");

		return array($all, $net, $age, $sex, $tag);
	}

	public function finance_ltv($cache_date)
	{
		list($all, $net) = $this->finance_ltv_type($cache_date, "net");
		$age = $this->finance_ltv_type($cache_date, "age");
		$sex = $this->finance_ltv_type($cache_date, "sex");
		$tag = $this->finance_ltv_type($cache_date, "tag");

		return array($all, $net, $age, $sex, $tag);
	}

	public function finance_ltv_period_all($cache_date)
	{
		return $this->finance_ltv_period_data($cache_date, "all");
	}

	public function finance_ltv_period_paying($cache_date)
	{
		return $this->finance_ltv_period_data($cache_date, "paying");
	}

	/**
	 * Покупки
	 */
	public function buyings_coins($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->buyings_coins($cache_date);
		while ($row = $result->fetch())
		{
			$sum[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['value']);
			$count[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function buyings_nuts($cache_date)
	{
		$maps = array();

		$result = $this->DB->buyings_maps($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$price = 200;

			$days = $this->date_diff($date, "2013-04-25");
			if ($days < 0)
				$price = 500;

			$maps[$date] = array('count' => $row['value'], 'sum' => $row['value'] * $price);
		}

		$sum = array();
		$count = array();

		$result = $this->DB->buyings_nuts($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			$sum[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
			$count[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['count']);

			if ((!isset($sum[$date."--1"]) || !isset($count[$date."--1"])) && isset($maps[$date]))
			{
				$sum[$date."--1"] = array('date' => $date, 'type' => -1, 'value' => $maps[$date]['sum']);
				$count[$date."--1"] = array('date' => $date, 'type' => -1, 'value' => $maps[$date]['count']);
			}
		}

		$sum = array_values($sum);
		$count = array_values($count);

		return array($sum, $count);
	}

	public function buyings_clothes($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->buyings_packages($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($row['coins'] == 0)
				continue;

			$sum[] = array('date' => $date, 'type' => $type, 'value' => $row['coins']);
			$count[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
		}

		$result = $this->DB->buyings_clothes($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = ($row['data'] * -1) - 1;

			if ($row['coins'] == 0)
				continue;

			$sum[] = array('date' => $date, 'type' => $type, 'value' => $row['coins']);
			$count[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function buyings_clothes_day($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->buyings_packages_day($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($row['coins'] == 0)
				continue;

			$sum[] = array('date' => $date, 'type' => $type, 'value' => $row['coins']);
			$count[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function buyings_clothes_week($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->buyings_packages_week($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($row['coins'] == 0)
				continue;

			$sum[] = array('date' => $date, 'type' => $type, 'value' => $row['coins']);
			$count[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function buyings_clothes_month($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->buyings_packages_month($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($row['coins'] == 0)
				continue;

			$sum[] = array('date' => $date, 'type' => $type, 'value' => $row['coins']);
			$count[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function buyings_clothes_net($cache_date)
	{
		$result = $this->DB->buyings_clothes_net($cache_date);

		return array($this->type_data($result));
	}

	public function buyings_clothes_prolongation($cache_date)
	{
		$data = array(array());

		$result = $this->DB->buyings_clothes_prolongation($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = ($row['data'] & 0xFFFFFFFF) / 86400;
			$key = $date."-".$type;

			if (!isset($data[0][$key]))
				$data[0][$key] = array('date' => $date, 'type' => $type, 'value' => 0);

			$data[0][$key]['value'] += $row['value'];
		}

		$data[0] = array_values($data[0]);

		return $data;
	}

	public function buyings_shaman($cache_date)
	{
		$sum_nuts = array();
		$count_nuts = array();

		$result = $this->DB->buyings_shaman_nuts($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($this->shaman_items[$type]) || $row['nuts'] == 0)
				continue;

			if (!isset($sum_nuts[$date."-".$type]) || !isset($count_nuts[$date."-".$type]))
			{
				$sum_nuts[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
				$count_nuts[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			}

			$sum_nuts[$date."-".$type]['value'] += $row['nuts'];
			$count_nuts[$date."-".$type]['value'] += $row['count'];
		}

		$sum_coins = array();
		$count_coins = array();

		$result = $this->DB->buyings_shaman_coins($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($this->shaman_items[$type]) || $row['coins'] == 0)
				continue;

			if (!isset($sum_coins[$date."-".$type]))
			{
				$sum_coins[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
				$count_coins[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			}

			$sum_coins[$date."-".$type]['value'] += $row['coins'];
			$count_coins[$date."-".$type]['value'] += $row['count'];
		}

		$sum_nuts = array_values($sum_nuts);
		$count_nuts = array_values($count_nuts);
		$sum_coins = array_values($sum_coins);
		$count_coins = array_values($count_coins);

		return array($sum_nuts, $count_nuts, $sum_coins, $count_coins);
	}

	public function buyings_subscription($cache_date)
	{
		$sum = array();
		$count = array();
		$types_merge = array(1 => 0, 2 => 1, 4 => 2);

		$result = $this->DB->buyings_subscription($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($types_merge[$type]))
				continue;

			$type = $types_merge[$type];

			$sum[] = array('date' => $date, 'type' => $type, 'value' => $row['sum']);
			$count[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function buyings_subscription_power($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->buyings_subscription_power($cache_date);
		while ($row = $result->fetch())
		{
			$sum[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['sum']);
			$count[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function buyings_goldencup($cache_date)
	{
		$gathering = 331;
		$with_goldencup = 333;
		$with_goldencup_data = array();
		$sums = array();
		$missing = array();

		$result = $this->DB->buyings_goldencup($cache_date);
		while ($row = $result->fetch())
		{
			if ($row['data'] == $with_goldencup)
				$with_goldencup_data[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['value']);
			else
				$sums[$row['date'].$row['data']] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['value']);
		}

		while (list($key, $val) = each($with_goldencup_data))
		{
			if (!isset($sums[$val['date'].$gathering]['value']))
				continue;

			$missing_val = $val['value'] - $sums[$val['date'].$gathering]['value'];
			$missing[] = array('date' => $val['date'], 'type' => 0, 'value' => $missing_val);
			$missing[] = array('date' => $val['date'], 'type' => 1, 'value' => ($missing_val * 12));
		}

		$players = $this->type_data($this->DB->players_goldencup($cache_date));

		return array(array_values($sums), $missing, $players);
	}

	public function buyings_vip($cache_date)
	{
		$data = array(0 => array(), 1 => array(), 2 => array());

		$result = $this->DB->buyings_vip($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$paid = $row['paid'];
			$type = $row['type'];

			if (!isset($data[$paid]))
				continue;

			$data[$paid][] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return $data;
	}

	public function buyings_decoration($cache_date)
	{
		$sum_coins = array();
		$count_coins = array();
		$sum_nuts = array();
		$count_nuts = array();

		$result = $this->DB->buyings_decoration($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($row['currency'] == 1)
			{
				$sum_coins[] = array('date' => $date, 'type' => $type, 'value' => $row['coins']);
				$count_coins[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
				continue;
			}

			$sum_nuts[] = array('date' => $date, 'type' => $type, 'value' => $row['nuts']);
			$count_nuts[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
		}

		return array($sum_coins, $count_coins, $sum_nuts, $count_nuts);
	}

	public function buyings_quests_map($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->buyings_quests_map($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			$sum[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
			$count[] = array('date' => $date, 'type' => $type, 'value' => $row['count']);
		}

		return array($sum, $count);
	}

	public function buyings_rpg_talents($cache_date)
	{
		$sum = array();
		$count = array();

		$result = $this->DB->buyings_rpg_talents($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = floor($row['data'] / 10);
			$level = $row['data'] * -1;

			if ($level == 0)
			{
				$this->Log->warning("Unexpected level at {date}");
				continue;
			}

			if ($row['is_sum'] == 1)
			{
				if (!isset($sum[$date."-".$type]))
					$sum[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
				if (!isset($sum[$date."-".$level]))
					$sum[$date."-".$level] = array('date' => $date, 'type' => $level, 'value' => 0);

				$sum[$date."-".$type]['value'] += $row['value'];
				$sum[$date."-".$level]['value'] += $row['value'];
				continue;
			}

			if (!isset($count[$date."-".$type]))
				$count[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			if (!isset($count[$date."-".$level]))
				$count[$date."-".$level] = array('date' => $date, 'type' => $level, 'value' => 0);

			$count[$date."-".$type]['value'] += $row['value'];
			$count[$date."-".$level]['value'] += $row['value'];
		}

		return array($sum, $count);
	}

	public function buyings_clan_location($cache_date)
	{
		$data = array();
		$types_merge = array(1 => 2, 2 => 1, 4 => 3, 13 => 4);

		$result = $this->DB->buyings_clan_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$location = $row['location'] >> 8;
			$gamemode = $row['mode'];

			if (!isset($data[0][$date."-".$location]))
				$data[0][$date."-".$location] = array('date' => $date, 'type' => $location, 'value' => 0);

			$data[0][$date."-".$location]['value'] += $row['value'];

			if (!isset($types_merge[$location]))
				continue;

			$chart = $types_merge[$location];

			reset($this->location_mods);
			while (list($mode) = each($this->location_mods))
			{
				if (($gamemode & (1 << $mode)) === 0)
					continue;

				if (!isset($data[$chart][$date."-".$mode]))
					$data[$chart][$date."-".$mode] = array('date' => $date, 'type' => $mode, 'value' => 0);

				$data[$chart][$date."-".$mode]['value'] += $row['value'];
			}
		}

		while (list($key) = each($data))
			$data[$key] = array_values($data[$key]);

		return $data;
	}

	public function buyings_clan_totem($cache_date)
	{
		$result = $this->DB->buyings_clan_totems($cache_date);
		$totem = $this->type_data($result);

		$result = $this->DB->buyings_clan_coins($cache_date);
		$coins = $this->type_data($result);

		$result = $this->DB->buyings_clan_nuts($cache_date);
		$nuts = $this->type_data($result);

		return array($totem, $coins, $nuts);
	}

	/**
	 * Счётчики
	 */
	public function counters_online($cache_date)
	{
		$all = array();

		$result = $this->DB->counters_online_all($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];

			$all[] = array('date' => $date, 'type' => 0, 'value' => $row['max']);
			$all[] = array('date' => $date, 'type' => 1, 'value' => $row['min']);
		}

		$result = $this->DB->counters_online_net($cache_date);
		$net = $this->type_data($result);

		$result = $this->DB->counters_online_age($cache_date);
		$age = $this->type_data($result);

		$result = $this->DB->counters_online_sex($cache_date);
		$sex = $this->type_data($result);

		return array($all, $net, $age, $sex);
	}

	public function counters_dau_referrer($cache_date)
	{
		$fb = array();

		$result = $this->DB->counters_dau_referrer($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (isset($this->referrers_fb[$type]))
				$fb[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return array($fb);
	}

	public function counters_dau_source($cache_date)
	{
		$fb = array();

		$result = $this->DB->counters_dau_source($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (isset($this->referrers_fb[$type]))
				$fb[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return array($fb);
	}

	public function counters_online_location($cache_date)
	{
		$max = array();
		$min = array();

		$result = $this->DB->counters_online_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			$max[] = array('date' => $date, 'type' => $type, 'value' => $row['max']);
			$min[] = array('date' => $date, 'type' => $type, 'value' => $row['min']);
		}

		return array($max, $min);
	}

	public function counters_dau($cache_date)
	{
		$result = $this->DB->counters_dau_all($cache_date);
		$all = $this->type_data($result);

		$result = $this->DB->counters_dau_net($cache_date);
		$net = $this->type_data($result);

		$result = $this->DB->counters_dau_age($cache_date);
		$age = $this->type_data($result);

		$result = $this->DB->counters_dau_sex($cache_date);
		$sex = $this->type_data($result);

		$result = $this->DB->counters_dau_tag($cache_date);
		$tag = $this->type_data($result);

		$result = $this->DB->counters_dau_level($cache_date);
		$level = $this->counters_dau_level($result);

		$result = $this->DB->counters_dau_locations($cache_date);
		$locations = $this->type_data($result);

		$result = $this->DB->counters_dau_locations_hard($cache_date);
		$locations_hard = $this->type_data($result);

		$days = array();

		$result = $this->DB->counters_dau_days($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_life_time_period($row['data']);

			if (!isset($days[$date."-".$type]))
				$days[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$days[$date."-".$type]['value'] += $row['value'];
		}

		$days = array_values($days);

		return array($all, $net, $age, $sex, $tag, $level, $locations, $locations_hard, $days);
	}

	public function counters_wau($cache_date)
	{
		$result = $this->DB->counters_wau_all($cache_date);
		$all = $this->type_data($result);

		$result = $this->DB->counters_wau_net($cache_date);
		$net = $this->type_data($result);

		$result = $this->DB->counters_wau_age($cache_date);
		$age = $this->type_data($result);

		$result = $this->DB->counters_wau_sex($cache_date);
		$sex = $this->type_data($result);

		return array($all, $net, $age, $sex);
	}

	public function counters_mau($cache_date)
	{
		$result = $this->DB->counters_mau_all($cache_date);
		$all = $this->type_data($result);

		$result = $this->DB->counters_mau_net($cache_date);
		$net = $this->type_data($result);

		$result = $this->DB->counters_mau_age($cache_date);
		$age = $this->type_data($result);

		$result = $this->DB->counters_mau_sex($cache_date);
		$sex = $this->type_data($result);

		$result = $this->DB->counters_mau_tag($cache_date);
		$tag = $this->type_data($result);

		return array($all, $net, $age, $sex, $tag);
	}

	public function counters_mau_percent($cache_date)
	{
		$all = $this->counters_mau_percent_type($cache_date, "all");
		$net = $this->counters_mau_percent_type($cache_date, "net");
		$age = $this->counters_mau_percent_type($cache_date, "age");
		$sex = $this->counters_mau_percent_type($cache_date, "sex");

		return array($all, $net, $age, $sex);
	}

	public function counters_dau_net_sex($cache_date)
	{
		$men = array();
		$women = array();
		$undefined = array();

		$result = $this->DB->counters_dau_net_sex($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$net = $row['data'] >> 8;
			$type = $row['data'] & 0x000000FF;

			if ($type == 0)
				$undefined[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
			if ($type == 1)
				$women[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
			if ($type == 2)
				$men[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
		}

		return array($men, $women, $undefined);
	}

	public function counters_dau_net_age($cache_date)
	{
		$data = array();
		$net_keys = array_keys($this->networks);

		while(list(, $key) = each($net_keys))
			$data[$key] = array();

		$result = $this->DB->counters_dau_net_age($cache_date);
		while ($row = $result->fetch())
		{
			$net = $row['data'] >> 8;
			$type = $row['data'] & 0xFF;

			if (isset($data[$net]))
				$data[$net][] = array('date' => $row['date'], 'type' => $type, 'value' => $row['value']);
		}

		return array_values($data);
	}

	public function counters_wau_net_sex($cache_date)
	{
		$men = array();
		$women = array();
		$undefined = array();

		$result = $this->DB->counters_wau_net_sex($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;
			$net = $row['data'] & 0x0000FFFF;

			if ($type == 0)
				$undefined[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
			if ($type == 1)
				$women[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
			if ($type == 2)
				$men[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
		}

		return array($men, $women, $undefined);
	}

	public function counters_mau_net_sex($cache_date)
	{
		$men = array();
		$women = array();
		$undefined = array();

		$result = $this->DB->counters_mau_net_sex($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;
			$net = $row['data'] & 0x0000FFFF;

			if ($type == 0)
				$undefined[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
			if ($type == 1)
				$women[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
			if ($type == 2)
				$men[] = array('date' => $date, 'type' => $net, 'value' => $row['value']);
		}

		return array($men, $women, $undefined);
	}

	public function counters_balance($cache_date)
	{
		$coins = array();

		$result = $this->DB->counters_coins($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = $row['value'];

			if ($type != 0)
			{
				$value *= $type;
				$type = 1;
			}

			if (!isset($coins[$date."_".$type]))
				$coins[$date."_".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			if (!isset($coins[$date."_2"]))
				$coins[$date."_2"] = array('date' => $date, 'type' => 2, 'value' => 0);

			$coins[$date."_".$type]['value'] += $value;
			$coins[$date."_2"]['value'] += $value;
		}

		$nuts = array();

		$result = $this->DB->counters_nuts($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = $row['value'];

			if ($type != 0)
			{
				$value *= $type;
				$type = 1;
			}

			if (!isset($nuts[$date."_".$type]))
				$nuts[$date."_".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			if (!isset($nuts[$date."_2"]))
				$nuts[$date."_2"] = array('date' => $date, 'type' => 2, 'value' => 0);

			$nuts[$date."_".$type]['value'] += $value;
			$nuts[$date."_2"]['value'] += $value;
		}

		$jettons = array();

		$result = $this->DB->counters_jettons($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($type != 0)
				$row['value'] *= -1;

			$jettons[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if (isset($jettons[$date."-0"]) && isset($jettons[$date."-1"]))
				$jettons[$date."-2"] = array('date' => $date, 'type' => 2, 'value' => $jettons[$date."-0"]['value'] + $jettons[$date."-1"]['value']);
		}

		$coins = array_values($coins);
		$nuts = array_values($nuts);
		$jettons = array_values($jettons);

		return array($coins, $nuts, $jettons);
	}

	public function counters_average($cache_date)
	{
		$result = $this->DB->counters_average($cache_date);
		$balance = $this->type_data($result);

		$result = $this->DB->counters_average_paying($cache_date);
		$paying = $this->type_data($result);

		return array($balance, $paying);
	}

	public function counters_resource_income($cache_date)
	{
		$data = array();

		$result = $this->DB->counters_award_flow($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;
			$resource = $row['data'] >> 8 & 0xFF;
			$income = $row['data'] & 0xFF;

			if ($income == 0)
				continue;

			if (!isset($data[$resource]))
				$data[$resource] = array();
			$data[$resource][] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return $data;
	}

	public function counters_resource_outcome($cache_date)
	{
		$data = array();

		$result = $this->DB->counters_award_flow($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;
			$resource = $row['data'] >> 8 & 0xFF;
			$income = $row['data'] & 0xFF;

			if ($income == 1)
				continue;

			if (!isset($data[$resource]))
				$data[$resource] = array();
			$data[$resource][] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return $data;
	}

	public function counters_sales_paying($cache_date)
	{
		$paying_campaigns = array(0 => true, 1 => true, 2 => true, 3 => true, 4 => true, 5 => true, 6 => true, 7 => true, 8 => true, 9 => true, 10 => true, 11 => true, 12 => true, 13 => true, 14 => true, 15 => true, 16 => true, 17 => true, 18 => true, 41 => true, 43 => true, 44 => true, 45 => true, 46 => true, 47 => true);

		$show = array();

		$result = $this->DB->counters_campaign_show($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($paying_campaigns[$type]))
				continue;

			$show[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		$used = array();

		$result = $this->DB->counters_campaign_used($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($paying_campaigns[$type]))
				continue;

			$used[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		$result = $this->DB->counters_campaign_mana($cache_date);
		$mana = $this->type_data($result);

		return array($show, $used, $mana);
	}

	public function counters_sales_nopaying($cache_date)
	{
		$nopaying_campaigns = array(19 => true, 20 => true, 21 => true, 22 => true, 23 => true, 24 => true, 25 => true, 26 => true, 27 => true, 28 => true, 29 => true, 30 => true, 31 => true, 32 => true, 33 => true, 34 => true, 35 => true, 36 => true, 37 => true, 38 => true, 39 => true, 40 => true, 42 => true);

		$show = array();

		$result = $this->DB->counters_campaign_show($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($nopaying_campaigns[$type]))
				continue;

			$show[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		$used = array();

		$result = $this->DB->counters_campaign_used($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($nopaying_campaigns[$type]))
				continue;

			$used[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return array($show, $used);
	}

	public function counters_actions($cache_date)
	{
		$result = $this->DB->counters_bank($cache_date);
		$bank = $this->type_data($result);

		$result = $this->DB->counters_smile_click($cache_date);
		while ($row = $result->fetch())
			$bank[] = array('date' => $row['date'], 'type' => 2, 'value' => $row['value']);

		$result = $this->DB->counters_shop($cache_date);
		while ($row = $result->fetch())
			$bank[] = array('date' => $row['date'], 'type' => $row['data'] + 3, 'value' => $row['value']);

		$result = $this->DB->counters_smile_use($cache_date);
		$smiles = $this->type_data($result);

		return array($bank, $smiles);
	}

	public function counters_reposts($cache_date)
	{
		$result = $this->DB->counters_reposts_news($cache_date);
		$news = $this->type_data($result);

		$result = $this->DB->counters_reposts_player_level($cache_date);
		$levels = $this->type_data($result);

		$result = $this->DB->counters_reposts_shaman_level($cache_date);
		while ($row = $result->fetch())
			$levels[] = array('date' => $row['date'], 'type' => 1, 'value' => $row['value']);

		$result = $this->DB->counters_reposts_achievement($cache_date);
		$achievement = $this->type_data($result);

		return array($news, $levels, $achievement);
	}

	public function counters_reposts_net($cache_date)
	{
		$result = $this->DB->counters_reposts_show($cache_date);
		$show = $this->type_data($result);

		$result = $this->DB->counters_reposts_make($cache_date);
		$make = $this->type_data($result);

		$result = $this->DB->counters_reposts_follow($cache_date);
		$follow = $this->type_data($result);

		return array($show, $make, $follow);
	}

	public function counters_friends($cache_date)
	{
		$result = $this->DB->counters_friends_total($cache_date);
		$total = $this->type_data($result);

		$result = $this->DB->counters_friends_invite($cache_date);
		$invites = $this->type_data($result);

		$result = $this->DB->counters_friends_click($cache_date);
		while ($row = $result->fetch())
			$invites[] = array('date' => $row['date'], 'type' => 2, 'value' => $row['value']);

		$result = $this->DB->counters_return($cache_date);
		$return = $this->type_data($result);

		return array($total, $invites, $return);
	}

	public function counters_rpg_magic($cache_date)
	{
		$magic = array();

		$result = $this->DB->counters_rpg_magic($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = floor($row['data'] / 100);

			if (!isset($magic[$date."-".$type]))
				$magic[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$magic[$date."-".$type]['value'] += $row['value'];
		}

		return array($magic);
	}

	public function counters_rpg_shaman($cache_date)
	{
		$levels = array();

		$result = $this->DB->counters_rpg_levels($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_shaman_level_index($row['data']);

			if (!isset($levels[$date."-".$type]))
				$levels[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$levels[$date."-".$type]['value'] += $row['value'];
		}

		$result = $this->DB->counters_rpg_branches($cache_date);
		$branches = $this->type_data($result);

		$result = $this->DB->counters_rpg_feathers($cache_date);
		$feathers = $this->type_data($result);

		return array($levels, $branches, $feathers);
	}

	public function counters_rpg_experience($cache_date)
	{
		$data = array();

		$result = $this->DB->counters_rpg_experience($cache_date);
		while ($row = $result->fetch())
			$data[$row['date']][$row['data']] = $row['value'];

		$paying = array();
		$free = array();

		while (list($date, $values) = each($data))
		{
			if (isset($values[0]))
			{
				$free[] = array('date' => $date, 'type' => 0, 'value' => round($values[0] / $values[1], 2));
				$free[] = array('date' => $date, 'type' => 1, 'value' => round($values[0] / $values[2], 2));
			}

			if (!isset($values[3]))
				continue;

			$paying[] = array('date' => $date, 'type' => 0, 'value' => round($values[3] / $values[4], 2));
			$paying[] = array('date' => $date, 'type' => 1, 'value' => round($values[3] / $values[5], 2));
		}

		return array($paying, $free);
	}

	public function counters_magic($cache_date)
	{
		$result = $this->DB->counters_magic($cache_date);
		$magic = $this->type_data($result);

		$steal = array();

		$result = $this->DB->counters_steal($cache_date);
		while ($row = $result->fetch())
			$steal[] = array('date' => $row['date'], 'type' => 0, 'value' => round($row['sum'] / $row['count'], 2));

		$result = $this->DB->counters_leprechaun($cache_date);
		$leprechaun = $this->type_data($result);

		$result = $this->DB->counters_perk($cache_date);
		$perks = $this->type_data($result);

		$result = $this->DB->counters_perk_mana($cache_date);
		$mana = $this->type_data($result);

		return array($magic, $steal, $leprechaun, $perks, $mana);
	}

	public function counters_transform($cache_date)
	{
		$result = $this->DB->counters_shaman($cache_date);
		$shaman = $this->type_data($result);

		$result = $this->DB->counters_rabbit($cache_date);
		$rabbit = $this->type_data($result);

		$result = $this->DB->counters_dragon($cache_date);
		$dragon = $this->type_data($result);

		return array($shaman, $rabbit, $dragon);
	}

	public function counters_shaman($cache_date)
	{
		$result = $this->DB->counters_shaman_select($cache_date);
		$select = $this->type_data($result);

		$rounds = array();

		$result = $this->DB->counters_count_round_location($cache_date);
		while ($row = $result->fetch())
		{
			if (!isset($rounds[$row['date']]))
				$rounds[$row['date']] = 0;
			$rounds[$row['date']] += $row['value'];
		}

		$bought = array();

		$result = $this->DB->counters_shaman_buy($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['currency'];

			if (!isset($rounds[$date]))
				continue;

			$bought[] = array('date' => $row['date'], 'type' => $type, 'value' => round($row['value'] / $rounds[$date] * 100, 2));
		}

		return array($select, $bought);
	}

	public function counters_items_location($cache_date)
	{
		$spawns = array();

		$result = $this->DB->counters_spawn_col_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_item_location_index($row['data']);

			if ($type === false)
				continue;

			if (!isset($spawns[$date."-".$type]))
				$spawns[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$spawns[$date."-".$type]['value'] += $row['value'];
		}

		$pickups = array();
		$ratio = array();

		$result = $this->DB->counters_pickup_col_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_item_location_index($row['data']);

			if ($type === false)
				continue;

			if (!isset($pickups[$date."-".$type]))
				$pickups[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$pickups[$date."-".$type]['value'] += $row['value'];

			if (!isset($spawns[$date."-".$type]))
				continue;

			$point = &$spawns[$date."-".$type]['value'];
			if ($point == 0)
				continue;

			if (!isset($ratio[$date."-".$type]))
				$ratio[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$ratio[$date."-".$type]['value'] += round($row['value'] * 100 / $point, 2);
		}

		$success = array();
		$result = $this->DB->counters_success_col_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_item_location_index($row['data']);

			if ($type === false)
				continue;

			if (!isset($success[$date."-".$type]))
				$success[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$success[$date."-".$type]['value'] += $row['value'];
		}

		$shaman = array();
		$result = $this->DB->counters_shaman_col_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_item_location_index($row['data']);

			if ($type === false)
				continue;

			if (!isset($shaman[$date."-".$type]))
				$shaman[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$shaman[$date."-".$type]['value'] += $row['value'];
		}

		$pickups = array_values($pickups);
		$spawns = array_values($spawns);
		$success = array_values($success);
		$shaman = array_values($shaman);
		$ratio = array_values($ratio);

		return array($pickups, $spawns, $success, $shaman, $ratio);
	}

	public function counters_collections($cache_date)
	{
		$result = $this->DB->counters_collections($cache_date);
		$collections = $this->type_data($result);

		$result = $this->DB->counters_trophy($cache_date);
		$trophy = $this->type_data($result);

		$exchange = array();

		$result = $this->DB->counters_collection_exchange($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_item_location_index($row['data']);

			if ($type === false)
				continue;
			if (!isset($exchange[$date."-".$type]))
				$exchange[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$exchange[$date."-".$type]['value'] += $row['value'];
		}

		$exchange = array_values($exchange);

		return array($collections, $trophy, $exchange);
	}

	public function counters_active($cache_date)
	{
		$time = array();

		$result = $this->DB->counters_active_time($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_active_index($row['data']);

			if (!isset($time[$date."-".$type]))
				$time[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$time[$date."-".$type]['value'] += $row['value'];
		}

		$count = array();

		$result = $this->DB->counters_active_count($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_active_index($row['data']);

			if (!isset($count[$date."-".$type]))
				$count[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$count[$date."-".$type]['value'] += $row['value'];
		}

		$time_paid = array();

		$result = $this->DB->counters_active_paying_time($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_active_index($row['data']);

			if (!isset($time_paid[$date."-".$type]))
				$time_paid[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$time_paid[$date."-".$type]['value'] += $row['value'];
		}

		$count_paid = array();

		$result = $this->DB->counters_active_paying_count($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_active_index($row['data']);

			if (!isset($count_paid[$date."-".$type]))
				$count_paid[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$count_paid[$date."-".$type]['value'] += $row['value'];
		}

		$time = array_values($time);
		$count = array_values($count);
		$time_paid = array_values($time_paid);
		$count_paid = array_values($count_paid);

		return array($time, $count, $time_paid, $count_paid);
	}

	public function counters_sessions_time($cache_date)
	{
		$all = $this->counters_sessions_time_type($cache_date, "all");
		$net = $this->counters_sessions_time_type($cache_date, "net");
		$age = $this->counters_sessions_time_type($cache_date, "age");
		$sex = $this->counters_sessions_time_type($cache_date, "sex");
		$level = $this->counters_sessions_time_type($cache_date, "level");

		return array($all, $net, $age, $sex, $level);
	}

	public function counters_sessions_count($cache_date)
	{
		$all = $this->counters_sessions_count_type($cache_date, "all");
		$net = $this->counters_sessions_count_type($cache_date, "net");
		$age = $this->counters_sessions_count_type($cache_date, "age");
		$sex = $this->counters_sessions_count_type($cache_date, "sex");
		$level = $this->counters_sessions_count_type($cache_date, "level");

		return array($all, $net, $age, $sex, $level);
	}

	public function counters_clans($cache_date)
	{
		$result = $this->DB->counters_clans_flow($cache_date);
		$flow = $this->type_data($result);

		$result = $this->DB->counters_clans_limit($cache_date);
		$limit = $this->type_data($result);

		return array($flow, $limit);
	}

	public function counters_experience($cache_date)
	{
		$dau_level = array();

		$result = $this->DB->counters_dau_level($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_level_index($row['data']);

			if (!isset($dau_level[$date][$type]))
				$dau_level[$date][$type] = 0;
			$dau_level[$date][$type] += $row['value'];
		}

		$experience = array();
		$experience_user = array();

		$result = $this->DB->counters_experience($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_level_index($row['data']);

			if (!isset($experience[$date."-".$type]))
				$experience[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$experience[$date."-".$type]['value'] += $row['value'];

			if (!isset($dau_level[$date][$type]))
				continue;
			if (!isset($experience_user[$date."-".$type]))
				$experience_user[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$experience_user[$date."-".$type]['value'] += round($row['value'] / $dau_level[$date][$type], 2);
		}

		$experience = array_values($experience);
		$experience_user = array_values($experience_user);

		return array($experience, $experience_user);
	}

	public function counters_rating_location($cache_date)
	{
		$negative = array();
		$positive = array();

		$result = $this->DB->counters_rating_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($negative[$date."-".$type]))
				$negative[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			if (!isset($positive[$date."-".$type]))
				$positive[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$negative[$date."-".$type]['value'] += $row['negative'];
			$positive[$date."-".$type]['value'] += $row['positive'];
		}

		$negative = array_values($negative);
		$positive = array_values($positive);

		return array($negative, $positive);
	}

	public function counters_round_location($cache_date)
	{
		$time = array();

		$result = $this->DB->counters_time_round_location($cache_date);
		while ($row = $result->fetch())
			$time[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => round($row['value'], 2));

		$count = array();

		$result = $this->DB->counters_count_round_location($cache_date);
		while ($row = $result->fetch())
			$count[$row['date']."-".$row['data']] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['value']);

		$average_squirrels = array();

		$result = $this->DB->counters_plays_count($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($count[$date."-".$type]))
				continue;
			if ($count[$date."-".$type]['value'] == 0)
				continue;

			$point = $count[$date."-".$type]['value'];
			$average_squirrels[] = array('date' => $date, 'type' => $type, 'value' => round($row['value'] / $point, 2));
		}

		$hollows = array();

		$result = $this->DB->counters_hollow_r_location($cache_date);
		while ($row = $result->fetch())
			$hollows[$row['date'].'-'.$row['data']] = $row['value'];

		$success = array();
		$average = array();

		$result = $this->DB->counters_success_r_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			$success[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if (!isset($hollows[$date."-".$type]) || $row['value'] == 0)
				continue;

			$point = $hollows[$date."-".$type];
			$average[] = array('date' => $date, 'type' => $type, 'value' => round($point / $row['value'], 2));
		}

		$count = array_values($count);

		return array($time, $count, $average_squirrels, $success, $average);
	}

	public function counters_round_completion($cache_date)
	{
		$data = array();
		$games = array();

		$result = $this->DB->counters_round_completion($cache_date);
		while ($row = $result->fetch())
		{
			$type = $row['data'] & 0x000000FF;
			$location = $row['data'] >> 8;

			if ($type == 4)
			{
				$games[$row['date'].$location] = $row['value'];
				continue;
			}

			if (!isset($data[$type]))
				$data[$type] = array();

			$data[$type][] = array('date' => $row['date'], 'type' => $location, 'value' => $row['value']);
		}

		while (list($type, $chart) = each($data))
		{
			while(list($key, $value) = each($chart))
			{
				if (!isset($games[$value['date'].$value['type']])) {
					unset($data[$type][$key]);
					continue;
				}

				$data[$type][$key]['value'] = round($value['value'] * 100 / $games[$value['date'].$value['type']], 2);
			}
		}

		ksort($data);

		return array_values($data);
	}

	public function counters_death($cache_date)
	{
		$plays = array();

		$result = $this->DB->counters_plays_count($cache_date);
		while ($row = $result->fetch())
		{
			if (!isset($plays[$row['date']]))
				$plays[$row['date']] = 0;
			$plays[$row['date']] += $row['value'];
		}

		$deaths = array();
		$deaths_percent = array();

		$result = $this->DB->counters_death($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['death'];

			$deaths[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if (!isset($plays[$date]) || $plays[$date] == 0)
				continue;

			$deaths_percent[] = array('date' => $date, 'type' => $type, 'value' => round($row['value'] / $plays[$date] * 100, 2));
		}

		return array($deaths, $deaths_percent);
	}

	public function counters_mode_rating($cache_date)
	{
		$data = array();

		$result = $this->DB->counters_mode_rating($cache_date);
		while ($row = $result->fetch())
		{
			$type = $row['data'] & 0x000000FF;
			$mode = ($row['data'] >> 8) & 0x000000FF;
			$location = $row['data'] >> 16;

			if ($location !== 0)
				continue;

			if (!isset($data[$type]))
				$data[$type] = array();

			$data[$type][] = array('date' => $row['date'], 'type' => $mode, 'value' => $row['value']);
		}

		return $data;
	}

	public function counters_support($cache_date)
	{
		$result = $this->DB->counters_support($cache_date);
		$support = $this->type_data($result);

		$result = $this->DB->counters_bad_maps($cache_date);
		$maps = $this->type_data($result);

		$result = $this->DB->counters_defer_autoban($cache_date);
		$bans = $this->type_data($result);

		$result = $this->DB->counters_cheaters($cache_date);
		while ($row = $result->fetch())
			$bans[] = array('date' => $row['date'], 'type' => 1, 'value' => $row['value']);

		return array($support, $maps, $bans);
	}

	public function counters_notifications($cache_date)
	{
		$config = array(
			336 => array(
				0 => "net",
				1 => "type"
			),
			337 => array(
				2 => "net",
				3 => "type"
			),
			338 => array(
				4 => "net",
				5 => "type"
			),
			339 => array()
		);
		$data = array();

		$result = $this->DB->counters_notifications(array_keys($config), $cache_date);
		while ($row = $result->fetch())
		{
			if ($row['type'] == 339)
			{
				if (!isset($this->networks[$row['data']]))
					continue;

				$data[6][] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['value']);
				continue;
			}

			$net = $row['data'] & 0xFF;
			$notificator = $row['data'] >> 8;

			if (!isset($this->networks[$net]))
				continue;

			reset($config[$row['type']]);
			while (list($key, $val) = each($config[$row['type']]))
			{
				$type = ($val == "net") ? $net : $notificator;
				$index = $type.$row['date'];

				if (!isset($data[$key][$index]))
					$data[$key][$index] = array('date' => $row['date'], 'type' => $type, 'value' => 0);

				$data[$key][$index]['value'] += $row['value'];
			}
		}

		while (list($key, $val) = each($data))
		{
			if ($key == 6)
				continue;

			$data[$key] = array_values($val);
		}

		return $data;
	}

	public function counters_exchange($cache_date)
	{
		$result = $this->DB->counters_exchange($cache_date);

		return array($this->type_data($result));
	}

	/**
	 * Игроки
	 */
	public function players_new($cache_date)
	{
		$result = $this->DB->players_new_all($cache_date);
		$all = $this->type_data($result);

		$net = array();

		$result = $this->DB->players_new_net($cache_date);
		$net = $this->type_data($result);

		$ages = array();

		$result = $this->DB->players_new_age($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_age_index($row['data']);

			if (!isset($ages[$date."-".$type]))
				$ages[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$ages[$date."-".$type]['value'] += $row['value'];
		}

		$ages = array_values($ages);

		$result = $this->DB->players_new_sex($cache_date);
		$sex = $this->type_data($result);

		$result = $this->DB->players_new_tag($cache_date);
		$tag = $this->type_data($result);

		$result = $this->DB->players_new_by_invites($cache_date);
		$new_by_invites = $this->type_data($result);

		$result = $this->DB->players_new_by_invites_5($cache_date);
		$new_by_invites_5 = $this->type_data($result);

		$new_by_invites = array_merge($new_by_invites, $new_by_invites_5);

		return array($all, $net, $ages, $sex, $tag, $new_by_invites);
	}

	public function players_new_referrer($cache_date)
	{
		$result = $this->DB->players_new_ref_fb($cache_date);
		$fb = $this->type_data($result);

		return array($fb);
	}

	public function players_subscription($cache_date)
	{
		$dau_all = array();

		$result = $this->DB->counters_dau_all($cache_date);
		while ($row = $result->fetch())
			$dau_all[$row['date']] = $row['value'];

		$data = array();

		$result = $this->DB->players_subscription($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];

			if (empty($dau_all[$date]))
				continue;

			$data[] = array('date' => $date, 'type' => 0, 'value' => $row['value']);
			$data[] = array('date' => $date, 'type' => 1, 'value' => round($row['value'] * 100 / $dau_all[$date], 2));
		}

		return array($data);
	}

	public function players_bans($cache_date)
	{
		$result = $this->DB->players_bans($cache_date);
		$bans = $this->type_data($result);

		$result = $this->DB->players_anticheat($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($type == 1)
				$bans[] = array('date' => $date, 'type' => -1, 'value' => $row['value']);
			else if ($type == 3)
				$bans[] = array('date' => $date, 'type' => 7, 'value' => $row['value']);
		}

		return array($bans);
	}

	public function players_bans_paying($cache_date)
	{
		$result = $this->DB->players_bans_paying($cache_date);
		return array($this->type_data($result));
	}

	public function players_levels($cache_date)
	{
		$result = $this->DB->players_levels();
		$all = $this->type_data($result);

		return array($all);
	}

	public function players_tutorial($cache_date)
	{
		$tutorial = array();

		$result = $this->DB->players_tutorial();
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($type == 0)
				$type = 17;

			$tutorial[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return array($tutorial);
	}

	public function players_game_start($cache_date)
	{
		$players = array();

		$result = $this->DB->players_new_all($cache_date);
		while ($row = $result->fetch())
			$players[$row['date']] = $row['value'];

		$data = array('start' => array(), 'nut' => array(), 'finish' => array());

		$result = $this->DB->players_game_start();
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = ($row['data'] & 0xFFFFFF) >> 16;
			$nut = ($row['data'] & 0xFFFF) >> 8;
			$win = $row['data'] & 0xFF;
			$key = $date."-".$type;

			if (!isset($players[$date]))
				continue;
			$point = &$players[$date];

			if (!isset($data['start'][$date."-0"]))
				$data['start'][$date."-0"] = array('date' => $date, 'type' => 0, 'value' => $point);

			if (!isset($data['start'][$key]))
				$data['start'][$key] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data['start'][$key]['value'] += $row['value'];

			if ($nut == 0)
				continue;

			if (!isset($data['nut'][$date."-0"]))
				$data['nut'][$date."-0"] = array('date' => $date, 'type' => 0, 'value' => $point);

			if (!isset($data['nut'][$key]))
				$data['nut'][$key] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data['nut'][$key]['value'] += $row['value'];

			if ($win == 0)
				continue;

			if (!isset($data['finish'][$date."-0"]))
				$data['finish'][$date."-0"] = array('date' => $date, 'type' => 0, 'value' => $point);

			if (!isset($data['finish'][$key]))
				$data['finish'][$key] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data['finish'][$key]['value'] += $row['value'];
		}

		$data['start'] = array_values($data['start']);
		$data['nut'] = array_values($data['nut']);
		$data['finish'] = array_values($data['finish']);

		return array_values($data);
	}

	public function players_sandbox($cache_date)
	{
		$data = array();
		$charts = array(4 => 0, 6 => 1, 5 => 2, 2 => 3, 3 => 4);

		$result = $this->DB->players_sandbox($cache_date);
		while ($row = $result->fetch())
		{
			$chart = $charts[$row['chart']];
			$data[$chart][] = array('date' => $row['date'], 'type' => $row['type'], 'value' => $row['value']);
		}

		return $data;
	}

	public function players_tutorial_level($cache_date)
	{
		$data = array();

		$result = $this->DB->players_tutorial_level($cache_date);
		while ($row = $result->fetch())
		{
			$data[$row['chart']][] = array('date' => $row['date'], 'type' => $row['type'], 'value' => $row['value']);
		}

		return $data;
	}

	public function players_training($cache_date)
	{
		$result = $this->DB->players_training($cache_date);

		return array($this->type_data($result));
	}

	public function players_retention($cache_date)
	{
		$returned = array();

		$result = $this->DB->players_retention_all();
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$value = $row['value'];
			$days = $row['days'];

			if (!isset($returned[$date]))
				$returned[$date] = array('registered' => 0, '1d' => 0, '1d+' => 0, '2d+' => 0, '7d+' => 0, '30d+' => 0);
			$point = &$returned[$date];

			$point['registered'] += $value;

			if ($days == 0)
				continue;
			if ($days >= 1)
				$point['1d+'] += $value;
			if ($days >= 2)
				$point['2d+'] += $value;
			if ($days >= 7)
				$point['7d+'] += $value;
			if ($days >= 30)
				$point['30d+'] += $value;
		}

		$result = $this->DB->players_retention_1d();
		while ($row = $result->fetch())
		{
			$date = $row['registered'];
			$value = $row['value'];
			$days = $row['days'];

			if ($days != 1)
				continue;

			if (!isset($returned[$date]))
				continue;

			$point = &$returned[$date];

			$point['1d'] = $value;
		}

		$data = array();
		while (list($date, $values) = each($returned))
		{
			$registered = &$values['registered'];

			$data[] = array('date' => $date, 'type' => 0, 'value' => round($values['1d'] * 100 / $registered, 2));
			$data[] = array('date' => $date, 'type' => 1, 'value' => round($values['1d+'] * 100 / $registered, 2));
			$data[] = array('date' => $date, 'type' => 2, 'value' => round($values['2d+'] * 100 / $registered, 2));
			$data[] = array('date' => $date, 'type' => 7, 'value' => round($values['7d+'] * 100 / $registered, 2));
			$data[] = array('date' => $date, 'type' => 30, 'value' => round($values['30d+'] * 100 / $registered, 2));
		}

		return array($data);
	}

	public function players_retention_paying($cache_date)
	{
		$returned = array();

		$result = $this->DB->players_retention_paying();
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$value = $row['value'];
			$days = $row['days'];

			if (!isset($returned[$date]))
				$returned[$date] = array('registered' => 0, '1d+' => 0, '2d+' => 0, '7d+' => 0, '30d+' => 0);
			$point = &$returned[$date];

			$point['registered'] += $value;

			if ($days == 0)
				continue;
			if ($days >= 1)
				$point['1d+'] += $value;
			if ($days >= 2)
				$point['2d+'] += $value;
			if ($days >= 7)
				$point['7d+'] += $value;
			if ($days >= 30)
				$point['30d+'] += $value;
		}

		$data = array();
		while (list($date, $values) = each($returned))
		{
			$registered = &$values['registered'];

			$data[] = array('date' => $date, 'type' => 1, 'value' => round(($values['1d+'] * 100) / $registered, 2));
			$data[] = array('date' => $date, 'type' => 2, 'value' => round(($values['2d+'] * 100) / $registered, 2));
			$data[] = array('date' => $date, 'type' => 7, 'value' => round(($values['7d+'] * 100) / $registered, 2));
			$data[] = array('date' => $date, 'type' => 30, 'value' => round(($values['30d+'] * 100) / $registered, 2));
		}

		return array($data);
	}

	public function players_retention_net($cache_date)
	{
		return $this->players_retention_type($cache_date, "net", true);
	}

	public function players_retention_age($cache_date)
	{
		return $this->players_retention_type($cache_date, "age", true);
	}

	public function players_retention_sex($cache_date)
	{
		return $this->players_retention_type($cache_date, "sex", true);
	}

	public function players_retention_tag($cache_date)
	{
		return $this->players_retention_type($cache_date, "tag", true);
	}

	public function players_retention_ref_fb($cache_date)
	{
		return $this->players_retention_type($cache_date, "ref_fb");
	}

	public function players_life_time($cache_date)
	{
		$data = array('2weeks' => array(), '3weeks' => array());

		$result = $this->DB->players_life_time_2weeks($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_life_time_period($row['data']);

			if (!isset($data['2weeks'][$date."-".$type]))
				$data['2weeks'][$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data['2weeks'][$date."-".$type]['value'] += $row['value'];
		}

		$result = $this->DB->players_life_time_3weeks($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_life_time_period($row['data']);

			if (!isset($data['3weeks'][$date."-".$type]))
				$data['3weeks'][$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data['3weeks'][$date."-".$type]['value'] += $row['value'];
		}

		$data['2weeks'] = array_values($data['2weeks']);
		$data['3weeks'] = array_values($data['3weeks']);

		return array($data['2weeks'], $data['3weeks']);
	}

	public function players_average_life_time($cache_date)
	{
		list($all, $net) = $this->players_average_life_time_type($cache_date, "net");
		$age = $this->players_average_life_time_type($cache_date, "age");
		$sex = $this->players_average_life_time_type($cache_date, "sex");
		$tag = $this->players_average_life_time_type($cache_date, "tag");

		return array($all, $net, $age, $sex, $tag);
	}

	public function players_paying_day($cache_date)
	{
		list($all, $net) = $this->players_paying_day_type($cache_date, "net");
		$age = $this->players_paying_day_type($cache_date, "age");
		$sex = $this->players_paying_day_type($cache_date, "sex");

		return array($all, $net, $age, $sex);
	}

	public function players_paying_month($cache_date)
	{
		list($all, $net) = $this->players_paying_month_type($cache_date, "net");
		$age = $this->players_paying_month_type($cache_date, "age");
		$sex = $this->players_paying_month_type($cache_date, "sex");

		return array($all, $net, $age, $sex);
	}

	public function players_paying_groups($cache_date)
	{
		$data = array();
		$daily = array();
		$payments = array();

		$old_date = false;
		$days = 0;
		$cache_time = strtotime($cache_date);
		$time = $cache_time;

		$result = $this->DB->players_paying_groups($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$uid = $row['data']."-".$row['net_id'];

			if ($old_date === false)
				$old_date = $date;
			if ($old_date != $date)
			{
				if ($time >= 0)
					$time = $cache_time - strtotime($date);
				if ($time < 0)
				{
					reset($payments);
					while (list(, $sum) = each($payments))
					{
						if ($sum < 0)
							$this->Log->warning("Wrong payment sum (got negative sum) at {$date}");
						if ($sum === 0)
							continue;

						$type = $this->get_paid_group_index($sum);

						if (!isset($data[$old_date."-".$type]))
							$data[$old_date."-".$type] = array('date' => $old_date, 'type' => $type, 'value' => 0);

						$data[$old_date."-".$type]['value'] += 1;
					}
				}

				$offset = $this->date_diff($date, $old_date);
				for ($i = 0; $i < $offset; $i++)
				{
					$days += 1;
					$daily[$days] = array();
				}

				$old_date = $date;
			}

			if (!isset($payments[$uid]))
				$payments[$uid] = 0;
			$payments[$uid] += $row['sum'];
			$daily[$days][$uid] = $row['sum'];

			$counter = count($daily);
			if ($counter <= 30)
				continue;

			reset($daily);
			while ((list($key, $users) = each($daily)) && $counter > 30)
			{
				reset($users);
				while (list($user_id, $sum) = each($users))
					$payments[$user_id] -= $sum;

				unset($daily[$key]);
				$counter -= 1;
			}
		}

		reset($payments);
		while (list(, $sum) = each($payments))
		{
			if ($sum < 0)
				$this->Log->warning("Wrong payment sum (got negative sum) at {$date}");
			if ($sum === 0)
				continue;

			$type = $this->get_paid_group_index($sum);

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$data[$date."-".$type]['value'] += 1;
		}

		$data = array_values($data);

		return array($data);
	}

	public function players_paying_counts($cache_date)
	{
		if ($cache_date === "2000-01-01")
			return $this->players_paying_counts_full();

		$data = array();

		$result = $this->DB->players_paying_counts($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_players_paying_count_index($row['count']);

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data[$date."-".$type]['value'] += 1;
		}

		$data = array_values($data);

		return array($data);
	}

	public function players_gifts($cache_date)
	{
		$data = array();

		$data[0] = array();
		$data[1] = array();
		$result = $this->DB->players_gifts_appended($cache_date);
		while ($row = $result->fetch())
		{
			$key = $row['date']."-".$row['count'];
			$way = $row['way'];
			if (!isset($data[$way][$key]))
				$data[$way][$key] = array('date' => $row['date'], 'type' => $row['count'], 'value' => 0);

			$data[$way][$key]['value'] += $row['value'];

		}
		$data[0] = array_values($data[0]);
		$data[1] = array_values($data[1]);

		$data[2] = array();
		$result = $this->DB->players_gifts_removed($cache_date);
		while ($row = $result->fetch())
		{
			$data[2][] = array('date' => $row['date'], 'type' => 0, 'value' => $row['value']);
		}

		$result = $this->DB->players_gifts_taken($cache_date);
		$data[3] = $this->type_data($result);

		return $data;
	}

	/**
	 * Квесты
	 */
	public function quests_all($cache_date)
	{
		$result = $this->DB->quests_new($cache_date);
		$new = $this->type_data($result);

		$result = $this->DB->quests_done($cache_date);
		$done = $this->type_data($result);

		$count = array();

		$result = $this->DB->quests_count($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = (($row['data'] & 0x0000FFFF) >> 8) + ($row['data'] & 0x000000FF) * 100;

			if (!isset($count[$date]))
				$count[$date] = array();
			if (!isset($count[$date][$type]))
				$count[$date][$type] = 0;

			$count[$date][$type] += $row['value'];
		}

		$seconds = array();

		$result = $this->DB->quests_time($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = (($row['data'] & 0x0000FFFF) >> 8) + ($row['data'] & 0x000000FF) * 100;

			if (!isset($seconds[$date]))
				$seconds[$date] = array();
			if (!isset($seconds[$date][$type]))
				$seconds[$date][$type] = 0;

			$seconds[$date][$type] += $row['value'];
		}

		$time = array();

		while (list($date, $types) = each($seconds))
		{
			while (list($type, $value) = each($types))
			{
				if (!isset($count[$date][$type]))
					continue;
				if ($count[$date][$type] == 0)
					continue;

				$point = &$count[$date][$type];

				$time[] = array('date' => $date, 'type' => $type, 'value' => round($value / 60 / $point, 2));
			}
		}

		return array($new, $done, $time);
	}

	public function quests_maps($cache_date)
	{
		$result = $this->DB->quests_map_collect($cache_date);
		$collect = $this->type_data($result);

		$result = $this->DB->quests_map_chests($cache_date);
		$maps = $this->type_data($result);

		$result = $this->DB->quests_map_result($cache_date);
		while ($row = $result->fetch())
			$maps[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['value']);

		return array($collect, $maps);
	}

	public function quests_awards($cache_date)
	{
		$result = $this->DB->quests_chests_open($cache_date);
		$chests = $this->type_data($result);

		$result = $this->DB->quests_pharaon_package($cache_date);
		$pharaon = $this->type_data($result);

		return array($chests, $pharaon);
	}

	public function quests_exchange($cache_date)
	{
		$result = $this->DB->quests_exchange($cache_date);
		$exchange = $this->type_data($result);

		return array($exchange);
	}

	public function quests_friend_achieve($cache_date)
	{
		$friend_achieve = array();

		$result = $this->DB->quests_friend_achieve($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] <= 5 ? $row['data'] : 5;

			if (!isset($friend_achieve[$date.'-'.$type]))
				$friend_achieve[$date.'-'.$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$friend_achieve[$date.'-'.$type]['value'] += $row['value'];
		}

		$friend_achieve = array_values($friend_achieve);

		return array($friend_achieve);
	}

	public function quests_puzzle($cache_date)
	{
		$result = $this->DB->quests_puzzle($cache_date);
		$puzzle = $this->type_data($result);

		return array($puzzle);
	}

	public function quests_viral($cache_date)
	{
		$data = array();

		$result = $this->DB->quests_viral_deactive($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($data[$date]))
				$data[$date] = array();
			$data[$date][$type] = $row['value'];
		}

		$ratio = array();
		$active = array();
		$cancel = array();

		$result = $this->DB->quests_viral_active($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = 0;

			if (isset($data[$date][$type]))
				$value = $data[$date][$type];

			$ratio[] = array('date' => $date, 'type' => $type, 'value' => round($value / $row['value'], 2));
			$active[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if ($value == 0)
				continue;

			$cancel[] = array('date' => $date, 'type' => $type, 'value' => $value);
		}

		return array($ratio, $active, $cancel);
	}

	public function quests_viral_new($cache_date)
	{
		$result = $this->DB->quests_viral_new($cache_date);

		return array($this->type_data($result));
	}

	/**
	 * Достижения
	 */
	public function achievements_total($cache_date)
	{
		$result = $this->DB->achievements_total($cache_date);
		$total = $this->type_data($result);

		return array($total);
	}

	public function achievements_common($cache_date)
	{
		return $this->achievements_all($cache_date, "common");
	}

	public function achievements_consumer($cache_date)
	{
		return $this->achievements_all($cache_date, "consumer");
	}

	public function achievements_shaman($cache_date)
	{
		return $this->achievements_all($cache_date, "shaman");
	}

	public function achievements_epic($cache_date)
	{
		return $this->achievements_all($cache_date, "epic");
	}

	/**
	 * События
	 */
	public function events_easter($cache_date)
	{
		$result = $this->DB->events_pickups($cache_date);
		$pickups = $this->type_data($result);

		$flow = array();
		$cakes = array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0);

		$result = $this->DB->events_cakes();
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($cakes[$type]))
				continue;
			$cakes[$type] += $row['value'];

			$days = $this->date_diff($date, $cache_date);
			if ($days < 0)
				continue;

			$flow[] = array('date' => $date, 'type' => $type, 'value' => $cakes[$type]);
		}

		return array($pickups, $flow);
	}

	public function events_childrens_day($cache_date)
	{
		$result = $this->DB->events_elements($cache_date);
		$elements = $this->type_data($result);

		$result = $this->DB->events_megablock($cache_date);
		$megablock = $this->type_data($result);

		return array($elements, $megablock);
	}

	public function events_helloween($cache_date)
	{
		$result = $this->DB->events_lottery($cache_date);
		$lottery = $this->type_data($result);

		$result = $this->DB->events_vampire_award($cache_date);
		$vampire_award = $this->type_data($result);

		$result = $this->DB->events_sweets($cache_date);
		$sweets = $this->type_data($result);

		$result = $this->DB->events_vampire_magic($cache_date);
		$vampire_magic = $this->type_data($result);

		$result = $this->DB->events_lottery_post($cache_date);
		$lottery_post = $this->type_data($result);

		return array($lottery, $vampire_award, $sweets, $vampire_magic, $lottery_post);
	}

	public function events_birthday($cache_date)
	{
		$result = $this->DB->counters_award_ten_coins($cache_date);
		$award_ten_coins = $this->type_data($result);

		return array($award_ten_coins);
	}

	public function events_ny2014($cache_date)
	{
		$snowflakes_flow = array();

		$result = $this->DB->events_ny_awards($cache_date);
		$awards = $this->type_data($result);

		$result = $this->DB->events_ny_posts($cache_date);
		$post_awards = $this->type_data($result);

		$snowflakes_location = array();
		$total = array();

		$result = $this->DB->events_ny_snowflakes_location($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			$snowflakes_location[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if (!isset($total[$date]))
				$total[$date] = 0;

			$total[$date] += $row['value'];
		}

		$snowflakes_type = array();

		$result = $this->DB->events_ny_snowflakes_type($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			$snowflakes_type[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if ($type == 0)
				$snowflakes_location[$date."-14"] = array('date' => $date, 'type' => 14, 'value' => $row['value'] - $total[$date]);
		}

		$result = $this->DB->events_ny_snowflakes_flow($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($type != 0)
				$row['value'] *= -1;

			$snowflakes_flow[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if (isset($snowflakes_flow[$date."-0"]) && isset($snowflakes_flow[$date."-1"]))
				$snowflakes_flow[$date."-2"] = array('date' => $date, 'type' => 2, 'value' => $snowflakes_flow[$date."-0"]['value'] + $snowflakes_flow[$date."-1"]['value']);
		}

		$result = $this->DB->events_ny_magic($cache_date);
		$magic = $this->type_data($result);

		$result = $this->DB->events_ny_wolf($cache_date);
		$wolf = $this->type_data($result);

		$snowflakes_location = array_values($snowflakes_location);
		$snowflakes_flow = array_values($snowflakes_flow);

		return array($awards, $post_awards, $snowflakes_location, $snowflakes_type, $snowflakes_flow, $magic, $wolf);
	}

	public function events_olympiad($cache_date)
	{
		$ring_flow = array();
		$ticket_flow = array();
		$visits = array();
		$likes = array();
		$dislikes = array();
		$waiting = array();

		$result = $this->DB->events_olymp_roulette($cache_date);
		$roulette = $this->type_data($result);

		$result = $this->DB->events_olymp_posts($cache_date);
		$posts = $this->type_data($result);

		$result = $this->DB->events_olymp_rings_location($cache_date);
		$rings_location = $this->type_data($result);

		$result = $this->DB->events_olymp_rings_type($cache_date);
		$rings_type = $this->type_data($result);

		$result = $this->DB->events_olymp_snowboard($cache_date);
		$snowboard = $this->type_data($result);

		$result = $this->DB->events_olymp_ring_flow($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($type != 0)
				$row['value'] *= -1;

			$ring_flow[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if (isset($ring_flow[$date."-0"]) && isset($ring_flow[$date."-1"]))
				$ring_flow[$date."-2"] = array('date' => $date, 'type' => 2, 'value' => $ring_flow[$date."-0"]['value'] + $ring_flow[$date."-1"]['value']);
		}

		$result = $this->DB->events_olymp_ticket_flow($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($type != 0)
				$row['value'] *= -1;

			$ticket_flow[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if (isset($ticket_flow[$date."-0"]) && isset($ticket_flow[$date."-1"]))
				$ticket_flow[$date."-2"] = array('date' => $date, 'type' => 2, 'value' => $ticket_flow[$date."-0"]['value'] + $ticket_flow[$date."-1"]['value']);
		}

		$result = $this->DB->events_olymp_visits($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$type = $type%10;

			if (!isset($visits[$date."-".$type]))
				$visits[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$visits[$date."-".$type]['value'] += $row['value'];
		}

		$result = $this->DB->events_olymp_ticket_type($cache_date);
		$ticket_type = $this->type_data($result);

		$result = $this->DB->events_olymp_like($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$type = $type%10;

			if (!isset($likes[$date."-".$type]))
				$likes[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$likes[$date."-".$type]['value'] += $row['value'];
		}

		$result = $this->DB->events_olymp_dislike($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$type = $type%10;

			if (!isset($dislikes[$date."-".$type]))
				$dislikes[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$dislikes[$date."-".$type]['value'] += $row['value'];
		}

		$result = $this->DB->events_olymp_waiting($cache_date);
		while ($row = $result->fetch())
		{
			$time_intervals = array(0 => "<10", 1 => "10-60", 2 => ">60");
			$date = $row['date'];
			$type = $row['data'];
			$type = $this->get_index($type, $time_intervals, 0);

			if (!isset($waiting[$date."-".$type]))
				$waiting[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$waiting[$date."-".$type]['value'] += $row['value'];
		}

		$ring_flow = array_values($ring_flow);
		$ticket_flow = array_values($ticket_flow);
		$visits = array_values($visits);
		$likes = array_values($likes);
		$dislikes = array_values($dislikes);
		$waiting = array_values($waiting);

		return array($roulette, $posts, $rings_location, $rings_type, $snowboard, $ring_flow, $ticket_flow, $visits, $ticket_type, $likes, $dislikes, $waiting);
	}

	public function events_easter_2014($cache_date)
	{
		$balance = array();

		$result = $this->DB->events_egg_flow($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = $row['value'];

			if ($type != 0)
			{
				$value *= $type * -1;
				$type = 1;
			}

			if (!isset($balance[$date."_".$type]))
				$balance[$date."_".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			if (!isset($balance[$date."_2"]))
				$balance[$date."_2"] = array('date' => $date, 'type' => 2, 'value' => 0);

			$balance[$date."_".$type]['value'] += $value;
			$balance[$date."_2"]['value'] += $value;
		}

		$result = $this->DB->events_egg_count($cache_date);
		$count = $this->type_data($result);

		$fail_upgrade = array();

		$result = $this->DB->events_egg_upgrade_fail($cache_date);
		while ($row = $result->fetch())
			$fail_upgrade[$row['date']."-".$row['data']] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['value']);

		$success_upgrade = array();

		$result = $this->DB->events_egg_upgrade($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = $row['value'];

			if (isset($fail_upgrade[$date."-".$type]))
				$value -= $fail_upgrade[$date."-".$type]['value'];

			$success_upgrade[] = array('date' => $date, 'type' => $type, 'value' => $value);
		}

		$wins = array();
		$looses = array();

		$result = $this->DB->events_egg_battle($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($type >= 10)
			{
				$looses[] = array('date' => $date, 'type' => $type - 10, 'value' => $row['value']);
				continue;
			}

			$wins[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		$fail_upgrade = array_values($fail_upgrade);

		return array($balance, $count, $success_upgrade, $fail_upgrade, $wins, $looses);
	}

	public function events_september_elements($cache_date)
	{
		$spawn = array();

		$result = $this->DB->events_september_spawn($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;

			if (!isset($spawn[$date."-".$type]))
				$spawn[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$spawn[$date."-".$type]['value'] += $row['value'];
		}

		$pickups = array();
		$ratio = array();

		$result = $this->DB->events_september_pickups($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;

			if (!isset($pickups[$date."-".$type]))
				$pickups[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$pickups[$date."-".$type]['value'] += $row['value'];

			if (!isset($spawn[$date."-".$type]) || $spawn[$date."-".$type] == 0)
				continue;
			$point = &$spawn[$date."-".$type]['value'];

			if (!isset($ratio[$date."-".$type]))
				$ratio[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$ratio[$date."-".$type]['value'] += $row['value'] / $point;
		}

		while (list($key) = each($ratio))
			$ratio[$key]['value'] = round($ratio[$key]['value'], 2);

		$pickups = array_values($pickups);
		$spawn = array_values($spawn);
		$ratio = array_values($ratio);

		return array($pickups, $spawn, $ratio);
	}

	public function events_september_rolls($cache_date)
	{
		$result = $this->DB->events_september_rolls($cache_date);
		$rolls = $this->type_data($result);

		$result = $this->DB->events_september_awards($cache_date);
		$awards = $this->type_data($result);

		$result = $this->DB->events_september_clothes($cache_date);
		$clothes = $this->type_data($result);

		return array($rolls, $awards, $clothes);
	}

	public function events_halloween_2014_elements($cache_date)
	{
		$spawn = array();

		$result = $this->DB->events_halloween_spawn($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;

			if (!isset($spawn[$date."-".$type]))
				$spawn[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$spawn[$date."-".$type]['value'] += $row['value'];
		}

		$pickups = array();
		$ratio = array();

		$result = $this->DB->events_halloween_pickup($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;

			if (!isset($pickups[$date."-".$type]))
				$pickups[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$pickups[$date."-".$type]['value'] += $row['value'];

			if (!isset($spawn[$date."-".$type]) || $spawn[$date."-".$type] == 0)
				continue;
			$point = &$spawn[$date."-".$type]['value'];

			if (!isset($ratio[$date."-".$type]))
				$ratio[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$ratio[$date."-".$type]['value'] += $row['value'] / $point;
		}

		while (list($key) = each($ratio))
			$ratio[$key]['value'] = round($ratio[$key]['value'], 2);

		$pickups = array_values($pickups);
		$spawn = array_values($spawn);
		$ratio = array_values($ratio);

		return array($pickups, $spawn, $ratio);
	}

	public function events_halloween_2014_rolls($cache_date)
	{
		$result = $this->DB->events_halloween_awards($cache_date);
		$awards = $this->type_data($result);

		$result = $this->DB->events_halloween_clothes($cache_date);
		$clothes = $this->type_data($result);

		return array($awards, $clothes);
	}

	public function events_olympiad_maps($cache_date)
	{
		$counts = array();
		$modes_merge = array(2114030 => 0, 2114039 => 0, 2114898 => 0, 2114040 => 0, 2114897 => 0, 2114042 => 1, 2114041 => 1, 2114031 => 1, 2114900 => 1, 2114901 => 1, 2114054 => 2, 2114908 => 2, 2114053 => 2, 2114905 => 2, 2114037 => 2, 2114044 => 3, 2114910 => 3, 2114909 => 3, 2114032 => 3, 2114043 => 3, 2114033 => 4, 2114913 => 4, 2114912 => 4, 2114045 => 4, 2114046 => 4, 2114055 => 5, 2114917 => 5, 2114918 => 5, 2114056 => 5, 2114038 => 5, 2114920 => 6, 2114050 => 6, 2114049 => 6, 2114922 => 6, 2114035 => 6, 2114926 => 7, 2114929 => 7, 2114036 => 7, 2114052 => 7, 2114051 => 7, 2114057 => 8, 2114034 => 9, 2114048 => 9, 2114047 => 9, 2114930 => 9, 2114931 => 9);

		$result = $this->DB->events_olympiad_maps_count($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($modes_merge[$type]))
				continue;

			$mod = $modes_merge[$type];
			if (!isset($counts[$date."-".$mod]))
				$counts[$date."-".$mod] = 0;

			$counts[$date."-".$mod] += $row['value'];
			$counts[$date."-".$type] = $row['value'];
		}

		$time = array();

		$result = $this->DB->events_olympiad_maps_time($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($modes_merge[$type]))
				continue;

			$mod = $modes_merge[$type];
			if (!isset($time[$date."-".$mod]))
				$time[$date."-".$mod] = array('date' => $date, 'type' => $mod, 'value' => 0);

			$time[$date."-".$mod]['value'] += $row['value'];
			$time[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		$points = array();

		$result = $this->DB->events_olympiad_maps_points($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($modes_merge[$type]))
				continue;

			$mod = $modes_merge[$type];
			if (!isset($points[$date."-".$mod]))
				$points[$date."-".$mod] = array('date' => $date, 'type' => $mod, 'value' => 0);

			$points[$date."-".$mod]['value'] += $row['value'];
			$points[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		while (list($id) = each($time))
		{
			$row = &$time[$id];

			if (!isset($counts[$id]))
				continue;
			$count = &$counts[$id];

			$row['value'] = round($row['value'] / $count, 2);

			if (!isset($points[$id]))
				continue;

			$points[$id]['value'] = round($points[$id]['value'] / $count, 2);
		}

		$time = array_values($time);
		$points = array_values($points);

		return array($time, $points);
	}

	public function events_olympiad_games($cache_date)
	{
		$all = array();
		$vip = array();

		$result = $this->DB->events_olympiad_games($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 16;
			$is_vip = ($row['data'] & 0xFFFF) >> 8;

			if (!isset($all[$date."-".$type]))
			{
				$all[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
				$vip[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			}

			if ($is_vip === 0)
				$all[$date."-".$type]['value'] += $row['value'];
			else
				$vip[$date."-".$type]['value'] += $row['value'];
		}

		return array($all, $vip);
	}

	public function events_ny2015_snowflakes ($cache_date)
	{
		$pickup = array();
		$created = array();
		$ratio = array();
		$total = array();
		$average = array();

		$result = $this->DB->events_ny2015_pickup($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];

			if (!isset($pickup[$date]))
				$pickup[$date] = array();
			if (!isset($total[$date]))
				$total[$date] = 0;

			$total[$date] += $row['value'];
			$pickup[$date][$row['data']] = $row['value'];
		}

		$result = $this->DB->events_ny2015_snow_unique($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			if (!isset($total[$date]))
				continue;

			$average[] = array('date' => $date, 'type' => 0, 'value' => round($total[$date] / $row['value'], 2));
		}

		$result = $this->DB->events_ny2015_created($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];

			if (!isset($created[$date]))
				$created[$date] = array();
			$created[$date][$row['data']] = $row['value'];
		}

		while (list($date, $locations) = each($pickup))
		{
			if (!isset($created[$date]))
				continue;

			while (list($location, $value) = each($locations))
			{
				if (!isset($created[$date][$location]))
					continue;

				$ratio[] = array('date' => $date, 'type' => $location, 'value' => round($value / $created[$date][$location], 2));
			}
		}

		$result = $this->DB->events_ny2015_ways($cache_date);
		$ways = $this->type_data($result);

		return array($ratio, $ways, $average);
	}

	public function events_ny2015_games($cache_date)
	{
		$sums = array();
		$fails = array();
		$duration = array();

		$result = $this->DB->events_ny2015_games($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['location'];
			if (!isset($sums[$date."-".$type]))
				$sums[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$sums[$date."-".$type]['value'] += $row['value'];

			if ($row['count'] > 0)
				continue;

			if (!isset($fails[$date."-".$type]))
				$fails[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$fails[$date."-".$type]['value'] += $row['value'];
		}

		$result = $this->DB->events_ny2015_games_duration($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($sums[$date."-".$type]))
				continue;
			$point = &$sums[$date."-".$type];

			$duration[] = array('date' => $date, 'type' => $type, 'value' => round($row['value'] / $point['value'], 2));
		}

		$sums = array_values($sums);
		$fails = array_values($fails);

		return array($sums, $fails, $duration);
	}

	public function events_ny2015_tree($cache_date)
	{
		$sums = array();
		$average = array();

		$result = $this->DB->events_ny2015_tree_gifts($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			$sums[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		$result = $this->DB->events_ny2015_baubles_unique($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];

			if (!isset($sums[$date."-4"]))
				continue;
			$point = &$sums[$date."-4"];

			$average[] = array('date' => $date, 'type' => 0, 'value' => round($point['value'] / $row['value'], 2));
		}

		$result = $this->DB->events_ny2015_trees($cache_date);
		$trees = $this->type_data($result);

		$result = $this->DB->events_ny2015_gift_accepted($cache_date);
		$gifts = $this->type_data($result);

		$result = $this->DB->events_ny2015_gift_sent($cache_date);
		while ($row = $result->fetch())
			$gifts[] = array('date' => $row['date'], 'type' => 0, 'value' => $row['value']);

		$sums = array_values($sums);

		return array($sums, $trees, $gifts, $average);
	}

	public function events_ny2015_enchantment($cache_date)
	{
		$enchantments = array();
		$by_level = array();

		$result = $this->DB->events_ny2015_accessory_up($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'] >> 8;
			$level = $row['data'] & 0xFF;

			if (!isset($enchantments[$date."-".$type]))
				$enchantments[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$enchantments[$date."-".$type]['value'] += $row['value'];

			if ($type == 0)
				continue;

			if (!isset($by_level[$date."-".$level]))
				$by_level[$date."-".$level] = array('date' => $date, 'type' => $level, 'value' => 0);

			$by_level[$date."-".$level]['value'] += $row['value'];
		}

		$enchantments = array_values($enchantments);
		$by_level = array_values($by_level);

		return array($enchantments, $by_level);
	}

	/**
	 * События (API)
	 */
	public function api_loading($cache_date)
	{
		$paths = array(
			array("FRAME_LOADED", "GAME_LOADED", "PLAYER_LOADED"),
			array("VK", "OK", "MM", "FB", "FS", "RG")
		);

		$result = $this->Events->get_visitors(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($paths[$type]))
				continue;

			list($type, $graph) = $paths[$type];

			if (!isset($data[$graph]))
				$data[$graph] = array();
			$data[$graph][] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return $data;
	}

	public function api_loading_time($cache_date)
	{
		$paths = array(
			array("GAME_LOADED", "PLAYER_LOADED"),
			false,
			true
		);

		$result = $this->Events->get_visitors(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($paths[$type]))
				continue;

			list($graph, $type) = $paths[$type];
			$type = $this->get_loading_time_index($graph, $type);

			if ($type < 0)
				continue;

			if (!isset($data[$graph]))
				$data[$graph] = array();

			if (!isset($data[$graph][$date."-".$type]))
				$data[$graph][$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data[$graph][$date."-".$type]['value'] += $row['value'];
		}

		return $data;
	}

	public function api_fullscreen($cache_date)
	{
		$paths = array(
			array("FULLSCREEN_SHOW"),
			false
		);

		$result = $this->Events->get_mixed(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];

			if (!isset($data[$date]))
			{
				$data[$date."-0"] = array('date' => $date, 'type' => 0, 'value' => 0);
				$data[$date."-1"] = array('date' => $date, 'type' => 1, 'value' => 0);
			}

			$data[$date."-0"]['value'] += $row['hits'];
			$data[$date."-1"]['value'] += $row['visitors'];
		}

		$data = array_values($data);

		return array($data);
	}

	public function api_daily_quests($cache_date)
	{
		$paths = array(
			array("PLAYER_LOADED"),
			false
		);

		$result = $this->Events->get_visitors(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];

			if (!isset($dau[$date]))
				$dau[$date] = 0;

			$dau[$date] += $row['value'];
		}

		$paths = array(
			array("DAILY_QUEST"),
			array("START"),
			false
		);

		$result = $this->Events->get_mixed(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];

			if (!isset($data[$date."-0"]))
			{
				$data[$date."-0"] = array('date' => $date, 'type' => 0, 'value' => 0);
				$data[$date."-1"] = array('date' => $date, 'type' => 1, 'value' => 0);
			}

			$data[$date."-0"]['value'] += $row['hits'];
			$data[$date."-1"]['value'] += $row['visitors'];
		}

		while (list($date, $value) = each($dau))
		{
			if (!isset($data[$date."-1"]))
				continue;

			$data[$date."-2"] = array('date' => $date, 'type' => 2, 'value' => round($data[$date."-1"]['value'] / $value * 100, 2));
		}

		$data = array_values($data);

		return array($data);
	}

	public function api_loading_net($cache_date)
	{
		$paths = array(
			array("PLAYER_LOADED", "LOGIN_EXIST", "LOGIN_FAILED", "LOGIN_BLOCKED", "LOGIN_WRONG_VERSION"),
			array("VK", "OK", "MM", "FB", "FS", "RG")
		);

		$result = $this->Events->get_visitors(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($paths[$type]))
				continue;

			list($type, $graph) = $paths[$type];

			if (!isset($data[$graph]))
				$data[$graph] = array();
			$data[$graph][] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return $data;
	}

	public function api_fps($cache_date)
	{
		$paths = array(
			array("CLIENT_FPS"),
			true
		);

		$result = $this->Events->get_visitors(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($paths[$type]))
				continue;

			list(, $type) = $paths[$type];

			$data[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return array($data);
	}

	public function api_fps_average($cache_date)
	{
		$paths = array(
			array("CLIENT_FPS_AVG"),
			true
		);

		$result = $this->Events->get_visitors(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			list(, $type) = $paths[$type];

			$data[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return array($data);
	}

	public function api_lag($cache_date)
	{
		$paths = array(
			array("CLIENT_FPS_MIN"),
			true
		);

		$result = $this->Events->get_visitors(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			list(, $type) = $paths[$type];

			$data[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);
		}

		return array($data);
	}

	public function api_acceleration($cache_date)
	{
		$paths = array(
			array("ACCELERATION_ENABLED")
		);

		$result = $this->Events->get_visitors(self::$service_id, $cache_date, $paths);
		if ($result === false)
			return array();

		$data = array();

		while ($row = $result->fetch())
			$data[] = array('date' => $row['date'], 'type' => 0, 'value' => $row['value']);

		return array($data);
	}

	/**
	 * Скрытые отчеты
	 */
	public function hidden_payments_all($cache_date)
	{
		$data = array();

		$result = $this->DB->payments_net($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$net = $row['data'];
			$prices = $this->get_prices($date);

			if (!isset($prices[$net]))
				continue;

			if (!isset($data[$date]))
				$data[$date] = array('date' => $date, 'type' => 0, 'value' => 0);
			$data[$date]['value'] += round($row['sum'] * $prices[$net], 2);
		}

		$data = array_values($data);

		return array($data);
	}

	public function hidden_payments_net($cache_date)
	{
		$data = array();

		$result = $this->DB->payments_net($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$prices = $this->get_prices($date);

			if (!isset($prices[$type]))
				continue;

			$data[] = array('date' => $date, 'type' => $type, 'value' => round($row['sum'] * $prices[$type], 2));
		}

		return array($data);
	}

	public function hidden_payments_age($cache_date)
	{
		$data = array();

		$result = $this->DB->finance_arpu_age($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$net = $row['net'];
			$type = $this->get_age_index($row['data']);
			$prices = $this->get_prices($date);

			if (!isset($prices[$net]))
				continue;

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data[$date."-".$type]['value'] += round($row['sum'] * $prices[$net], 2);
		}

		$data = array_values($data);

		return array($data);
	}

	public function hidden_payments_sex($cache_date)
	{
		$data = array();

		$result = $this->DB->finance_arpu_sex($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$net = $row['net'];
			$type = $row['data'];
			$prices = $this->get_prices($date);

			if (!isset($prices[$net]))
				continue;

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data[$date."-".$type]['value'] += round($row['sum'] * $prices[$net], 2);
		}

		$data = array_values($data);

		return array($data);
	}

	public function hidden_payments_tag($cache_date)
	{
		$data = array();

		$result = $this->DB->finance_arpu_tag($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$net = $row['net'];
			$type = $row['data'];
			$prices = $this->get_prices($date);

			if (!isset($prices[$net]))
				continue;

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data[$date."-".$type]['value'] += round($row['sum'] * $prices[$net], 2);
		}

		$data = array_values($data);

		return array($data);
	}

	public function hidden_counters_mau($cache_date)
	{
		$all = array();
		$net = array();

		$cache_time = mktime(0, 0, 0, date("m"), 1, date("Y"));

		$result = $this->DB->hidden_counters_mau_net($cache_time);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			$net[] = array('date' => $date, 'type' => $type, 'value' => $row['value']);

			if (!isset($all[$date]))
				$all[$date] = array('date' => $date, 'type' => 0, 'value' => 0);
			$all[$date]['value'] += $row['value'];
		}

		$age = array();

		$result = $this->DB->hidden_counters_mau_age($cache_time);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_age_index($row['data']);

			if (!isset($age[$date."-".$type]))
				$age[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$age[$date."-".$type]['value'] += $row['value'];
		}

		$result = $this->DB->hidden_counters_mau_sex($cache_time);
		$sex = $this->type_data($result);

		$result = $this->DB->hidden_counters_mau_tag($cache_time);
		$tag = $this->type_data($result);

		$all = array_values($all);
		$age = array_values($age);

		return array($all, $net, $age, $sex, $tag);
	}

	public function hidden_paying_month($cache_date)
	{
		list($all, $net) = $this->hidden_paying_month_type($cache_date, "net");
		$age = $this->hidden_paying_month_type($cache_date, "age");
		$sex = $this->hidden_paying_month_type($cache_date, "sex");
		$tag = $this->hidden_paying_month_type($cache_date, "tag");

		return array($all, $net, $age, $sex, $tag);
	}

	public function apipath_common($cache_date)
	{
		return array();
	}

	/**
	 * Helper functions
	 */
	private function payments_type($cache_date, $key)
	{
		$sums = array();
		$counts = array();

		$result = $this->DB->{"payments_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($key == "age")
				$type = $this->get_age_index($type);

			if (!isset($sums[$date."-".$type]))
				$sums[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$sums[$date."-".$type]['value'] += $row['sum'];

			if (!isset($counts[$date."-".$type]))
				$counts[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$counts[$date."-".$type]['value'] += $row['count'];
		}

		$sums = array_values($sums);
		$counts = array_values($counts);

		return array($sums, $counts);
	}

	private function finance_arpu_type($cache_date, $key)
	{
		$data = array();
		$data_all = array();

		$result = $this->DB->{"finance_arpu_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$net = $row['net'];
			$prices = $this->get_prices($date);

			if ($key == "age")
				$type = $this->get_age_index($type);

			if (!isset($prices[$net]))
				continue;
			$row['sum'] *= $prices[$net];

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0, 'full' => false);
			$point = &$data[$date."-".$type];

			$point['value'] += $row['sum'];

			if (!isset($data_all[$date]))
				$data_all[$date] = array('date' => $date, 'type' => 0, 'value' => 0, 'full' => false);
			$data_all[$date]['value'] += $row['sum'];
		}

		$result = $this->DB->{"counters_dau_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = $row['value'];

			if ($value == 0)
				continue;

			if (!isset($data[$date."-".$type]))
				continue;
			$point = &$data[$date."-".$type];

			$point['value'] = round($point['value'] / $value, 2);
			$point['full'] = true;
		}

		$net = array();
		while (list(, $values) = each($data))
		{
			if (!$values['full'])
				continue;

			$net[] = $values;
		}

		if ($key != "net")
			return $net;

		$result = $this->DB->counters_dau_all($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$value = $row['value'];

			if ($value == 0)
				continue;

			if (!isset($data_all[$date]))
				continue;
			$point = &$data_all[$date];

			$point['value'] = round($point['value'] / $value, 2);
			$point['full'] = true;
		}

		$all = array();
		while (list(, $values) = each($data_all))
		{
			if (!$values['full'])
				continue;

			$all[] = $values;
		}

		return array($all, $net);
	}

	private function finance_arppu_type($cache_date, $key)
	{
		$data = array();

		$result = $this->DB->{"finance_arppu_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$net = $row['net'];
			$prices = $this->get_prices($date);

			if ($key == "age")
				$type = $this->get_age_index($type);

			if (!isset($prices[$net]))
				continue;
			$row['sum'] *= $prices[$net];

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'sum' => 0, 'count' => 0);
			$point = &$data[$date."-".$type];

			$point['sum'] += $row['sum'];
			$point['count'] += $row['count'];
		}

		$data = array_values($data);

		while (list($i, $values) = each($data))
			$data[$i]['value'] = round($values['sum'] / $values['count'], 2);

		if ($key != "net")
			return $data;

		$all = array();

		reset($data);
		while (list(, $values) = each($data))
		{
			$date = $values['date'];

			if (!isset($all[$date]))
				$all[$date] = array('date' => $date, 'type' => 0, 'sum' => 0, 'count' => 0);

			$all[$date]['sum'] += $values['sum'];
			$all[$date]['count'] += $values['count'];
		}

		$all = array_values($all);

		while (list($i, $values) = each($all))
			$all[$i]['value'] = round($values['sum'] / $values['count'], 2);

		return array($all, $data);
	}

	private function finance_ltv_type($cache_date, $key)
	{
		$data = array();
		$data_all = array();

		$result = $this->DB->{"players_retention_1d_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$time = strtotime($row['date']);
			$type = $row['data'];
			$days = $row['days'] * $row['value'];

			if (!isset($data[$time."-".$type]))
				$data[$time."-".$type] = array('time' => $time, 'type' => $type, 'days' => 0, 'value' => 0, 'sum' => 0);
			$point = &$data[$time."-".$type];

			$point['days'] += $days;
			$point['value'] += $row['value'];

			if (!isset($data_all[$time]))
				$data_all[$time] = array('days' => 0, 'value' => 0, 'sum' => 0);
			$point = &$data_all[$time];

			$point['days'] += $days;
			$point['value'] += $row['value'];
		}

		$cache_time = strtotime($cache_date);
		while (list(, $values) = each($data))
			$cache_time = min($cache_time, $values['time'] - 86400 * round($values['days'] / $values['value']));

		$payments = array();
		$payments_all = array();
		$cache_date = date("Y-m-d", $cache_time);

		$result = $this->DB->{"finance_arpu_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$time = strtotime($row['date']);
			$type = $row['data'];
			$net = $row['net'];
			$prices = $this->get_prices($row['date']);

			if ($key == "age")
				$type = $this->get_age_index($type);

			if (!isset($prices[$net]))
				continue;
			$row['sum'] *= $prices[$net];

			if (!isset($payments_all[$time]))
				$payments_all[$time] = 0;
			$payments_all[$time] += $row['sum'];

			if (!isset($payments[$type][$time]))
				$payments[$type][$time] = 0;
			$payments[$type][$time] += $row['sum'];
		}

		$offsets = array();

		while (list($type) = each($payments))
		{
			ksort($payments[$type]);
			$offset = 0;

			while (list($time) = each($payments[$type]))
				$offsets[$type][$time] = $offset++;
		}

		ksort($payments_all);
		$offsets_all = array();
		$offset = 0;

		while (list($time) = each($payments_all))
			$offsets_all[$time] = $offset++;

		$net = array();

		reset($data);
		while (list($i, $values) = each($data))
		{
			if ($values['value'] === 0)
				continue;

			$type = &$values['type'];
			$time = &$values['time'];
			$days = round($values['days'] / $values['value']);

			if (!isset($payments[$type]))
				continue;
			if (!isset($payments[$type][$time]))
				continue;

			$offset = $offsets[$type][$time] - $days;
			if ($offset < 0)
			{
				$days -= $offset;
				$offset = 0;
			}

			$sum = array_sum(array_slice($payments[$type], $offset, $days));

			if ($sum === 0)
				continue;

			$net[] = array('date' => date("Y-m-d", $time), 'type' => $type, 'value' => round($sum / $values['value'], 2));
		}

		if ($key !== "net")
			return $net;

		$all = array();

		while (list($time, $values) = each($data_all))
		{
			if ($values['value'] === 0)
				continue;

			$days = round($values['days'] / $values['value']);

			if (!isset($payments_all[$time]))
				continue;

			$offset = $offsets_all[$time] - $days;
			if ($offset < 0)
			{
				$days -= $offset;
				$offset = 0;
			}

			$sum = array_sum(array_slice($payments_all, $offset, $days));

			if ($sum === 0)
				continue;

			$all[] = array('date' => date("Y-m-d", $time), 'type' => 0, 'value' => round($sum / $values['value'], 2));
		}

		return array($all, $net);
	}

	private function finance_ltv_period_data($cache_date, $type)
	{
		$data = array(array(), array(), array(), array(), array(), array(), array(), array());
		$players_all_count = array();
		$players_net_count = array();
		$players_age_count = array();
		$players_sex_count = array();
		$players_all_existed = array();
		$players_net_existed = array();
		$players_age_existed = array();
		$players_sex_existed = array();
		$sex_config = array(
			0 => array(2 => 0, 1 => 1, 0 => 2),
			1 => array(2 => 3, 1 => 4, 0 => 5),
			2 => array(2 => 6, 1 => 7, 0 => 8)
		);

		$result = $this->DB->{"ltv_period_".$type}($cache_date, $cache_date, $cache_date);
		while ($row = $result->fetch())
		{
			$date = date("Y-m-d", strtotime($row['register_time']));
			$prices = $this->get_prices($date);

			if (!isset($prices[$row['type']]))
				continue;

			if (strtotime($row['time']) <= strtotime($row['register_time']) + 172800)
				$sum_type = 0;
			else if (strtotime($row['time']) <= strtotime($row['register_time']) + 691200)
				$sum_type = 1;
			else if (strtotime($row['time']) <= strtotime($row['register_time']) + 2678400)
				$sum_type = 2;
			else
				continue;

			$sum = $prices[$row['type']] * $row['balance'];

			$all_key = $sum_type."-".$date;

			if (!isset($data[0][$all_key]))
				$data[0][$all_key] = array('date' => $date, 'type' => $sum_type, 'value' => 0);

			$data[0][$all_key]['value'] += $sum;

			if (!isset($players_all_count[$all_key]))
				$players_all_count[$all_key] = 0;

			if (!isset($players_all_existed[$row['inner_id']."-".$all_key]))
			{
				$players_all_existed[$row['inner_id']."-".$all_key] = 0;
				$players_all_count[$all_key]++;
			}

			if ($sum_type === 0)
			{
				$all_key = "1-".$date;

				if (!isset($data[0][$all_key]))
					$data[0][$all_key] = array('date' => $date, 'type' => 1, 'value' => 0);

				$data[0][$all_key]['value'] += $sum;

				if (!isset($players_all_count[$all_key]))
					$players_all_count[$all_key] = 0;

				if (!isset($players_all_existed[$row['inner_id']."-".$all_key]))
				{
					$players_all_existed[$row['inner_id']."-".$all_key] = 0;
					$players_all_count[$all_key]++;
				}

				$all_key = "2-".$date;

				if (!isset($data[0][$all_key]))
					$data[0][$all_key] = array('date' => $date, 'type' => 2, 'value' => 0);

				$data[0][$all_key]['value'] += $sum;

				if (!isset($players_all_count[$all_key]))
					$players_all_count[$all_key] = 0;

				if (!isset($players_all_existed[$row['inner_id']."-".$all_key]))
				{
					$players_all_existed[$row['inner_id']."-".$all_key] = 0;
					$players_all_count[$all_key]++;
				}
			}

			if ($sum_type === 1)
			{
				$all_key = "2-".$date;

				if (!isset($data[0][$all_key]))
					$data[0][$all_key] = array('date' => $date, 'type' => 2, 'value' => 0);

				$data[0][$all_key]['value'] += $sum;

				if (!isset($players_all_count[$all_key]))
					$players_all_count[$all_key] = 0;

				if (!isset($players_all_existed[$row['inner_id']."-".$all_key]))
				{
					$players_all_existed[$row['inner_id']."-".$all_key] = 0;
					$players_all_count[$all_key]++;
				}
			}

			$net_chart = $sum_type + 1;
			$net_key = $net_chart."-".$row['type']."-".$date;

			if (!isset($players_net_count[$net_key]))
				$players_net_count[$net_key] = 0;

			if (!isset($players_net_existed[$row['inner_id']."-".$net_key]))
			{
				$players_net_existed[$row['inner_id']."-".$net_key] = 0;
				$players_net_count[$net_key]++;
			}

			if (!isset($data[$net_chart][$net_key]))
				$data[$net_chart][$net_key] = array('date' => $date, 'type' => $row['type'], 'value' => 0);

			$data[$net_chart][$net_key]['value'] += $sum;

			if ($sum_type === 0)
			{
				$net_key = "2-".$row['type']."-".$date;

				if (!isset($players_net_count[$net_key]))
					$players_net_count[$net_key] = 0;

				if (!isset($players_net_existed[$row['inner_id']."-".$net_key]))
				{
					$players_net_existed[$row['inner_id']."-".$net_key] = 0;
					$players_net_count[$net_key]++;
				}

				if (!isset($data[2][$net_key]))
					$data[2][$net_key] = array('date' => $date, 'type' => $row['type'], 'value' => 0);

				$data[2][$net_key]['value'] += $sum;

				$net_key = "3-".$row['type']."-".$date;

				if (!isset($players_net_count[$net_key]))
					$players_net_count[$net_key] = 0;

				if (!isset($players_net_existed[$row['inner_id']."-".$net_key]))
				{
					$players_net_existed[$row['inner_id']."-".$net_key] = 0;
					$players_net_count[$net_key]++;
				}

				if (!isset($data[3][$net_key]))
					$data[3][$net_key] = array('date' => $date, 'type' => $row['type'], 'value' => 0);

				$data[3][$net_key]['value'] += $sum;
			}

			if ($sum_type === 1)
			{
				$net_key = "3-".$row['type']."-".$date;

				if (!isset($players_net_count[$net_key]))
					$players_net_count[$net_key] = 0;

				if (!isset($players_net_existed[$row['inner_id']."-".$net_key]))
				{
					$players_net_existed[$row['inner_id']."-".$net_key] = 0;
					$players_net_count[$net_key]++;
				}

				if (!isset($data[3][$net_key]))
					$data[3][$net_key] = array('date' => $date, 'type' => $row['type'], 'value' => 0);

				$data[3][$net_key]['value'] += $sum;
			}

			$age_chart = $sum_type + 4;
			$age_index = $row['bday'] == 0 ? 0 : $this->get_age_index(date("Y") - date("Y", $row['bday']));
			$age_key = $age_chart."-".$age_index."-".$row['register_time'];

			if (!isset($data[$age_chart][$age_key]))
				$data[$age_chart][$age_key] = array('date' => $date, 'type' => $age_index, 'value' => 0);

			$data[$age_chart][$age_key]['value'] += $sum;

			if (!isset($players_age_count[$age_key]))
				$players_age_count[$age_key] = 0;

			if (!isset($players_age_existed[$row['inner_id']."-".$age_key]))
			{
				$players_age_existed[$row['inner_id']."-".$age_key] = 0;
				$players_age_count[$age_key]++;
			}

			if ($sum_type === 0)
			{
				$age_key = "5-".$age_index."-".$row['register_time'];

				if (!isset($players_age_count[$age_key]))
				$players_age_count[$age_key] = 0;

				if (!isset($players_age_existed[$row['inner_id']."-".$age_key]))
				{
					$players_age_existed[$row['inner_id']."-".$age_key] = 0;
					$players_age_count[$age_key]++;
				}

				if (!isset($data[5][$age_key]))
					$data[5][$age_key] = array('date' => $date, 'type' => $age_index, 'value' => 0);

				$data[5][$age_key]['value'] += $sum;

				$age_key = "6-".$age_index."-".$row['register_time'];

				if (!isset($players_age_count[$age_key]))
				$players_age_count[$age_key] = 0;

				if (!isset($players_age_existed[$row['inner_id']."-".$age_key]))
				{
					$players_age_existed[$row['inner_id']."-".$age_key] = 0;
					$players_age_count[$age_key]++;
				}

				if (!isset($data[6][$age_key]))
					$data[6][$age_key] = array('date' => $date, 'type' => $age_index, 'value' => 0);

				$data[6][$age_key]['value'] += $sum;
			}

			if ($sum_type === 1)
			{
				$age_key = "6-".$age_index."-".$row['register_time'];

				if (!isset($players_age_count[$age_key]))
				$players_age_count[$age_key] = 0;

				if (!isset($players_age_existed[$row['inner_id']."-".$age_key]))
				{
					$players_age_existed[$row['inner_id']."-".$age_key] = 0;
					$players_age_count[$age_key]++;
				}

				if (!isset($data[6][$age_key]))
					$data[6][$age_key] = array('date' => $date, 'type' => $age_index, 'value' => 0);

				$data[6][$age_key]['value'] += $sum;
			}

			$sex_type = $sex_config[$sum_type][$row['sex']];
			$sex_key = $sex_type."-".$row['register_time'];

			if (!isset($data[7][$sex_key]))
				$data[7][$sex_key] = array('date' => $date, 'type' => $sex_type, 'value' => 0);

			$data[7][$sex_key]['value'] += $sum;

			if (!isset($players_sex_count[$sex_key]))
				$players_sex_count[$sex_key] = 0;

			if (!isset($players_sex_existed[$row['inner_id']."-".$sex_key]))
			{
				$players_sex_existed[$row['inner_id']."-".$sex_key] = 0;
				$players_sex_count[$sex_key]++;
			}

			if ($sum_type === 0)
			{
				$sex_type = $sex_config[1][$row['sex']];
				$sex_key = $sex_type."-".$row['register_time'];

				if (!isset($data[7][$sex_key]))
					$data[7][$sex_key] = array('date' => $date, 'type' => $sex_type, 'value' => 0);

				$data[7][$sex_key]['value'] += $sum;

				if (!isset($players_sex_count[$sex_key]))
					$players_sex_count[$sex_key] = 0;

				if (!isset($players_sex_existed[$row['inner_id']."-".$sex_key]))
				{
					$players_sex_existed[$row['inner_id']."-".$sex_key] = 0;
					$players_sex_count[$sex_key]++;
				}

				$sex_type = $sex_config[2][$row['sex']];
				$sex_key = $sex_type."-".$row['register_time'];

				if (!isset($data[7][$sex_key]))
					$data[7][$sex_key] = array('date' => $date, 'type' => $sex_type, 'value' => 0);

				$data[7][$sex_key]['value'] += $sum;

				if (!isset($players_sex_count[$sex_key]))
					$players_sex_count[$sex_key] = 0;

				if (!isset($players_sex_existed[$row['inner_id']."-".$sex_key]))
				{
					$players_sex_existed[$row['inner_id']."-".$sex_key] = 0;
					$players_sex_count[$sex_key]++;
				}
			}

			if ($sum_type === 1)
			{
				$sex_type = $sex_config[2][$row['sex']];
				$sex_key = $sex_type."-".$row['register_time'];

				if (!isset($data[7][$sex_key]))
					$data[7][$sex_key] = array('date' => $date, 'type' => $sex_type, 'value' => 0);

				$data[7][$sex_key]['value'] += $sum;

				if (!isset($players_sex_count[$sex_key]))
					$players_sex_count[$sex_key] = 0;

				if (!isset($players_sex_existed[$row['inner_id']."-".$sex_key]))
				{
					$players_sex_existed[$row['inner_id']."-".$sex_key] = 0;
					$players_sex_count[$sex_key]++;
				}
			}
		}

		while (list($key, ) = each($data[0]))
		{
			$players_count = $type === "all" ? $players_all_count["2-".$data[0][$key]['date']] : $players_all_count[$key];

			$data[0][$key]['value'] = round($data[0][$key]['value'] / $players_count, 2);
		}

		while (list($key, ) = each($data[1]))
		{
			list(, $current_key) = explode("-", $key, 2);

			$players_count = $type === "all" ? $players_net_count["3-".$current_key] : $players_net_count[$key];

			$data[1][$key]['value'] = round($data[1][$key]['value'] / $players_count, 2);
		}

		while (list($key, ) = each($data[2]))
		{
			list(, $current_key) = explode("-", $key, 2);

			$players_count = $type === "all" ? $players_net_count["3-".$current_key] : $players_net_count[$key];

			$data[2][$key]['value'] = round($data[2][$key]['value'] / $players_count, 2);
		}

		while (list($key, ) = each($data[3]))
		{
			$data[3][$key]['value'] = round($data[3][$key]['value'] / $players_net_count[$key], 2);
		}
		while (list($key, ) = each($data[4]))
		{
			list(, $current_key) = explode("-", $key, 2);

			$players_count = $type === "all" ? $players_age_count["6-".$current_key] : $players_age_count[$key];

			$data[4][$key]['value'] = round($data[4][$key]['value'] / $players_count, 2);
		}
		while (list($key, ) = each($data[5]))
		{
			list(, $current_key) = explode("-", $key, 2);

			$players_count = $type === "all" ? $players_age_count["6-".$current_key] : $players_age_count[$key];

			$data[5][$key]['value'] = round($data[5][$key]['value'] / $players_count, 2);
		}
		while (list($key, ) = each($data[6]))
		{
			$data[6][$key]['value'] = round($data[6][$key]['value'] / $players_age_count[$key], 2);
		}
		while (list($key, ) = each($data[7]))
		{
			list($sex_type, $date) = explode("-", $key, 2);

			if ($sex_type == 2 || $sex_type == 5)
				$current_key = "8-".$date;
			else if ($sex_type == 1 || $sex_type == 4)
				$current_key = "7-".$date;
			else
				$current_key = "6-".$date;

			if (($type === "all" && !isset($players_sex_count[$current_key])) || ($type !== "all" && !isset($players_sex_count[$key])))
				continue;

			$players_count = $type === "all" ? $players_sex_count[$current_key] : $players_sex_count[$key];

			$data[7][$key]['value'] = round($data[7][$key]['value'] / $players_count, 2);
		}

		while (list($key, $val) = each($data))
			$data[$key] = array_values($val);

		return $data;
	}

	private function counters_mau_percent_type($cache_date, $key)
	{
		$dau = array();

		$result = $this->DB->{"counters_dau_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if (!isset($dau[$date]))
				$dau[$date] = array();

			$dau[$date][$type] = $row['value'];
		}

		$data = array();

		$result = $this->DB->{"counters_mau_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = $row['value'];

			if (!isset($dau[$date][$type]) || $value == 0)
				continue;
			$day = &$dau[$date][$type];

			$data[] = array('date' => $date, 'type' => $type, 'value' => round(($day * 100) / $value, 2));
		}

		return $data;
	}

	private function counters_sessions_time_type($cache_date, $key)
	{
		$time = array();

		$result = $this->DB->{"counters_sessions_time_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($key == "level")
				$type = $this->get_level_index($type);

			if (!isset($time[$date]))
				$time[$date] = array();
			if (!isset($time[$date][$type]))
				$time[$date][$type] = 0;
			$time[$date][$type] += $row['value'];
		}

		$count = array();

		$result = $this->DB->{"counters_sessions_count_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($key == "level")
				$type = $this->get_level_index($type);

			if (!isset($count[$date]))
				$count[$date] = array();
			if (!isset($count[$date][$type]))
				$count[$date][$type] = 0;
			$count[$date][$type] += $row['value'];
		}

		$average = array();

		while (list($date, $types) = each($time))
		{
			if (!isset($count[$date]))
				continue;

			while (list($type, $value) = each($types))
			{
				if (!isset($count[$date][$type]))
					continue;

				$point = &$count[$date][$type];
				$average[] = array('date' => $date, 'type' => $type, 'value' => round($value / $point / 60, 2));
			}
		}

		return $average;
	}

	private function counters_sessions_count_type($cache_date, $key)
	{
		$sessions = array();

		$result = $this->DB->{"counters_sessions_count_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($key == "level")
				$type = $this->get_level_index($type);

			if (!isset($sessions[$date]))
				$sessions[$date] = array();
			if (!isset($sessions[$date][$type]))
				$sessions[$date][$type] = 0;
			$sessions[$date][$type] += $row['value'];
		}

		$players = array();

		$result = $this->DB->{"counters_dau_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($key == "level")
				$type = $this->get_level_index($type);

			if (!isset($players[$date]))
				$players[$date] = array();
			if (!isset($players[$date][$type]))
				$players[$date][$type] = 0;
			$players[$date][$type] += $row['value'];
		}

		if ($key === "all")
		{
			$result = $this->DB->counters_dau_vip($cache_date);
			while ($row = $result->fetch())
			{
				$date = $row['date'];

				if (!isset($players[$date]))
					$players[$date] = array();
				if (!isset($players[$date][1]))
					$players[$date][1] = 0;
				$players[$date][1] += $row['value'];
			}

			$result = $this->DB->counters_dau_paying($cache_date);
			while ($row = $result->fetch())
			{
				$date = $row['date'];

				if (!isset($players[$date]))
					$players[$date] = array();
				if (!isset($players[$date][2]))
					$players[$date][2] = 0;
				$players[$date][2] += $row['value'];
			}
		}

		$average = array();

		while (list($date, $types) = each($sessions))
		{
			if (!isset($players[$date]))
				continue;

			while (list($type, $value) = each($types))
			{
				if (!isset($players[$date][$type]) || $players[$date][$type] == 0)
					continue;

				$point = &$players[$date][$type];
				$average[] = array('date' => $date, 'type' => $type, 'value' => round($value / $point, 2));
			}
		}

		return $average;
	}

	private function counters_dau_level($result)
	{
		$dau = array();

		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $this->get_level_index($row['data']);

			if (!isset($dau[$date."-".$type]))
				$dau[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);

			$dau[$date."-".$type]["value"] += $row['value'];
		}

		$dau = array_values($dau);

		return $dau;
	}

	private function players_paying_counts_full()
	{
		$players = array();
		$data = array();

		$result = $this->DB->players_paying_net("2000-01-01");
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$id = $row['data']."-".$row['net_id'];

			if (!isset($players[$id]))
				$players[$id] = 0;
			$players[$id] += $row['count'];

			$type = $this->get_players_paying_count_index($players[$id]);

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			$data[$date."-".$type]['value'] += 1;
		}

		$data = array_values($data);

		return array($data);
	}

	private function players_retention_type($cache_date, $key, $one_d = false)
	{
		$returned = array();

		$result = $this->DB->{"players_retention_".$key}();
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$days = $row['days'];
			$value = $row['value'];

			if ($key == "age")
				$type = $this->get_age_index($type);
			if ($key == "net" && $type == 255)
				continue;

			if (!isset($returned[$date]))
				$returned[$date] = array();

			if (!isset($returned[$date][$type]))
				$returned[$date][$type] = array('registered' => 0, '1d+' => 0, '2d+' => 0, '7d+' => 0, '30d+' => 0);
			$point = &$returned[$date][$type];

			$point['registered'] += $value;

			if ($days == 0)
				continue;
			if ($days >= 1)
				$point['1d+'] += $value;
			if ($days >= 2)
				$point['2d+'] += $value;
			if ($days >= 7)
				$point['7d+'] += $value;
			if ($days >= 30)
				$point['30d+'] += $value;
		}

		if ($one_d !== false)
		{
			$result = $this->DB->{"players_retention_1d_".$key}($cache_date);
			while ($row = $result->fetch())
			{
				$date = $row['registered'];
				$type = $row['data'];
				$days = $row['days'];

				if ($days != 1)
					continue;
				if (!isset($returned[$date][$type]))
					continue;

				$returned[$date][$type]['1d'] = $row['value'];
			}
		}

		$data0 = array();
		$data1 = array();
		$data2 = array();
		$data7 = array();
		$data30 = array();

		while (list($date, $types) = each($returned))
		{
			while (list($type, $values) = each($types))
			{
				$registered = &$values['registered'];

				$data1[] = array('date' => $date, 'type' => $type, 'value' => round(($values['1d+'] * 100) / $registered, 2));
				$data2[] = array('date' => $date, 'type' => $type, 'value' => round(($values['2d+'] * 100) / $registered, 2));
				$data7[] = array('date' => $date, 'type' => $type, 'value' => round(($values['7d+'] * 100) / $registered, 2));
				$data30[] = array('date' => $date, 'type' => $type, 'value' => round(($values['30d+'] * 100) / $registered, 2));

				if (!isset($values['1d']))
					continue;

				$data0[] = array('date' => $date, 'type' => $type, 'value' => round(($values['1d'] * 100) / $registered, 2));
			}
		}

		if ($one_d === false)
			return array($data1, $data2, $data7, $data30);
		return array($data0, $data1, $data2, $data7, $data30);
	}

	private function players_average_life_time_type($cache_date, $key)
	{
		$data_all = array();
		$data = array();

		$result = $this->DB->{"players_retention_1d_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$days = $row['days'] * $row['value'];

			if (!isset($data_all[$date]))
				$data_all[$date] = array('days' => 0, 'value' => 0);
			$point = &$data_all[$date];

			$point['days'] += $days;
			$point['value'] += $row['value'];

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = array('date' => $date, 'type' => $type, 'days' => 0, 'value' => 0);
			$point = &$data[$date."-".$type];

			$point['days'] += $days;
			$point['value'] += $row['value'];
		}

		$net = array();

		while (list(, $values) = each($data))
			$net[] = array('date' => $values['date'], 'type' => $values['type'], 'value' => round($values['days'] / $values['value']));

		if ($key !== "net")
			return $net;

		$all = array();

		while (list($date, $values) = each($data_all))
			$all[] = array('date' => $date, 'type' => 0, 'value' => round($values['days'] / $values['value']));

		return array($all, $net);
	}

	private function players_paying_day_type($cache_date, $key)
	{
		$data = array();
		$data_all = array();

		$result = $this->DB->{"finance_arppu_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($key == "age")
				$type = $this->get_age_index($type);

			if (!isset($data[$date."-".$type]))
				$data[$date."-".$type] = 0;

			$data[$date."-".$type] += $row['count'];

			if (!isset($data_all[$date]))
				$data_all[$date] = 0;

			$data_all[$date] += $row['count'];
		}

		$net = array();

		$result = $this->DB->{"counters_dau_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = $row['value'];

			if (!isset($data[$date."-".$type]) || $value == 0)
				continue;
			$payments = &$data[$date."-".$type];

			$net[] = array('date' => $date, 'type' => $type, 'value' => round(($payments * 100) / $value, 2));
		}

		if ($key != "net")
			return $net;

		$all = array();

		$result = $this->DB->counters_dau_all($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$value = $row['value'];

			if (!isset($data_all[$date]) || $value == 0)
				continue;
			$payments = &$data_all[$date];

			$all[] = array('date' => $date, 'type' => 0, 'value' => round(($payments * 100) / $value, 2));
			$all[] = array('date' => $date, 'type' => 1, 'value' => $payments);
		}

		return array($all, $net);
	}

	private function players_paying_month_type($cache_date, $key)
	{
		$data = array();

		$result = $this->DB->{"players_paying_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($key == "age")
				$type = $this->get_age_index($type);

			if (!isset($data[$date][$type]))
				$data[$date][$type] = array();
			$point = &$data[$date][$type];

			$point[] = $row['net_id'];
		}

		$last_date = false;

		$values = array();
		$inserts = array();
		$counts = array();
		$counts_net = array();
		$merged = array();

		while (list($date, $types) = each($data))
		{
			if (!isset($counts[$date]))
				$counts[$date] = 0;

			if ($last_date === false)
				$last_date = $date;

			$days = $this->date_diff($date, $last_date);

			$last_date = $date;

			while (list($type, $ids) = each($types))
			{
				if (!isset($values[$type]))
					$values[$type] = array();
				if (!isset($inserts[$type]))
					$inserts[$type] = array();
				if (!isset($merged[$type]))
					$merged[$type] = array();

				for ($i = 1; $i < $days; $i++)
				{
					$values[$type][] = array();
					$inserts[$type][] = 0;
				}

				$values[$type][] = $ids;
				$inserts[$type][] = count($ids);
				array_splice($merged[$type], -1, 0, $ids);

				$count = count($values[$type]);
				while ($count > 30)
				{
					$inserted = $inserts[$type][0];

					array_shift($values[$type]);
					array_shift($inserts[$type]);
					array_splice($merged[$type], 0, $inserted);

					$count--;
				}

				$unique = array_unique($merged[$type]);
				$count = count($unique);

				$counts[$date] += $count;
				$counts_net[$date."-".$type] = $count;
			}
		}

		$net = array();

		$result = $this->DB->{"counters_mau_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];
			$value = $row['value'];

			if (!isset($counts_net[$date."-".$type]) || $value == 0)
				continue;
			$count = &$counts_net[$date."-".$type];

			$net[] = array('date' => $date, 'type' => $type, 'value' => round(($count * 100) / $value, 2));
		}


		if ($key != "net")
			return $net;

		$all = array();

		$result = $this->DB->counters_mau_all($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$value = $row['value'];

			if (!isset($counts[$date]) || $value == 0)
				continue;
			$count = &$counts[$date];

			$all[] = array('date' => $date, 'type' => 0, 'value' => round(($count * 100) / $value, 2));
			$all[] = array('date' => $date, 'type' => 1, 'value' => $count);
		}

		return array($all, $net);
	}

	private function hidden_paying_month_type($cache_date, $key)
	{
		$counts = array();
		$counts_net = array();

		$result = $this->DB->{"hidden_paying_month_".$key}($cache_date);
		while ($row = $result->fetch())
		{
			$date = $row['date'];
			$type = $row['data'];

			if ($key == "age")
				$type = $this->get_age_index($type);

			if (!isset($counts_net[$date."-".$type]))
				$counts_net[$date."-".$type] = array('date' => $date, 'type' => $type, 'value' => 0);
			if (!isset($counts[$date]))
				$counts[$date] = array('date' => $date, 'type' => 0, 'value' => 0);

			$counts[$date]['value'] += $row['value'];
			$counts_net[$date."-".$type]['value'] += $row['value'];
		}

		$counts_net = array_values($counts_net);

		if ($key != "net")
			return $counts_net;

		$counts = array_values($counts);

		return array($counts, $counts_net);
	}

	private function achievements_all($cache_date, $achieve_type)
	{
		$achieves_list = $this->array_all_values(array_keys($this->achieves_all[$achieve_type]));
		$result = $this->DB->achievements_all($achieves_list, $cache_date);
		$data = $this->type_data($result);

		return array($data);
	}

	/**
	 * Common functions
	 */
	private function get_age_index($age)
	{
		if ($age >= 36)
			return 5;
		if ($age >= 25)
			return 4;
		if ($age >= 19)
			return 3;
		if ($age >= 15)
			return 2;
		if ($age >= 11)
			return 1;
		if ($age > 0)
			return 0;
		return 99;
	}

	private function get_payment_index($balance)
	{
		if (in_array($balance, array(5, 15, 35, 60, 125, 250, 500)))
			return $balance;
		if ($balance == 150)
			return 150;
		if ($balance == 50)
			return 50;
		if ($balance == 10)
			return 10;
		if ($balance > 999)
			return 1000;
		if ($balance > 500)
			return 501;
		if ($balance > 250)
			return 251;
		if ($balance > 150)
			return 151;
		if ($balance > 100)
			return 101;
		if ($balance > 70)
			return 71;
		if ($balance > 50)
			return 51;
		if ($balance > 0)
			return 1;
		return 0;
	}

	private function get_period_index($days)
	{
		if ($days >= 31)
			return 31;
		if ($days >= 15)
			return 15;
		if ($days >= 8)
			return 8;
		if ($days >= 2)
			return 2;
		return 0;
	}

	private function get_active_index($data)
	{
		if ($data >= 61)
			return 8;
		if ($data >= 31)
			return 7;
		if ($data >= 21)
			return 6;
		if ($data >= 11)
			return 5;
		if ($data >= 6)
			return 4;
		if ($data >= 3)
			return 3;
		return $data;
	}

	private function get_shaman_level_index($data)
	{
		if ($data >= 51)
			return 10;
		if ($data >= 45)
			return 9;
		if ($data >= 40)
			return 8;
		if ($data >= 35)
			return 7;
		if ($data >= 30)
			return 6;
		if ($data >= 25)
			return 5;
		if ($data >= 20)
			return 4;
		if ($data >= 15)
			return 3;
		if ($data >= 10)
			return 2;
		if ($data >= 5)
			return 1;
		return 0;
	}

	private function get_loading_ms_index($data)
	{
		if ($data >= 2000)
			return 6;
		if ($data >= 1000)
			return 5;
		if ($data >= 700)
			return 4;
		if ($data >= 400)
			return 3;
		if ($data >= 200)
			return 2;
		if ($data >= 100)
			return 1;
		return 0;
	}

	private function get_loading_time_index($graph, $data)
	{
		if ($data > 61)
			return 9;
		if ($data > 31)
			return 8;
		if ($data > 21)
			return 7;
		if ($data > 11)
			return 6;
		if ($data > 5)
			return 5;
		if ($data > 1)
			return intval($data);
		if ($data == 1)
			return intval($graph);
		return 0;
	}

	private function get_paid_group_index($sum)
	{
		if ($sum >= 3000)
			return 11;
		if ($sum >= 1500)
			return 10;
		if ($sum >= 1000)
			return 9;
		if ($sum >= 700)
			return 8;
		if ($sum >= 500)
			return 7;
		if ($sum >= 300)
			return 6;
		if ($sum >= 200)
			return 5;
		if ($sum >= 150)
			return 4;
		if ($sum >= 100)
			return 3;
		if ($sum >= 50)
			return 2;
		if ($sum >= 25)
			return 1;
		return 0;
	}

	private function get_players_paying_count_index($data)
	{
		if ($data >= 1000)
			return 12;
		if ($data >= 500)
			return 11;
		if ($data >= 100)
			return 10;
		if ($data >= 70)
			return 9;
		if ($data >= 40)
			return 8;
		if ($data >= 15)
			return 7;
		if ($data >= 10)
			return 6;
		if ($data >= 5)
			return 5;
		return $data;
	}

	private function get_level_index($level)
	{
		reset($this->level_groups);
		while ((list($index, $levels) = each($this->level_groups)))
		{
			$levels = explode("-", $levels);

			if (!isset($levels[1]))
				$levels[] = $levels[0];

			if ($level > $levels[1])
				continue;

			return $index;
		}

		return 0;
	}

	private function get_item_location_index($data)
	{
		if (($data >= 55 && $data <= 64) || ($data >= 140 && $data <= 149))
			return 13;
		if ($data >= 80 && $data <= 99)
			return 10;
		if ($data >= 100 && $data <= 119)
			return 9;
		if (($data >= 40 && $data <= 49) || ($data >= 130 && $data <= 139))
			return 4;
		if (($data >= 70 && $data <= 79) || ($data >= 120 && $data <= 129))
			return 3;
		if ($data >= 20 && $data <= 39)
			return 2;
		if ($data >= 10 && $data <= 19)
			return 1;
		if ($data < 10)
			return 0;
		return false;
	}

	private function get_life_time_period($data)
	{
		if ($data > 90)
			return 11;
		if ($data > 60)
			return 10;
		if ($data > 30)
			return 9;
		if ($data > 21)
			return 8;
		if ($data > 14)
			return 7;
		if ($data > 10)
			return 6;
		if ($data > 7)
			return 5;
		if ($data > 4)
			return 4;
		return $data;
	}

	private function get_index($data, $values, $default = false)
	{
		$last = $default;
		reset($values);
		while (list($key, $value) = each($values))
		{
			$condition = preg_replace("/\d+/", "", $value);
			$subject = preg_replace("/[^\d]/", "", $value);
			$subject = intval($subject);

			if ($condition == "" && $data == $subject)
				return $key;

			if ($condition == "<" && $data < $subject)
				return $key;

			if ($condition == ">" && $data > $subject)
				return $key;

			if ($condition == "-")
			{
				list($begin, $end) = explode("-", $value);

				if ($data >= $begin && $data <= $end)
					return $key;
			}

			if ($condition == "+" && $data >= $subject)
				$last = $key;

			if ($condition == "+" && $data < $subject)
				return $last;
		}

		return $last;
	}

	private function get_prices($date)
	{
		if ($date >= "2015-10-22")
			return $this->prices;
		return $this->prices_old;
	}

	private function get_revenue($date)
	{
		if ($date >= "2015-10-22")
			return $this->revenue;
		return $this->revenue_old;
	}

	private function date_diff($date1, $date2)
	{
		$date1 = date_parse($date1);
		$date2 = date_parse($date2);

		$time1 = gmmktime(0, 0, 0, $date1['month'], $date1['day'], $date1['year']);
		$time2 = gmmktime(0, 0, 0, $date2['month'], $date2['day'], $date2['year']);

		return (($time1 - $time2) / 86400);
	}

	private function simple_data($result, $legend)
	{
		$data = array();
		while ($row = $result->fetch())
		{
			reset($legend);
			while (list($type, $field) = each($legend))
				$data[] = array('date' => $row['date'], 'type' => $type, 'value' => $row[$field]);
		}

		return $data;
	}

	private function type_data($result)
	{
		$data = array();
		while ($row = $result->fetch())
			$data[] = array('date' => $row['date'], 'type' => $row['data'], 'value' => $row['value']);

		return $data;
	}

	private function array_all_values(array $arr)
	{
		$str = "";

		reset($arr);
		while (list(, $val) = each($arr))
			$str .= $val.", ";

		$str = substr($str, 0, count($str)-3);

		return($str);
	}
}

?>